"use strict";var ApplicationConfiguration=function(){var applicationModuleName="meanjs-test2",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","checklist-model","as.sortable","angular-loading-bar","chart.js"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.module(ApplicationConfiguration.applicationModuleName).config(["cfpLoadingBarProvider",function(cfpLoadingBarProvider){cfpLoadingBarProvider.includeSpinner=!0}]),angular.module(ApplicationConfiguration.applicationModuleName).run(function($rootScope){}),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("category-assignment"),ApplicationConfiguration.registerModule("category-setup"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("dependency-analysis"),ApplicationConfiguration.registerModule("dependency-setup"),ApplicationConfiguration.registerModule("evaluation-summaries"),ApplicationConfiguration.registerModule("financial-analysis-setup"),ApplicationConfiguration.registerModule("financial-analysis"),ApplicationConfiguration.registerModule("gate-performances"),ApplicationConfiguration.registerModule("gate-process-assignment"),ApplicationConfiguration.registerModule("gate-process-templates"),ApplicationConfiguration.registerModule("gate-review-setup"),ApplicationConfiguration.registerModule("gate-reviews"),ApplicationConfiguration.registerModule("improvement-activities"),ApplicationConfiguration.registerModule("improvement-setup"),ApplicationConfiguration.registerModule("log-delivery-setup"),ApplicationConfiguration.registerModule("log-milestone-setup"),ApplicationConfiguration.registerModule("log-summaries"),ApplicationConfiguration.registerModule("maturity-management"),ApplicationConfiguration.registerModule("maturity-setup"),ApplicationConfiguration.registerModule("mytao"),ApplicationConfiguration.registerModule("people-portfolio-analysis"),ApplicationConfiguration.registerModule("people-project-analysis"),ApplicationConfiguration.registerModule("people-setup"),ApplicationConfiguration.registerModule("portfolio-assignment"),ApplicationConfiguration.registerModule("portfolio-change-requests"),ApplicationConfiguration.registerModule("portfolio-issues"),ApplicationConfiguration.registerModule("portfolio-milestones"),ApplicationConfiguration.registerModule("portfolio-ranking-assignment"),ApplicationConfiguration.registerModule("portfolio-review-templates"),ApplicationConfiguration.registerModule("portfolio-reviews"),ApplicationConfiguration.registerModule("portfolio-setup"),ApplicationConfiguration.registerModule("portfolio-status-reports"),ApplicationConfiguration.registerModule("portfolio-status-updates"),ApplicationConfiguration.registerModule("priority-assignment"),ApplicationConfiguration.registerModule("priority-setup"),ApplicationConfiguration.registerModule("project-change-requests"),ApplicationConfiguration.registerModule("project-identification"),ApplicationConfiguration.registerModule("project-issues"),ApplicationConfiguration.registerModule("project-milestones"),ApplicationConfiguration.registerModule("project-review-setup"),ApplicationConfiguration.registerModule("project-review-templates"),ApplicationConfiguration.registerModule("project-reviews"),ApplicationConfiguration.registerModule("project-selection"),ApplicationConfiguration.registerModule("project-status-updates"),ApplicationConfiguration.registerModule("qualitative-analysis-setup"),ApplicationConfiguration.registerModule("qualitative-analysis"),ApplicationConfiguration.registerModule("review-summaries"),ApplicationConfiguration.registerModule("risk-analysis-setup"),ApplicationConfiguration.registerModule("risk-analysis"),ApplicationConfiguration.registerModule("roadmaps"),ApplicationConfiguration.registerModule("status-report-setup"),ApplicationConfiguration.registerModule("status-summaries"),ApplicationConfiguration.registerModule("strategy-alignment"),ApplicationConfiguration.registerModule("strategy-node-setup"),ApplicationConfiguration.registerModule("subusers"),ApplicationConfiguration.registerModule("users"),angular.module("articles").run(["Menus",function(Menus){}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.articlesCreateURL=function(){$location.path("articles/create")},$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("category-assignment").config(["$stateProvider",function($stateProvider){$stateProvider.state("categorization-overview",{url:"/categorization-overview",templateUrl:"modules/category-assignment/views/categorization-overview.client.view.html"}).state("category-assignment",{url:"/category-assignment",templateUrl:"modules/category-assignment/views/category-assignment.client.view.html"})}]),angular.module("category-assignment").controller("CategorizationOverviewController",["$rootScope","$scope","$stateParams","$location","Authentication","CategoryAssignment","CategoryGroups","Categories","Portfolios","StrategyNodes","_","$q","$sce",function($rootScope,$scope,$stateParams,$location,Authentication,CategoryAssignment,CategoryGroups,Categories,Portfolios,StrategyNodes,_,$q,$sce){$rootScope.staticMenu=!1,$scope.initError=[],$scope.oneAtATime=!0,$scope.typeOfChart="number";var projectCategorizationPortfolio=[],projectCategorizationStrategy=[];$scope.init=function(){Portfolios.query(function(portfolios){$scope.portfolios=portfolios,$scope.portfolioTrees=createNodeTrees(portfolios)},function(err){$scope.initError.push({message:err.data.message})}),StrategyNodes.query(function(res){$scope.strategyNodes=res,$scope.strategyTrees=createNodeTrees(res)},function(err){$scope.initError.push({message:err.data.message})}),CategoryGroups.query(function(categoryGroups){$scope.categoryGroups=categoryGroups},function(err){$scope.initError.push(err.data.message)}),Categories.query(function(res){$scope.categories=res},function(err){$scope.initError.push(err.data.message)}),CategoryAssignment.categorizationOverviewPortfolio(function(res){projectCategorizationPortfolio=res},function(err){$scope.initError.push(err.data.message)}),CategoryAssignment.categorizationOverviewStrategy(function(res){projectCategorizationStrategy=res},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})});var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};$scope.tooltipView="error",$scope.createTooltipView=function(projects){var stringArray=_.map(projects,function(project){return $sce.trustAsHtml("<a>"+project.identification.name+'</a><hr style="margin: 0.1%">')});$scope.tooltipView=stringArray.join("")},$scope.orderTable="countCategoryValue",$scope.selectPortfolio=function(portfolio){return"all"===portfolio?($scope.selectedPortfolio={name:"All"},void($scope.projectCategorizationPortfolioView=_.filter(projectCategorizationPortfolio,function(item){return item.all===!0}))):"unassigned"===portfolio?($scope.selectedPortfolio={name:"Unassigned"},void($scope.projectCategorizationPortfolioView=_.filter(projectCategorizationPortfolio,function(item){return item.all===!1&&!item.portfolio}))):($scope.selectedPortfolio=portfolio,void($scope.projectCategorizationPortfolioView=_.filter(projectCategorizationPortfolio,function(item){return item.portfolio&&item.portfolio===portfolio._id})))},$scope.selectStrategyNode=function(strategyNode){return"all"===strategyNode?($scope.selectedStrategyNode={name:"All"},void($scope.projectCategorizationStrategyView=_.filter(projectCategorizationStrategy,function(item){return item.all===!0}))):"unassigned"===strategyNode?($scope.selectedStrategyNode={name:"Unassigned"},void($scope.projectCategorizationStrategyView=_.filter(projectCategorizationStrategy,function(item){return item.all===!1&&!item.parent}))):($scope.selectedStrategyNode=strategyNode,void($scope.projectCategorizationStrategyView=_.filter(projectCategorizationStrategy,function(item){return item.parent&&item.parent===strategyNode._id})))}}]),angular.module("category-assignment").controller("CategoryAssignmentController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","Portfolios","GateProcessTemplates","CategoryGroups","Categories","CategoryValues","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,Portfolios,GateProcessTemplates,CategoryGroups,Categories,CategoryValues,_,$q){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){$scope.userData=Authentication.user,Projects.query({"selection.active":!0},function(projects){$scope.projects=projects},function(err){$scope.initError.push(err.data.message)}),Portfolios.query(function(res){$scope.portfolios=res},function(err){$scope.initError.push(err.data.message)}),GateProcessTemplates.query(function(res){$scope.gateProcesses=res},function(err){$scope.initError.push(err.data.message)}),CategoryGroups.query(function(groups){$scope.categoryGroups=groups},function(err){$scope.initError.push(err.data.message)}),Categories.query(function(categories){$scope.categories=categories},function(err){$scope.initError.push(err.data.message)}),CategoryValues.query(function(values){$scope.categoryValues=values},function(err){$scope.initError.push(err.data.message)}),$scope.showCategoryValue={}},$scope.userHasAuthorization=function(action,userData,project){var userIsSuperhero,userIsProjectManager,userIsPortfolioManager;return"edit"===action?(userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsProjectManager=userData._id===project.identification.projectManager||userData._id===project.identification.backupProjectManager,project.portfolio&&(userIsPortfolioManager=userData._id===project.portfolio.portfolioManager||userData._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsProjectManager||userIsPortfolioManager):void 0};$scope.switchProjectForm={},$scope.selectProjectForm=function(string){"default"===string&&($scope.switchProjectForm="default"),"new"===string&&($scope.switchProjectForm="new"),"view"===string&&($scope.switchProjectForm="view"),"edit"===string&&($scope.switchProjectForm="edit")},$scope.switchCategoryForm={},$scope.selectCategoryForm=function(assignedCategory,string){"view"===string&&($scope.switchCategoryForm[assignedCategory._id]="view"),"edit"===string&&($scope.switchCategoryForm[assignedCategory._id]="edit")};var originalCategoryAssignment;$scope.selectProject=function(project){originalCategoryAssignment={},Projects.get({projectId:project._id,retPropertiesString:"user created selection identification categorization portfolio",deepPopulateArray:["portfolio","categorization.group","categorization.categories.category.categoryValues"]},function(res){$scope.selectedProject=res},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelViewProject=function(){$scope.selectedProject=null,originalCategoryAssignment=null},$scope.selectCategoryAssignment=function(assignedCategory){originalCategoryAssignment[assignedCategory._id]=_.clone(assignedCategory),$scope.selectCategoryForm(assignedCategory,"edit")},$scope.saveAssignedCategory=function(project,assignedGroup,assignedCategory){Projects.updateCategoryAssignment({projectId:project._id,assignedGroupId:assignedGroup._id,assignedCategoryId:assignedCategory._id},{valueId:assignedCategory.categoryValue},function(res){$scope.error=null,$scope.selectCategoryForm(assignedCategory,"view")},function(err){$scope.error=err.data.message})},$scope.cancelEditAssignedCategory=function(assignedCategory){$scope.error=null,assignedCategory.categoryValue=originalCategoryAssignment[assignedCategory._id].categoryValue,$scope.selectCategoryForm(assignedCategory,"view")}}]),angular.module("category-assignment").factory("CategoryAssignment",["$resource",function($resource){return $resource("category-assignment",{},{categorizationOverviewPortfolio:{method:"GET",isArray:!0,url:"category-assignment/categorizationOverviewPortfolio"},categorizationOverviewStrategy:{method:"GET",isArray:!0,url:"category-assignment/categorizationOverviewStrategy"}})}]),angular.module("category-setup").config(["$stateProvider",function($stateProvider){$stateProvider.state("category-setup",{url:"/category-setup",templateUrl:"modules/category-setup/views/category-setup.client.view.html"})}]),angular.module("category-setup").controller("CategorySetupController",["$rootScope","$scope","$stateParams","$location","Authentication","CategoryGroups","Categories","CategoryValues","$q","_",function($rootScope,$scope,$stateParams,$location,Authentication,CategoryGroups,Categories,CategoryValues,$q,_){$rootScope.staticMenu=!1,$scope.init=function(){CategoryGroups.query(function(groups){$scope.categoryGroups=groups})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.switchCategoryGroupForm={},$scope.selectCategoryGroupForm=function(group,string){"view"===string&&($scope.switchCategoryGroupForm[group._id]="view"),"edit"===string&&($scope.switchCategoryGroupForm[group._id]="edit")},$scope.switchCategoryForm={},$scope.selectCategoryForm=function(category,string){"view"===string&&($scope.switchCategoryForm[category._id]="view"),"new"===string&&($scope.switchCategoryForm[category._id]="new"),"edit"===string&&($scope.switchCategoryForm[category._id]="edit")},$scope.switchCategoryValueForm={},$scope.selectCategoryValueForm=function(categoryValue,string){"view"===string&&($scope.switchCategoryValueForm[categoryValue._id]="view"),"edit"===string&&($scope.switchCategoryValueForm[categoryValue._id]="edit")},$scope.categoryGroupDetails="groupHeader",$scope.categoryDetails="categoryHeader",$scope.categoryGroupList=function(){CategoryGroups.query(function(categoryGroups){$scope.categoryGroups=categoryGroups})},$scope.createCategoryGroup=function(){$scope.error=null;var categoryGroup=new CategoryGroups({name:"New category group",categories:[]});categoryGroup.$save(function(response){$scope.categoryGroupList()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createCategory=function(group){var category=new Categories({name:"New category",categoryValues:[]});category.$save({groupId:group._id},function(res){group.categories.push(res)},function(errorResponse){$scope.error=errorResponse.data.message})};var originalEditCategoryGroup={};$scope.selectCategoryGroup=function(categoryGroup){originalEditCategoryGroup=_.clone(categoryGroup),$scope.selectedCategoryGroup=categoryGroup},$scope.updateCategoryGroup=function(group){CategoryGroups.update({_id:group._id,name:group.name,description:group.description},function(group){$scope.selectCategoryGroupForm(group,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditCategoryGroup=function(group){$scope.error=null,$scope.selectedCategoryGroup.name=originalEditCategoryGroup.name,$scope.selectedCategoryGroup.description=originalEditCategoryGroup.description,$scope.selectCategoryGroupForm(group,"view")};var originalEditCategory={};$scope.selectCategory=function(category){originalEditCategory[category._id]=_.clone(category),$scope.error=null,$scope.selectCategoryForm(category,"edit")},$scope.updateCategory=function(category){Categories.update({_id:category._id,name:category.name,description:category.description},function(category){$scope.selectCategoryForm(category,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditCategory=function(category){$scope.error=null,category.name=originalEditCategory[category._id].name,category.description=originalEditCategory[category._id].description,$scope.selectCategoryForm(category,"view")},$scope.removeCategoryGroup=function(group){$scope.error=null,group.$remove(function(response){$scope.selectedCategoryGroup=null,$scope.categoryGroupList()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.removeCategory=function(group,category){$scope.error=null,Categories.remove({groupId:group._id},category,function(res){group.categories=_.without(group.categories,category)},function(err){$scope.error=err.data.message})},$scope.createCategoryValue=function(category){$scope.error=null;var categoryValue=new CategoryValues({name:"New category value",description:"New category value description"});categoryValue.$save({categoryId:category._id},function(categoryValueRes){category.categoryValues.push(categoryValueRes)},function(errorResponse){$scope.error=errorResponse.data.message})};var originalEditCategoryValue={};$scope.selectEditCategoryValue=function(category,categoryValue){originalEditCategoryValue[categoryValue._id]=_.clone(categoryValue),$scope.selectCategoryValueForm(categoryValue,"edit")},$scope.updateCategoryValue=function(category,categoryValue){CategoryValues.update(categoryValue,function(response){$scope.selectCategoryValueForm(categoryValue,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditCategoryValue=function(categoryValue){$scope.error=null,categoryValue.name=originalEditCategoryValue[categoryValue._id].name,categoryValue.description=originalEditCategoryValue[categoryValue._id].description,$scope.selectCategoryValueForm(categoryValue,"view")},$scope.removeCategoryValue=function(category,categoryValue){$scope.error=null,CategoryValues.remove({categoryId:category._id},categoryValue,function(value){category.categoryValues=_.without(category.categoryValues,categoryValue)},function(err){$scope.error=err.data.message})}}]),angular.module("category-setup").factory("Categories",["$resource",function($resource){return $resource("categories/:categoryId",{categoryId:"@_id"},{update:{method:"PUT"}})}]),angular.module("category-setup").factory("CategoryGroups",["$resource",function($resource){return $resource("category-groups/:categoryGroupId",{categoryGroupId:"@_id"},{update:{method:"PUT"}})}]),angular.module("category-setup").factory("CategoryValues",["$resource",function($resource){return $resource("category-values/:categoryValueId",{categoryValueId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",resolve:{user:function(Authentication){return Authentication.user}},onEnter:function(user,$location){user?$location.path("/mytao"):$location.path("/signin")}})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$rootScope","Authentication","$stateParams","_","$anchorScroll","$location",function($scope,$rootScope,Authentication,$stateParams,_,$anchorScroll,$location){$scope.init=function(){if($stateParams){var partial=$stateParams.sectionName;partial?$scope.setTemplate(partial):$scope.setTemplate("overview")}},$scope.initArticle=function(){$location.hash("top"),$anchorScroll()},$scope.authentication=Authentication,$rootScope.staticMenu=!0,$scope.showKnowledgeAreas=!0,$scope.setTemplate=function(partial){$scope.includeTemplate=partial,$location.hash("top"),$anchorScroll()}}]),angular.module("core").directive("graph",["d3","_",function(d3,_){return{restrict:"EA",scope:{data:"=data",selectNode:"=selectNode",selectLink:"=selectLink",width:"=width",height:"=height"},link:function(scope,element){var setupParameters,weightScale,valueScale,drawGraph,redrawGraph,onMouseoverLink,onMouseoverNode,onMouseoutLink,onMouseoutNode,onClickLink,onClickNode,width=scope.width,height=scope.height,inputData=scope.data,color=d3.scale.category20(),force=d3.layout.force().charge(-200).linkDistance(100).size([width,height]),svg=d3.select(element[0]).append("svg").attr("width",width).attr("height",height),getNodeColorGroup=function(d){return 1};onMouseoverLink=function(that,d,i){},onMouseoutLink=function(that,d,i){},onClickLink=function(that,d,i){scope.selectLink(d)},onMouseoverNode=function(that,d,i){},onMouseoutNode=function(that,d,i){},onClickNode=function(that,d,i){scope.selectNode(d),d.fixed=!d.fixed},setupParameters=function(){weightScale=d3.scale.linear().domain(d3.extent(inputData.nodes,function(d){return d.weight})).range([6,20]),valueScale=d3.scale.linear().domain(d3.extent(inputData.links,function(d){return d.value})).range([3,10])},drawGraph=function(){setupParameters(),force.nodes(inputData.nodes,function(d){return d._id}).links(inputData.links,function(d){return d._id}).start();var link=svg.selectAll(".link").data(inputData.links,function(d){return d._id}).enter().append("line").attr("class","link").style("stroke-width",function(d){return valueScale(d.value)}).on("mouseover",function(d,i){onMouseoverLink(this,d,i)}).on("mouseout",function(d,i){onMouseoutLink(this,d,i)}).on("click",function(d,i){onClickLink(this,d,i)}),node=svg.selectAll(".node").data(inputData.nodes,function(d){return d._id}).enter().append("circle").attr("class","node").attr("r",function(d){return weightScale(d.weight)}).style("fill",function(d){return color(getNodeColorGroup(d))}).call(force.drag).on("click",function(d,i){onClickNode(this,d,i)});node.append("title").text(function(d){return d.identification.name}),force.on("tick",function(){link.attr("x1",function(d){return d.source.x}).attr("y1",function(d){return d.source.y}).attr("x2",function(d){return d.target.x}).attr("y2",function(d){return d.target.y}),node.attr("cx",function(d){return d.x}).attr("cy",function(d){return d.y})})},drawGraph(),scope.$watchCollection(function(){return scope.data},function(newVal,oldVal){newVal!==oldVal&&(console.log(newVal),inputData=newVal,redrawGraph())}),redrawGraph=function(){force.stop(),force.links(inputData.links,function(d){return d._id}).nodes(inputData.nodes,function(d){return d._id}).start(),setupParameters();var newLinks=svg.selectAll(".link").data(inputData.links,function(d){return d._id}),newNodes=svg.selectAll(".node").data(inputData.nodes,function(d){return d._id}),existingNewNodes=(newLinks.style("stroke-width",function(d){return valueScale(d.value)}).on("mouseover",function(d,i){onMouseoverLink(this,d,i)}).on("mouseout",function(d,i){onMouseoutLink(this,d,i)}).on("click",function(d,i){onClickLink(this,d,i)}),newNodes.attr("r",function(d){return weightScale(d.weight)}).style("fill",function(d){return color(getNodeColorGroup(d))}).call(force.drag).on("click",function(d,i){onClickNode(this,d,i)}));existingNewNodes.append("title").text(function(d){return d.identification.name});var appendedNewNodes=(newLinks.enter().append("line").attr("class","link").style("stroke-width",function(d){return valueScale(d.value)}).on("mouseover",function(d,i){onMouseoverLink(this,d,i)}).on("mouseout",function(d,i){onMouseoutLink(this,d,i)}).on("click",function(d,i){onClickLink(this,d,i)}),newNodes.enter().append("circle").attr("class","node").attr("r",function(d){return weightScale(d.weight)}).style("fill",function(d){return color(getNodeColorGroup(d))}).call(force.drag).on("click",function(d,i){onClickNode(this,d,i)}));appendedNewNodes.append("title").text(function(d){return d.identification.name}),newLinks.exit().transition().duration(1e3).style("opacity",0).remove(),newNodes.exit().transition().duration(2e3).style("opacity",0).remove(),force.on("tick",function(){d3.selectAll(".link").attr("x1",function(d){return d.source.x}).attr("y1",function(d){return d.source.y}).attr("x2",function(d){return d.target.x}).attr("y2",function(d){return d.target.y}),d3.selectAll(".node").attr("cx",function(d){return d.x}).attr("cy",function(d){return d.y})})}}}}]),angular.module("core").directive("portfolioTree",[function(){return{restrict:"EA",scope:{portfolios:"=portfolios",portfolioTrees:"=portfolioTrees",selectPortfolio:"=selectPortfolio",isResolving:"=isResolving"},templateUrl:"modules/core/directives/portfolio-tree.client.directive.html"}}]),angular.module("core").directive("projectList",[function(){return{restrict:"EA",scope:{projects:"=projects",selectProject:"=selectProject",portfolios:"=portfolios",gateProcesses:"=gateProcesses",isResolving:"=isResolving"},templateUrl:"modules/core/directives/project-list.client.directive.html"}}]),angular.module("core").directive("roadmapDelivery",["d3","_","$parse",function(d3,_,$parse){return{restrict:"EA",link:function(scope,element,attrs){var x,xAxis,setChartParameters,onMouseover,onMouseout,onClick,drawChart,redrawChart,parseData=$parse(attrs.data),parseSelectProject=$parse(attrs.selectProject),selectProject=parseSelectProject(scope),data=parseData(scope),baseColorRectDelivery="#d3d3d3",margin={top:20,right:20,left:20},width=710-margin.left-margin.right,barHeight=20;scope.$watchCollection(parseData,function(newVal,oldVal){newVal!==oldVal&&(data=newVal,redrawChart())}),setChartParameters=function(){var minAbsolute=d3.min(data,function(d){return d.gateData.start?new Date(d.gateData.start):void 0}),maxAbsolute=d3.max(data,function(d){return d.gateData.end?new Date(d.gateData.end):void 0});x=d3.time.scale().domain([minAbsolute,maxAbsolute]).range([0,width-(1.5*margin.left+1.5*margin.right)]),xAxis=d3.svg.axis().scale(x).orient("top")},onMouseover=function(that,d){d3.select(that).style("cursor","pointer")},onMouseout=function(that,d){d3.select(that).style("cursor","auto")},onClick=function(that,d){selectProject(d)},d3.select(element[0]).append("svg").attr("id","svgDelivery"),drawChart=function(){setChartParameters();var chart=d3.select("#svgDelivery").attr("width",width).attr("height",barHeight*data.length+2*margin.top).append("g").attr("id","chartDelivery").attr("transform","translate("+margin.left+","+margin.top+")");chart.append("g").attr("class","x axis").call(xAxis).attr("transform","translate("+margin.left+",0)");var bar=chart.selectAll(".barDelivery").data(data,function(d){return d._id}).enter().append("g").attr("class","barDelivery").attr("transform",function(d,i){return"translate("+(x(new Date(d.gateData.start))+margin.left)+","+(i*barHeight+margin.top)+")"});bar.append("rect").attr("class","rectDelivery").attr("width",function(d){return x(new Date(d.gateData.end))-x(new Date(d.gateData.start))}).attr("height",barHeight-1).attr("fill",function(d){return d.gateData.status.color?d.gateData.status.color:baseColorRectDelivery}).on("mouseover",function(d){onMouseover(this,d)}).on("mouseout",function(d){onMouseout(this,d)}).on("click",function(d){onClick(this,d)}),bar.append("text").attr("x",function(d){return(x(new Date(d.gateData.end))-x(new Date(d.gateData.start)))/3}).attr("y",barHeight/2).attr("dy",".35em").text(function(d){return d.identification.name}).on("mouseover",function(d){onMouseover(this,d)}).on("mouseout",function(d){onMouseout(this,d)}).on("click",function(d){onClick(this,d)})},redrawChart=function(){setChartParameters();var svg=d3.select("#svgDelivery").attr("height",barHeight*data.length+2*margin.top),chart=svg.select("#chartDelivery");chart.select(".x.axis").call(xAxis);var newBars=chart.selectAll(".barDelivery").data(data,function(d){return d._id});newBars.transition().duration(1e3).attr("transform",function(d,i){return"translate("+(x(new Date(d.gateData.start))+margin.left)+","+(i*barHeight+margin.top)+")"}),newBars.selectAll(".rectDelivery").attr("width",function(d){return x(new Date(d.gateData.end))-x(new Date(d.gateData.start))}).attr("fill",function(d){return d.gateData.status.color?d.gateData.status.color:baseColorRectDelivery}),newBars.selectAll("text").attr("x",function(d){return(x(new Date(d.gateData.end))-x(new Date(d.gateData.start)))/3});var newAppendedBar=newBars.enter().append("g").attr("class","barDelivery").attr("transform",function(d,i){return"translate("+(x(new Date(d.gateData.start))+margin.left)+","+(i*barHeight+margin.top)+")"});newAppendedBar.append("rect").attr("class","rectDelivery").attr("width",function(d){return x(new Date(d.gateData.end))-x(new Date(d.gateData.start))}).attr("height",barHeight-1).attr("fill",function(d){return d.gateData.status.color?d.gateData.status.color:baseColorRectDelivery}).on("mouseover",function(d){onMouseover(this,d)}).on("mouseout",function(d){onMouseout(this,d)}).on("click",function(d){onClick(this,d)}).append("title").text(function(d){return d.identification.name+" - Start: "+d3.time.format("%b %a %e, %Y")(new Date(d.gateData.start))+" - End: "+d3.time.format("%b %a %e, %Y")(new Date(d.gateData.end))}),newAppendedBar.append("text").attr("x",function(d){return(x(new Date(d.gateData.end))-x(new Date(d.gateData.start)))/3}).attr("y",barHeight/2).attr("dy",".35em").text(function(d){return d.identification.name}).on("mouseover",function(d){
onMouseover(this,d)}).on("mouseout",function(d){onMouseout(this,d)}).on("click",function(d){onClick(this,d)});newBars.exit().remove()},drawChart()}}}]),angular.module("core").directive("roadmap",["d3","_","$parse",function(d3,_,$parse){return{restrict:"EA",link:function(scope,element,attrs){var x,xAxis,setChartParameters,onMouseover,onMouseout,onClick,drawChart,redrawChart,parseData=$parse(attrs.data),parseSelectProject=$parse(attrs.selectProject),selectProject=parseSelectProject(scope),data=parseData(scope),margin={top:20,right:20,left:20},width=710-margin.left-margin.right,barHeight=20;scope.$watchCollection(parseData,function(newVal,oldVal){newVal!==oldVal&&(data=newVal,redrawChart())}),setChartParameters=function(){var minAbsolute=d3.min(data,function(d){return d.identification.reqStartDate?new Date(d.identification.reqStartDate):void 0}),maxAbsolute=d3.max(data,function(d){return d.identification.reqEndDate?new Date(d.identification.reqEndDate):void 0});x=d3.time.scale().domain([minAbsolute,maxAbsolute]).range([0,width-(1.5*margin.left+1.5*margin.right)]),xAxis=d3.svg.axis().scale(x).orient("top")},onMouseover=function(that,d){d3.select(that).style("cursor","pointer")},onMouseout=function(that,d){d3.select(that).style("cursor","auto")},onClick=function(that,d){selectProject(d)},d3.select(element[0]).append("svg").attr("id","svgDefinition"),drawChart=function(){setChartParameters();var chart=d3.select("#svgDefinition").attr("width",width).attr("height",barHeight*data.length+2*margin.top).append("g").attr("id","chartDefinition").attr("transform","translate("+margin.left+","+margin.top+")");chart.append("g").attr("class","x axis").call(xAxis).attr("transform","translate("+margin.left+",0)");var bar=chart.selectAll(".barDefinition").data(data,function(d){return d._id}).enter().append("g").attr("class","barDefinition").attr("transform",function(d,i){return"translate("+(x(new Date(d.identification.reqStartDate))+margin.left)+","+(i*barHeight+margin.top)+")"});bar.append("rect").attr("class","rectDefinition").attr("width",function(d){return x(new Date(d.identification.reqEndDate))-x(new Date(d.identification.reqStartDate))}).attr("height",barHeight-1).on("mouseover",function(d){onMouseover(this,d)}).on("mouseout",function(d){onMouseout(this,d)}).on("click",function(d){onClick(this,d)}),bar.append("text").attr("x",function(d){return(x(new Date(d.identification.reqEndDate))-x(new Date(d.identification.reqStartDate)))/3}).attr("y",barHeight/2).attr("dy",".35em").text(function(d){return d.identification.name}).on("mouseover",function(d){onMouseover(this,d)}).on("mouseout",function(d){onMouseout(this,d)}).on("click",function(d){onClick(this,d)})},redrawChart=function(){setChartParameters();var svg=d3.select("#svgDefinition").attr("height",barHeight*data.length+2*margin.top),chart=svg.select("#chartDefinition");chart.select(".x.axis").call(xAxis);var newBars=chart.selectAll(".barDefinition").data(data,function(d){return d._id});newBars.transition().duration(1e3).attr("transform",function(d,i){return"translate("+(x(new Date(d.identification.reqStartDate))+margin.left)+","+(i*barHeight+margin.top)+")"}),newBars.selectAll(".rectDefinition").attr("width",function(d){return x(new Date(d.identification.reqEndDate))-x(new Date(d.identification.reqStartDate))}),newBars.selectAll("text").attr("x",function(d){return(x(new Date(d.identification.reqEndDate))-x(new Date(d.identification.reqStartDate)))/3});var newAppendedBar=newBars.enter().append("g").attr("class","barDefinition").attr("transform",function(d,i){return"translate("+(x(new Date(d.identification.reqStartDate))+margin.left)+","+(i*barHeight+margin.top)+")"});newAppendedBar.append("rect").attr("class","rectDefinition").attr("width",function(d){return x(new Date(d.identification.reqEndDate))-x(new Date(d.identification.reqStartDate))}).attr("height",barHeight-1).on("mouseover",function(d){onMouseover(this,d)}).on("mouseout",function(d){onMouseout(this,d)}).on("click",function(d){onClick(this,d)}).append("title").text(function(d){return d.identification.name+" - Start: "+d3.time.format("%b %a %e, %Y")(new Date(d.identification.reqStartDate))+" - End: "+d3.time.format("%b %a %e, %Y")(new Date(d.identification.reqEndDate))}),newAppendedBar.append("text").attr("x",function(d){return(x(new Date(d.identification.reqEndDate))-x(new Date(d.identification.reqStartDate)))/3}).attr("y",barHeight/2).attr("dy",".35em").text(function(d){return d.identification.name}).on("mouseover",function(d){onMouseover(this,d)}).on("mouseout",function(d){onMouseout(this,d)}).on("click",function(d){onClick(this,d)});newBars.exit().remove()},drawChart()}}}]),angular.module("core").directive("sankey",["d3","_",function(d3,_){return{restrict:"EA",scope:{data:"=data",selectNode:"=selectNode",selectLink:"=selectLink",width:"=width",height:"=height"},link:function(scope,element){var setParameters,intensityRamp,drawGraph,redrawGraph,onMouseoverLink,onMouseoverNode,onMouseoutLink,onMouseoutNode,onClickLink,onClickNode,width=scope.width,height=scope.height,inputData=scope.data,sankey=(d3.scale.category20(),d3.sankey().size([width,height]).nodeWidth(20).nodePadding(200)),gWidthOffset=20,gHeightOffset=20,svg=d3.select(element[0]).append("svg").attr("width",width+gWidthOffset).attr("height",height+gHeightOffset),sankeyG=svg.append("g").attr("transform","translate("+gWidthOffset+","+gHeightOffset+")").attr("id","sankeyG");onMouseoverLink=function(that,d,i){d3.select(that).style("stroke-opacity",.8)},onMouseoutLink=function(that,d,i){d3.selectAll("path.link").style("stroke-opacity",.5)},onClickLink=function(that,d,i){scope.selectLink(d)},onMouseoverNode=function(that,d,i){},onMouseoutNode=function(that,d,i){},onClickNode=function(that,d,i){scope.selectNode(d)},setParameters=function(){intensityRamp=d3.scale.linear().domain([0,d3.max(inputData.links,function(d){return d.value})]).range(["black","red"])},drawGraph=function(){setParameters(),sankey.nodes(inputData.nodes,function(d){return d._id}).links(inputData.links,function(d){return d._id}).layout(200);var node=(sankeyG.selectAll(".link").data(inputData.links,function(d){return d._id}).enter().append("path").attr("class","link").attr("d",sankey.link()).style("stroke-width",function(d){return d.dy}).style("stroke-opacity",.5).style("fill","none").style("stroke",function(d){return intensityRamp(d.value)}).sort(function(a,b){return b.dy-a.dy}).on("mouseover",function(d,i){onMouseoverLink(this,d,i)}).on("mouseout",function(d,i){onMouseoutLink(this,d,i)}).on("click",function(d,i){onClickLink(this,d,i)}),sankeyG.selectAll(".node").data(inputData.nodes,function(d){return d._id}).enter().append("g").attr("class","node").attr("transform",function(d){return"translate("+d.x+","+d.y+")"}));node.append("rect").attr("height",function(d){return d.dy}).attr("width",20).style("fill","pink").style("stroke","gray"),node.append("text").attr("x",0).attr("y",function(d){return d.dy/2}).attr("text-anchor","middle").text(function(d){return d.identification.name})},drawGraph(),scope.$watchCollection(function(){return scope.data},function(newVal,oldVal){newVal!==oldVal&&(console.log(newVal),inputData=newVal,redrawGraph())}),redrawGraph=function(){setParameters(),sankey.nodes(inputData.nodes,function(d){return d._id}).links(inputData.links,function(d){return d._id}).layout(32);var newLinks=sankeyG.selectAll(".link").data(inputData.links,function(d){return d._id}),newNodes=sankeyG.selectAll(".node").data(inputData.nodes,function(d){return d._id}),existingNewNodes=(newLinks.attr("d",sankey.link()).style("stroke-width",function(d){return d.dy}).style("stroke",function(d){return intensityRamp(d.value)}).sort(function(a,b){return b.dy-a.dy}).on("mouseover",function(d,i){onMouseoverLink(this,d,i)}).on("mouseout",function(d,i){onMouseoutLink(this,d,i)}).on("click",function(d,i){onClickLink(this,d,i)}),newNodes.attr("transform",function(d){return"translate("+d.x+","+d.y+")"}));existingNewNodes.selectAll("rect").attr("height",function(d){return d.dy}),existingNewNodes.selectAll("text").attr("y",function(d){return d.dy/2}).text(function(d){return d.identification.name});var appendedNewNodes=(newLinks.enter().append("path").attr("class","link").attr("d",sankey.link()).style("stroke-width",function(d){return d.dy}).style("stroke-opacity",.5).style("fill","none").style("stroke",function(d){return intensityRamp(d.value)}).sort(function(a,b){return b.dy-a.dy}).on("mouseover",function(d,i){onMouseoverLink(this,d,i)}).on("mouseout",function(d,i){onMouseoutLink(this,d,i)}).on("click",function(d,i){onClickLink(this,d,i)}),newNodes.enter().append("g").attr("class","node").attr("transform",function(d){return"translate("+d.x+","+d.y+")"}));appendedNewNodes.append("rect").attr("height",function(d){return d.dy}).attr("width",20).style("fill","pink").style("stroke","gray"),appendedNewNodes.append("text").attr("x",0).attr("y",function(d){return d.dy/2}).attr("text-anchor","middle").text(function(d){return d.identification.name}),newLinks.exit().transition().duration(3e3).style("opacity",0).remove(),newNodes.exit().transition().duration(4e3).style("opacity",0).remove()}}}}]),angular.module("core").filter("projectsCategorization",["_",function(_){return function(projects,filterCategorization){return filterCategorization.group&&filterCategorization.category&&filterCategorization.categoryValue?_.filter(projects,function(project){return _.find(project.categorization,function(assignedGroup){return assignedGroup.group===filterCategorization.group._id?_.find(assignedGroup.categories,function(assignedCategory){return assignedCategory.category===filterCategorization.category._id&&assignedCategory.categoryValue===filterCategorization.categoryValue._id}):void 0})}):projects}}]),angular.module("core").filter("projectsPrioritization",["_",function(_){return function(projects,filterPrioritization){return filterPrioritization.group&&filterPrioritization.priority&&filterPrioritization.priorityValue?_.filter(projects,function(project){return _.find(project.prioritization,function(assignedGroup){return assignedGroup.group===filterPrioritization.group._id?_.find(assignedGroup.priorities,function(assignedPriority){return assignedPriority.priority===filterPrioritization.priority._id&&assignedPriority.priorityValue===filterPrioritization.priorityValue._id}):void 0})}):projects}}]),angular.module("core").filter("projectsProcess",["_",function(_){return function(projects,filterProcess){return filterProcess.unassigned?_.filter(projects,function(project){return _.isNull(project.process)}):filterProcess.process?_.filter(projects,function(project){return project.process?project.process._id===filterProcess.process._id:void 0}):projects}}]),angular.module("core").factory("d3",["$window",function($window){return $window.d3}]),angular.module("core").factory("jQuery",["$window",function($window){return $window.jQuery}]),angular.module("core").factory("_",["$window",function($window){return $window._}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar"),this.addMenuItem("topbar","My taoPortfolio","mytao","item","mytao",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],0),this.addMenuItem("topbar","Admin","admin","dropdown","admin",!1,["superAdmin","admin"],1),this.addMenuItem("topbar","Setup","setup","dropdown","setup",!1,["superAdmin","admin","pmo"],2),this.addSubMenuItem("topbar","setup","Portfolio definition","menuTitle","menuTitle",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],0),this.addSubMenuItem("topbar","setup","Strategy nodes","strategy-node-setup","strategy-node-setup",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],1),this.addSubMenuItem("topbar","setup","Portfolios","portfolio-setup","portfolio-setup",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],2),this.addSubMenuItem("topbar","setup","Priorities","priority-setup","priority-setup",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],3),this.addSubMenuItem("topbar","setup","Categories","category-setup","category-setup",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],4),this.addSubMenuItem("topbar","setup","","divider","divider",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],5),this.addSubMenuItem("topbar","setup","Portfolio evaluation","menuTitle","menuTitle",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],6),this.addSubMenuItem("topbar","setup","Financial analysis","financial-analysis-setup","financial-analysis-setup",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],7),this.addSubMenuItem("topbar","setup","Qualitative analysis","qualitative-analysis-setup","qualitative-analysis-setup",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],8),this.addSubMenuItem("topbar","setup","Risk analysis","risk-analysis-setup","risk-analysis-setup",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],9),this.addSubMenuItem("topbar","setup","Dependencies","dependency-setup","dependency-setup",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],10),this.addSubMenuItem("topbar","setup","Stakeholders","people-setup","people-setup",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],11),this.addSubMenuItem("topbar","setup","","divider","divider",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],12),this.addSubMenuItem("topbar","setup","Review and Improvement","menuTitle","menuTitle",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],13),this.addSubMenuItem("topbar","setup","Review setup","project-review-setup","project-review-setup",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],14),this.addSubMenuItem("topbar","setup","Project review","project-review-templates","project-review-templates",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],15),this.addSubMenuItem("topbar","setup","Portfolio review","portfolio-review-templates","portfolio-review-templates",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],16),this.addSubMenuItem("topbar","setup","Maturity model","maturity-setup","maturity-setup",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],17),this.addSubMenuItem("topbar","setup","Improvement activity","improvement-setup","improvement-setup",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],18),this.addSubMenuItem("topbar","setup","","divider","divider",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],19),this.addSubMenuItem("topbar","setup","Portfolio delivery","menuTitle","menuTitle",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],20),this.addSubMenuItem("topbar","setup","Gate process templates","gate-process-templates","gate-process-templates",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],21),this.addSubMenuItem("topbar","setup","Gate review","gate-review-setup","gate-review-setup",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],22),this.addSubMenuItem("topbar","setup","Issues & Changes","log-delivery-setup","log-delivery-setup",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],23),this.addSubMenuItem("topbar","setup","Milestones","log-milestone-setup","log-milestone-setup",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],24),this.addSubMenuItem("topbar","setup","Status report","status-report-setup","status-report-setup",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],25),this.addMenuItem("topbar","Definition","definition","dropdown","definition",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],3),this.addSubMenuItem("topbar","definition","Identification","menuTitle","menuTitle",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],0),this.addSubMenuItem("topbar","definition","Projects identification","project-identification","project-identification",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],1),this.addSubMenuItem("topbar","definition","Strategy alignment","strategy-alignment","strategy-alignment",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],2),this.addSubMenuItem("topbar","definition","Portfolio assignment","portfolio-assignment","portfolio-assignment",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],3),this.addSubMenuItem("topbar","definition","","divider","divider",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],4),this.addSubMenuItem("topbar","definition","Categorization","menuTitle","menuTitle",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],5),this.addSubMenuItem("topbar","definition","Category assignment","category-assignment","category-assignment",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],6),this.addSubMenuItem("topbar","definition","Categorization overview","categorization-overview","categorization-overview",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],7),this.addSubMenuItem("topbar","definition","","divider","divider",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],8),this.addSubMenuItem("topbar","definition","Selection and Roadmaps","menuTitle","menuTitle",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],9),this.addSubMenuItem("topbar","definition","Projects selection","project-selection","project-selection",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],10),this.addSubMenuItem("topbar","definition","Portfolio roadmaps","roadmaps","roadmaps",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],11),this.addSubMenuItem("topbar","definition","","divider","divider",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],12),this.addSubMenuItem("topbar","definition","Prioritization","menuTitle","menuTitle",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],13),this.addSubMenuItem("topbar","definition","Priority assignment","priority-assignment","priority-assignment",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],14),this.addSubMenuItem("topbar","definition","Prioritization overview","prioritization-overview","prioritization-overview",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],15),this.addSubMenuItem("topbar","definition","Portfolio rankings","portfolio-ranking-assignment","portfolio-ranking-assignment",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],16),this.addMenuItem("topbar","Evaluation","evaluation","dropdown","evaluation",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],4),this.addSubMenuItem("topbar","evaluation","Evaluation profiles","menuTitle","menuTitle",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],0),this.addSubMenuItem("topbar","evaluation","Financial analysis","financial-analysis","financial-analysis",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],1),this.addSubMenuItem("topbar","evaluation","Qualitative analysis","qualitative-analysis","qualitative-analysis",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],2),this.addSubMenuItem("topbar","evaluation","Risk analysis","risk-analysis","risk-analysis",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],3),this.addSubMenuItem("topbar","evaluation","Evaluation summary","portfolio-evaluation-summary","portfolio-evaluation-summary",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],4),this.addSubMenuItem("topbar","evaluation","","divider","divider",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],5),this.addSubMenuItem("topbar","evaluation","Stakeholders","menuTitle","menuTitle",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],6),this.addSubMenuItem("topbar","evaluation","Project stakeholders analysis","people-project-analysis","people-project-analysis",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],7),this.addSubMenuItem("topbar","evaluation","Portfolio stakeholders analysis","people-portfolio-analysis","people-portfolio-analysis",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],8),this.addSubMenuItem("topbar","evaluation","","divider","divider",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],9),this.addSubMenuItem("topbar","evaluation","Review and Improvement","menuTitle","menuTitle",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],10),this.addSubMenuItem("topbar","evaluation","Project reviews","project-reviews","project-reviews",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],11),this.addSubMenuItem("topbar","evaluation","Portfolio reviews","portfolio-reviews","portfolio-reviews",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],12),this.addSubMenuItem("topbar","evaluation","Maturity assessments","maturity-management","maturity-management",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],13),this.addSubMenuItem("topbar","evaluation","Reviews summary","review-summaries","review-summaries",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],14),this.addSubMenuItem("topbar","evaluation","Improvement activities","improvement-activities","improvement-activities",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],15),this.addSubMenuItem("topbar","evaluation","","divider","divider",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],16),this.addSubMenuItem("topbar","evaluation","Dependencies","menuTitle","menuTitle",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],17),this.addSubMenuItem("topbar","evaluation","Project dependencies","project-dependency","project-dependency",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],18),this.addSubMenuItem("topbar","evaluation","Dependency analysis","dependency-analysis","dependency-analysis",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],19),this.addMenuItem("topbar","Delivery","delivery","dropdown","delivery",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],5),this.addSubMenuItem("topbar","delivery","Gate management","menuTitle","menuTitle",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],0),this.addSubMenuItem("topbar","delivery","Gate process assignment","gate-process-assignment","gate-process-assignment",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],1),this.addSubMenuItem("topbar","delivery","Gate reviews","gate-reviews","gate-reviews",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],2),this.addSubMenuItem("topbar","delivery","Delivery performances","gate-performances-portfolio","gate-performances-portfolio",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],3),this.addSubMenuItem("topbar","delivery","","divider","divider",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],4),this.addSubMenuItem("topbar","delivery","Project Logs","menuTitle","menuTitle",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],5),this.addSubMenuItem("topbar","delivery","Project changes","project-change-requests","project-change-requests",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],6),this.addSubMenuItem("topbar","delivery","Project issues","project-issues","project-issues",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],7),this.addSubMenuItem("topbar","delivery","Project milestones","project-milestones","project-milestones",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],8),this.addSubMenuItem("topbar","delivery","","divider","divider",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],9),this.addSubMenuItem("topbar","delivery","Portfolio Logs","menuTitle","menuTitle",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],10),this.addSubMenuItem("topbar","delivery","Portfolio changes","portfolio-change-requests","portfolio-change-requests",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],11),this.addSubMenuItem("topbar","delivery","Portfolio issues","portfolio-issues","portfolio-issues",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],12),this.addSubMenuItem("topbar","delivery","Portfolio milestones","portfolio-milestones","portfolio-milestones",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],13),this.addSubMenuItem("topbar","delivery","","divider","divider",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],15),this.addSubMenuItem("topbar","delivery","Status","menuTitle","menuTitle",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],16),this.addSubMenuItem("topbar","delivery","Project status update","project-status-updates","project-status-updates",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],17),this.addSubMenuItem("topbar","delivery","Portfolio status update","portfolio-status-updates","portfolio-status-updates",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],18),this.addSubMenuItem("topbar","delivery","Portfolio status reports","portfolio-status-reports","portfolio-status-reports",!1,["superAdmin","admin","pmo","projectManager","portfolioManager","executive"],19)}]),angular.module("dependency-analysis").config(["$stateProvider",function($stateProvider){$stateProvider.state("project-dependency",{url:"/project-dependency",templateUrl:"modules/dependency-analysis/views/project-dependency.client.view.html"}).state("dependency-analysis",{url:"/dependency-analysis",templateUrl:"modules/dependency-analysis/views/dependency-analysis.client.view.html"})}]),angular.module("dependency-analysis").controller("DependencyAnalysisController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","Portfolios","Dependencies","DependencyTypes","DependencyImpacts","DependencyStates","LogStatusIndicators","_","$q","$modal",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,Portfolios,Dependencies,DependencyTypes,DependencyImpacts,DependencyStates,LogStatusIndicators,_,$q,$modal){$rootScope.staticMenu=!1;var vm=this;vm.initError=[];var portfolioDependenciesObject={nodes:[],links:[]};vm.portfoliosSelectedForView={};var dependencyTypes=[],dependencyImpacts=[],dependencyStates=[],logStatuses=[];vm.init=function(){Portfolios.query(function(portfolios){vm.portfolios=portfolios,vm.portfolioTrees=createNodeTrees(portfolios),_.each(portfolios,function(portfolio){vm.portfoliosSelectedForView[portfolio._id]=!1}),vm.portfoliosSelectedForView.all=!1,vm.portfoliosSelectedForView.unassigned=!1},function(err){vm.initError.push(err.data.message)}),Dependencies.getDependenciesAnalysis(function(res){portfolioDependenciesObject=res},function(err){vm.initError.push(err.data.message)}),DependencyTypes.query(function(res){dependencyTypes=res},function(err){vm.initError.push(err.data.message)}),DependencyImpacts.query(function(res){dependencyImpacts=res},function(err){vm.initError.push(err.data.message)}),DependencyStates.query(function(res){dependencyStates=res},function(err){vm.initError.push(err.data.message)}),LogStatusIndicators.query(function(res){logStatuses=res},function(err){vm.initError.push(err.data.message)})};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};vm.dependenciesForGraphObject={nodes:[],links:[]},vm.isPortfolioSelectionEmpty=function(){var flag=!0;return _.each(vm.portfoliosSelectedForView,function(v,k){v&&(flag=!1)}),flag},vm.selectPortfolio=function(portfolio){"unassigned"===portfolio?vm.portfoliosSelectedForView.unassigned?vm.portfoliosSelectedForView.unassigned=!1:vm.portfoliosSelectedForView.unassigned=!0:"all"===portfolio?vm.portfoliosSelectedForView.all?(vm.portfoliosSelectedForView.all=!1,
_.forEach(vm.portfoliosSelectedForView,function(v,k){vm.portfoliosSelectedForView[k]=!1})):(vm.portfoliosSelectedForView.all=!0,_.each(vm.portfoliosSelectedForView,function(v,k){vm.portfoliosSelectedForView[k]=!0})):vm.portfoliosSelectedForView[portfolio._id]?vm.portfoliosSelectedForView[portfolio._id]=!1:vm.portfoliosSelectedForView[portfolio._id]=!0};var createDependenciesForGraph=function(){var arrayOfPortfolioIds=_.keys(_.pick(vm.portfoliosSelectedForView,function(v,k){return v})),newLinks=[],newNodes=[];newLinks=_.filter(portfolioDependenciesObject.links,function(link){return _.some(arrayOfPortfolioIds,function(portfolioId){return"unassigned"!==portfolioId||null!==link.sourcePortfolioId&&null!==link.targetPortfolioId?link.sourcePortfolioId===portfolioId||link.targetPortfolioId===portfolioId:!0})}),newNodes=_.filter(portfolioDependenciesObject.nodes,function(node){return _.some(newLinks,function(link){return link.dependency.source._id===node._id||link.dependency.target._id===node._id})}),newLinks=_.map(newLinks,function(link){return link.source=_.findIndex(newNodes,function(node){return node._id===link.dependency.source._id}),link.target=_.findIndex(newNodes,function(node){return node._id===link.dependency.target._id}),link}),vm.dependenciesForGraphObject.links=newLinks,vm.dependenciesForGraphObject.nodes=newNodes};$scope.$watch(function($scope){return vm.portfoliosSelectedForView},function(newValue,oldValue){newValue!==oldValue&&createDependenciesForGraph()},!0),vm.getPortfolioSelectionStatus=function(portfolio){return"all"===portfolio?vm.portfoliosSelectedForView.all:"unassigned"===portfolio?vm.portfoliosSelectedForView.unassigned:vm.portfoliosSelectedForView[portfolio._id]};var getOneProjectDependencies=function(project){var retArray=[];return project?retArray=_.chain(vm.dependenciesForGraphObject.links).filter(function(link){return link.dependency.source._id===project._id||link.dependency.target._id===project._id}).map(function(link){return link.dependency}).value():void 0},getSourceTargetDependencies=function(source,target){var retArray=[];return source&&target?retArray=_.chain(vm.dependenciesForGraphObject.links).filter(function(link){return link.dependency.source._id===source._id&&link.dependency.target._id===target._id||link.dependency.source._id===target._id&&link.dependency.target._id===source._id}).map(function(link){return link.dependency}).value():void 0},modalDependencyProfile=function(size,dependencyTypes,dependencyImpacts,dependencyStates,logStatuses,dependencies,source,target){$modal.open({templateUrl:"modules/dependency-analysis/views/dependency-details.client.view.html",controller:function($scope,$modalInstance,dependencyTypes,dependencyImpacts,dependencyStates,logStatuses,dependencies,source,target){$scope.dependencyTypes=dependencyTypes,$scope.dependencyImpacts=dependencyImpacts,$scope.dependencyStates=dependencyStates,$scope.logStatuses=logStatuses,$scope.dependencies=dependencies,$scope.source=source,$scope.target=target,$scope.completionFilterArray=[{name:"Completed",flag:!0},{name:"Not completed",flag:!1}],$scope.projectDependencyDetails="header",$scope.selectDependency=function(dependency){$scope.selectedDependency=dependency},$scope.cancelModal=function(){$modalInstance.dismiss()}},size:size,resolve:{dependencyTypes:function(){return dependencyTypes},dependencyImpacts:function(){return dependencyImpacts},dependencyStates:function(){return dependencyStates},logStatuses:function(){return logStatuses},dependencies:function(){return dependencies},source:function(){return source},target:function(){return target}},backdrop:"static",keyboard:!1})};vm.selectNode=function(node){modalDependencyProfile("lg",dependencyTypes,dependencyImpacts,dependencyStates,logStatuses,getOneProjectDependencies(node),node,null)},vm.selectLink=function(link){modalDependencyProfile("lg",dependencyTypes,dependencyImpacts,dependencyStates,logStatuses,getSourceTargetDependencies(link.dependency.source,link.dependency.target),link.dependency.source,link.dependency.target)}}]),angular.module("dependency-analysis").controller("ProjectDependencyController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","Portfolios","DependencyTypes","DependencyStates","DependencyImpacts","Dependencies","LogStatusIndicators","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,Portfolios,DependencyTypes,DependencyStates,DependencyImpacts,Dependencies,LogStatusIndicators,_,$q){$rootScope.staticMenu=!1,$scope.error=null,$scope.isResolving=!1,$scope.initError=[],$scope.init=function(){$scope.user=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForEvaluation":!0},function(projects){$scope.projects=projects},function(err){$scope.initError.push(err.data.message)}),Portfolios.query(function(portfolios){$scope.portfolios=portfolios},function(err){$scope.initError.push(err.data.message)}),DependencyTypes.query(function(dependencyTypes){$scope.dependencyTypes=dependencyTypes},function(err){$scope.initError.push(err.data.message)}),DependencyStates.query(function(res){$scope.dependencyStates=res},function(err){$scope.initError.push(err.data.message)}),DependencyImpacts.query(function(dependencyImpacts){$scope.dependencyImpacts=dependencyImpacts},function(err){$scope.initError.push(err.data.message)}),Dependencies.query(function(dependencies){$scope.dependencies=dependencies},function(err){$scope.initError.push(err.data.message)}),LogStatusIndicators.query(function(res){$scope.logStatuses=res},function(err){$scope.initError.push(err.data.message)})},$scope.userHasAuthorization=function(action,user,dependency){var userIsSuperhero,userIsProjectManager,userIsPortfolioManager,userIsSourceProjectManager,userIsSourcePortfolioManager,userIsTargetProjectManager,userIsTargetPortfolioManager;if("edit"===action&&user&&dependency){var source=dependency.source,target=dependency.target;return userIsSuperhero=!!_.some(user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsSourceProjectManager=user._id===source.identification.projectManager||user._id===source.identification.backupProjectManager,source.portfolio&&(userIsSourcePortfolioManager=user._id===source.portfolio.portfolioManager||user._id===source.portfolio.backupPortfolioManager),userIsTargetProjectManager=user._id===target.identification.projectManager||user._id===target.identification.backupProjectManager,target.portfolio&&(userIsTargetPortfolioManager=user._id===target.portfolio.portfolioManager||user._id===target.portfolio.backupPortfolioManager),userIsSuperhero||userIsSourceProjectManager||userIsSourcePortfolioManager||userIsTargetProjectManager||userIsTargetPortfolioManager}return"new"===action&&user?(userIsSuperhero=!!_.some(user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsPortfolioManager=!!_.some(user.roles,function(role){return"portfolioManager"===role}),userIsProjectManager=!!_.some(user.roles,function(role){return"projectManager"===role}),userIsSuperhero||userIsPortfolioManager||userIsProjectManager):void 0},$scope.openRequiredByDatePickerNew=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.requiredByDatePickerOpenedNew=!0},$scope.openRequiredByDatePickerEdit=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.requiredByDatePickerOpenedEdit=!0},$scope.switchHeaderForm={},$scope.selectHeaderForm=function(string,dependency){"view"===string&&($scope.switchHeaderForm[dependency._id]="view"),"edit"===string&&($scope.switchHeaderForm[dependency._id]="edit")},$scope.switchStatusForm={},$scope.selectStatusForm=function(string,dependency){"view"===string&&($scope.switchStatusForm[dependency._id]="view"),"edit"===string&&($scope.switchStatusForm[dependency._id]="edit")};$scope.completionFilterArray=[{name:"Completed",flag:!0},{name:"Not completed",flag:!1}],$scope.projectDependencyDetails="header";var cancelEditHeaderData,cancelEditStatusData;$scope.newDependency={},$scope.showNewDependency=function(dependency){dependency&&($scope.cancelEditStatus(dependency),$scope.cancelEditHeader(dependency)),$scope.showNewDependencyForm=!0},$scope.createDependency=function(){var newDependency=new Dependencies({name:$scope.newDependency.name,description:$scope.newDependency.description,type:$scope.newDependency.type,state:$scope.newDependency.state,impact:$scope.newDependency.impact,source:$scope.newDependency.source,target:$scope.newDependency.target});$scope.error=null,$scope.isResolving=!0,newDependency.$save(function(res){$scope.isResolving=!1,$scope.dependencies.push(res),$scope.newDependency={},$scope.showNewDependencyForm=!1,$scope.selectDependency(res)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelNewDependency=function(){$scope.error=null,$scope.newDependency={},$scope.showNewDependencyForm=!1};var originalDependency={};$scope.selectDependency=function(dependency){$scope.selectedDependency=dependency,originalDependency[dependency._id]=_.cloneDeep(dependency)},$scope.editHeader=function(dependency){$scope.selectHeaderForm("edit",dependency)},$scope.saveEditHeader=function(dependency){var copyDependency=_.cloneDeep(dependency);copyDependency.source=copyDependency.source._id,copyDependency.target=copyDependency.target._id,$scope.error=null,$scope.isResolving=!0,Dependencies.updateHeader({dependencyId:dependency._id},copyDependency,function(res){$scope.isResolving=!1,originalDependency[dependency._id].name=dependency.name,originalDependency[dependency._id].description=dependency.description,originalDependency[dependency._id].source=dependency.source,originalDependency[dependency._id].target=dependency.target,originalDependency[dependency._id].state=dependency.state,originalDependency[dependency._id].type=dependency.type,originalDependency[dependency._id].impact=dependency.impact,$scope.selectHeaderForm("view",dependency)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},cancelEditHeaderData=function(dependency){dependency.name=originalDependency[dependency._id].name,dependency.description=originalDependency[dependency._id].description,dependency.source=originalDependency[dependency._id].source,dependency.target=originalDependency[dependency._id].target,dependency.state=originalDependency[dependency._id].state,dependency.type=originalDependency[dependency._id].type,dependency.impact=originalDependency[dependency._id].impact},$scope.cancelEditHeader=function(dependency){$scope.error=null,cancelEditHeaderData(dependency),$scope.selectHeaderForm("view",dependency)},$scope.deleteDependency=function(dependency){var copyDependency=_.cloneDeep(dependency);copyDependency.source=copyDependency.source._id,copyDependency.target=copyDependency.target._id,$scope.error=null,$scope.isResolving=!0,Dependencies.remove({dependencyId:dependency._id},copyDependency,function(res){$scope.isResolving=!1,$scope.dependencies=_.without($scope.dependencies,dependency),$scope.cancelNewDependency(),$scope.selectedDependency=null,originalDependency={}},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.baselineDeliveryDateOpened={},$scope.openBaselineDeliveryDate=function(dependency,$event){$event.preventDefault(),$event.stopPropagation(),$scope.baselineDeliveryDateOpened[dependency._id]=!0},$scope.estimateDeliveryDateOpened={},$scope.openEstimateDeliveryDate=function(dependency,$event){$event.preventDefault(),$event.stopPropagation(),$scope.estimateDeliveryDateOpened[dependency._id]=!0},$scope.actualDeliveryDateOpened={},$scope.openActualDeliveryDate=function(dependency,$event){$event.preventDefault(),$event.stopPropagation(),$scope.actualDeliveryDateOpened[dependency._id]=!0},$scope.editStatus=function(dependency){$scope.selectStatusForm("edit",dependency)},$scope.saveEditStatus=function(dependency){var copyDependency=_.cloneDeep(dependency);copyDependency.source=copyDependency.source._id,copyDependency.target=copyDependency.target._id,$scope.error=null,$scope.isResolving=!0,Dependencies.updateStatus({dependencyId:dependency._id},copyDependency,function(res){$scope.isResolving=!1,originalDependency[dependency._id].statusReview.currentRecord.baselineDeliveryDate=dependency.statusReview.currentRecord.baselineDeliveryDate,originalDependency[dependency._id].statusReview.currentRecord.estimateDeliveryDate=dependency.statusReview.currentRecord.estimateDeliveryDate,originalDependency[dependency._id].statusReview.currentRecord.actualDeliveryDate=dependency.statusReview.currentRecord.actualDeliveryDate,originalDependency[dependency._id].statusReview.currentRecord.status=dependency.statusReview.currentRecord.status,originalDependency[dependency._id].statusReview.currentRecord.completed=dependency.statusReview.currentRecord.completed,originalDependency[dependency._id].statusReview.currentRecord.statusComment=dependency.statusReview.currentRecord.statusComment,$scope.selectStatusForm("view",dependency)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},cancelEditStatusData=function(dependency){dependency.statusReview.currentRecord.baselineDeliveryDate=originalDependency[dependency._id].statusReview.currentRecord.baselineDeliveryDate,dependency.statusReview.currentRecord.estimateDeliveryDate=originalDependency[dependency._id].statusReview.currentRecord.estimateDeliveryDate,dependency.statusReview.currentRecord.actualDeliveryDate=originalDependency[dependency._id].statusReview.currentRecord.actualDeliveryDate,dependency.statusReview.currentRecord.status=originalDependency[dependency._id].statusReview.currentRecord.status,dependency.statusReview.currentRecord.completed=originalDependency[dependency._id].statusReview.currentRecord.completed,dependency.statusReview.currentRecord.statusComment=originalDependency[dependency._id].statusReview.currentRecord.statusComment},$scope.cancelEditStatus=function(dependency){$scope.error=null,cancelEditStatusData(dependency),$scope.selectStatusForm("view",dependency)}}]),angular.module("dependency-analysis").factory("Dependencies",["$resource",function($resource){return $resource("dependencies/:dependencyId",{dependencyId:"@_id"},{update:{method:"PUT"},updateHeader:{method:"PUT",url:"dependencies/:dependencyId/header"},updateStatus:{method:"PUT",url:"dependencies/:dependencyId/status"},getDependenciesAnalysis:{method:"GET",isArray:!1,url:"dependencies-analysis"}})}]),angular.module("dependency-setup").config(["$stateProvider",function($stateProvider){$stateProvider.state("dependency-setup",{url:"/dependency-setup",templateUrl:"modules/dependency-setup/views/dependency-setup.client.view.html"})}]),angular.module("dependency-setup").controller("DependencySetupController",["$rootScope","$scope","$stateParams","$location","Authentication","DependencyImpacts","DependencyTypes","DependencyStates","$q","_",function($rootScope,$scope,$stateParams,$location,Authentication,DependencyImpacts,DependencyTypes,DependencyStates,$q,_){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){DependencyImpacts.query(function(impacts){$scope.dependencyImpacts=impacts},function(err){$scope.initError.push(err.data.message)}),DependencyTypes.query(function(types){$scope.dependencyTypes=types},function(err){$scope.initError.push(err.data.message)}),DependencyStates.query(function(res){$scope.dependencyStates=res},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.dragControlListeners={orderChanged:function(event){for(var i=0;i<$scope.dependencyImpacts.length;i++)$scope.updateImpact($scope.dependencyImpacts[i])}},$scope.selectImpactForm=function(string){"view"===string&&($scope.switchImpactForm="view"),"edit"===string&&($scope.switchImpactForm="edit")},$scope.findImpacts=function(){$scope.initError=[],DependencyImpacts.query(function(impacts){$scope.dependencyImpacts=impacts},function(err){$scope.initError.push(err.data.message)})};var originalImpact;$scope.selectImpact=function(impact){$scope.error=null,$scope.selectImpactForm("view"),$scope.dependencyImpact=impact,originalImpact=_.clone(impact)},$scope.updateImpact=function(impact){$scope.error=null,impact.position=_.indexOf($scope.dependencyImpacts,impact)+1,impact.$update(function(response){$scope.selectImpactForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditImpact=function(impact){impact.name=originalImpact.name,impact.numericalValue=originalImpact.numericalValue,impact.description=originalImpact.description,$scope.selectImpactForm("view")},$scope.removeImpact=function(impact){$scope.error=null,impact.$remove(function(response){$scope.dependencyImpacts=_.without($scope.dependencyImpacts,impact);for(var i=0;i<$scope.dependencyImpacts.length;i++)$scope.dependencyImpacts[i].position>impact.position&&$scope.updateImpact($scope.dependencyImpacts[i]);$scope.dependencyImpact=null,$scope.selectImpactForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createImpact=function(){$scope.error=null;var dependencyImpact=new DependencyImpacts({name:"New impact level",numericalValue:0,position:$scope.dependencyImpacts.length+1});dependencyImpact.$save(function(response){$scope.findImpacts(),$scope.selectImpactForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchTypeForm={},$scope.selectTypeForm=function(type,string){"view"===string&&($scope.switchTypeForm[type._id]="view"),"new"===string&&($scope.switchTypeForm[type._id]="new"),"edit"===string&&($scope.switchTypeForm[type._id]="edit")},$scope.findTypes=function(){$scope.initError=[],DependencyTypes.query(function(types){$scope.dependencyTypes=types},function(err){$scope.initError.push(err.data.message)})};var originalType={};$scope.selectType=function(type){$scope.error=null,originalType[type._id]=_.clone(type),$scope.selectTypeForm(type,"edit")},$scope.updateType=function(type){$scope.error=null,type.$update(function(response){$scope.findTypes(),$scope.selectTypeForm(type,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditType=function(type){type.name=originalType[type._id].name,type.description=originalType[type._id].description,$scope.selectTypeForm(type,"view")},$scope.removeType=function(type){$scope.error=null,type.$remove(function(response){$scope.findTypes()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createType=function(){$scope.error=null;var type=new DependencyTypes({name:"New dependency type"});type.$save(function(response){$scope.findTypes(),$scope.selectTypeForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchStateForm={},$scope.selectStateForm=function(state,string){"view"===string&&($scope.switchStateForm[state._id]="view"),"new"===string&&($scope.switchStateForm[state._id]="new"),"edit"===string&&($scope.switchStateForm[state._id]="edit")},$scope.findStates=function(){$scope.initError=[],DependencyStates.query(function(states){$scope.dependencyStates=states},function(err){$scope.initError.push(err.data.message)})};var originalState={};$scope.selectState=function(state){$scope.error=null,originalState[state._id]=_.clone(state),$scope.selectStateForm(state,"edit")},$scope.updateState=function(state){$scope.error=null,state.$update(function(response){$scope.findStates(),$scope.selectStateForm(state,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditState=function(state){state.name=originalState[state._id].name,state.description=originalState[state._id].description,$scope.selectStateForm(state,"view")},$scope.removeState=function(state){$scope.error=null,state.$remove(function(response){$scope.findStates()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createState=function(){$scope.error=null;var state=new DependencyStates({name:"New dependency state"});state.$save(function(response){$scope.findStates(),$scope.selectStateForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("dependency-setup").factory("DependencyImpacts",["$resource",function($resource){return $resource("dependency-impacts/:dependencyImpactId",{dependencyImpactId:"@_id"},{update:{method:"PUT"}})}]),angular.module("dependency-setup").factory("DependencyStates",["$resource",function($resource){return $resource("dependency-states/:dependencyStateId",{dependencyStateId:"@_id"},{update:{method:"PUT"}})}]),angular.module("dependency-setup").factory("DependencyTypes",["$resource",function($resource){return $resource("dependency-types/:dependencyTypeId",{dependencyTypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("evaluation-summaries").config(["$stateProvider",function($stateProvider){$stateProvider.state("portfolio-evaluation-summary",{url:"/portfolio-evaluation-summary",templateUrl:"modules/evaluation-summaries/views/portfolio-summary.client.view.html"})}]),angular.module("evaluation-summaries").controller("EvaluationSummaryController",["$rootScope","$scope","$stateParams","$location","Authentication","EvaluationSummaries","QualitativeImpactScores","RiskSeverities","Risks","Projects","Portfolios","GateProcessTemplates","_","$q","$modal",function($rootScope,$scope,$stateParams,$location,Authentication,EvaluationSummaries,QualitativeImpactScores,RiskSeverities,Risks,Projects,Portfolios,GateProcessTemplates,_,$q,$modal){$rootScope.staticMenu=!1;var vm=this;vm.initError=[];var projectProfiles=[];vm.init=function(){Projects.query({"selection.active":!0,"selection.selectedForEvaluation":!0},function(projects){vm.projects=projects},function(err){vm.initError.push(err.data.message)}),Portfolios.query(function(portfolios){vm.portfolios=portfolios,vm.portfolioTrees=createNodeTrees(portfolios)},function(err){vm.initError.push(err.data.message)}),GateProcessTemplates.query(function(gateProcesses){vm.gateProcesses=gateProcesses},function(err){vm.initError.push(err.data.message)}),EvaluationSummaries.portfolioSummary(function(res){projectProfiles=res},function(err){vm.initError.push(err.data.message)}),QualitativeImpactScores.query(function(res){vm.maxQualitativeScore=_.max(res,"numericalValue"),vm.minQualitativeScore=_.min(res,"numericalValue")},function(err){vm.initError.push(err.data.message)}),RiskSeverities.query(function(resSev){Risks.query(function(resRisk){resSev&&resRisk&&(vm.maxRiskScore=_.max(resSev,"severityValue").severityValue*resRisk.length,vm.minRiskScore=_.min(resSev,"severityValue").severityValue*resRisk.length)},function(err){vm.initError.push(err.data.message)})},function(err){vm.initError.push(err.data.message)})};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};vm.selectPortfolio=function(portfolio){return"all"===portfolio?(vm.treeSelectionFlag="all",vm.selectedProjectProfile=null,vm.selectedPortfolio={name:"All"},void(vm.qualitativeSummaryView=projectProfiles)):"unassigned"===portfolio?(vm.treeSelectionFlag="unassigned",vm.selectedProjectProfile=null,vm.selectedPortfolio={name:"Unassigned"},void(vm.qualitativeSummaryView=_.filter(projectProfiles,function(profile){return _.isNull(profile.portfolio)}))):(vm.selectedProjectProfile=null,vm.treeSelectionFlag="portfolio",vm.selectedPortfolio=portfolio,void(vm.qualitativeSummaryView=_.filter(projectProfiles,function(profile){return profile.portfolio&&profile.portfolio._id===portfolio._id})))},vm.orderByProperty="qualitativeScore",vm.orderByDirection=!0,vm.orderByRanking=function(property,direction){vm.orderByProperty=property,vm.orderByDirection=direction},vm.projectProfileDetails="financial";var modalProjectProfile=function(size,profile){$modal.open({templateUrl:"modules/evaluation-summaries/views/project-profile.client.view.html",controller:function($scope,$modalInstance,profile){$scope.profile=profile,$scope.cancelModal=function(){$modalInstance.dismiss()}},size:size,resolve:{profile:function(){return profile}},backdrop:"static",keyboard:!1})};vm.selectProjectProfile=function(profile){modalProjectProfile("lg",profile)}}]),angular.module("evaluation-summaries").factory("EvaluationSummaries",["$resource",function($resource){return $resource("evaluation-summaries",{},{portfolioSummary:{method:"GET",isArray:!0,url:"evaluation-summaries/portfolioSummary"}})}]),angular.module("financial-analysis-setup").config(["$stateProvider",function($stateProvider){$stateProvider.state("financial-analysis-setup",{url:"/financial-analysis-setup",templateUrl:"modules/financial-analysis-setup/views/financial-analysis-setup.client.view.html"})}]),angular.module("financial-analysis-setup").controller("FinancialAnalysisSetupController",["$rootScope","$scope","$stateParams","$location","Authentication","FinancialBenefitGroups","FinancialBenefitTypes","FinancialCostGroups","FinancialCostTypes","$q","_",function($rootScope,$scope,$stateParams,$location,Authentication,FinancialBenefitGroups,FinancialBenefitTypes,FinancialCostGroups,FinancialCostTypes,$q,_){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){FinancialBenefitGroups.query(function(benefitGroups){$scope.benefitGroups=benefitGroups},function(err){$scope.initError.push(err.data.message)}),FinancialBenefitTypes.query(function(benefitTypes){$scope.benefitTypes=benefitTypes},function(err){$scope.initError.push(err.data.message)}),FinancialCostGroups.query(function(costGroups){$scope.costGroups=costGroups},function(err){$scope.initError.push(err.data.message)}),FinancialCostTypes.query(function(costTypes){$scope.costTypes=costTypes},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.switchCostGroupForm={},$scope.selectCostGroupForm=function(group,string){"view"===string&&($scope.switchCostGroupForm[group._id]="view"),"edit"===string&&($scope.switchCostGroupForm[group._id]="edit")},$scope.switchCostTypeForm={},$scope.selectCostTypeForm=function(type,string){"view"===string&&($scope.switchCostTypeForm[type._id]="view"),"new"===string&&($scope.switchCostTypeForm[type._id]="new"),"edit"===string&&($scope.switchCostTypeForm[type._id]="edit")},$scope.switchBenefitGroupForm={},$scope.selectBenefitGroupForm=function(group,string){"view"===string&&($scope.switchBenefitGroupForm[group._id]="view"),"edit"===string&&($scope.switchBenefitGroupForm[group._id]="edit")},$scope.switchBenefitTypeForm={},$scope.selectBenefitTypeForm=function(type,string){"view"===string&&($scope.switchBenefitTypeForm[type._id]="view"),"new"===string&&($scope.switchBenefitTypeForm[type._id]="new"),"edit"===string&&($scope.switchBenefitTypeForm[type._id]="edit")},$scope.costGroupDetails="header",$scope.benefitGroupDetails="header",$scope.costGroupList=function(){FinancialCostGroups.query(function(costGroups){$scope.costGroups=costGroups})},$scope.benefitGroupList=function(){FinancialBenefitGroups.query(function(benefitGroups){$scope.benefitGroups=benefitGroups})},$scope.createCostGroup=function(){$scope.error=null;var costGroup=new FinancialCostGroups({name:"New cost group",costTypes:[]});costGroup.$save(function(response){$scope.costGroupList()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createCostType=function(group){var costType=new FinancialCostTypes({name:"New cost type",description:""});costType.$save({groupId:group._id},function(res){group.costTypes.push(res)},function(errorResponse){$scope.error=errorResponse.data.message})};var originalEditCostGroup={};$scope.selectCostGroup=function(costGroup){originalEditCostGroup=_.clone(costGroup),$scope.selectedCostGroup=costGroup},$scope.updateCostGroup=function(group){FinancialCostGroups.update({_id:group._id,name:group.name,description:group.description},function(group){$scope.selectCostGroupForm(group,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditCostGroup=function(group){$scope.error=null,$scope.selectedCostGroup.name=originalEditCostGroup.name,$scope.selectedCostGroup.description=originalEditCostGroup.description,$scope.selectCostGroupForm(group,"view")};var originalEditCostType={};$scope.selectCostType=function(type){originalEditCostType[type._id]=_.clone(type),$scope.error=null,$scope.selectCostTypeForm(type,"edit")},$scope.updateCostType=function(type){FinancialCostTypes.update({_id:type._id,name:type.name,description:type.description},function(res){$scope.selectCostTypeForm(res,"view")},function(err){$scope.error=err.data.message})},$scope.cancelEditCostType=function(type){$scope.error=null,type.name=originalEditCostType[type._id].name,type.description=originalEditCostType[type._id].description,$scope.selectCostTypeForm(type,"view")},$scope.removeCostGroup=function(group){$scope.error=null,group.$remove(function(response){$scope.selectedCostGroup=null,$scope.costGroupList()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.removeCostType=function(group,type){$scope.error=null,FinancialCostTypes.remove({groupId:group._id},type,function(res){group.costTypes=_.without(group.costTypes,type)},function(err){$scope.error=err.data.message})},$scope.createBenefitGroup=function(){$scope.error=null;var benefitGroup=new FinancialBenefitGroups({name:"New benefit group",benefitTypes:[]});benefitGroup.$save(function(response){$scope.benefitGroupList()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createBenefitType=function(group){var benefitType=new FinancialBenefitTypes({name:"New benefit type",description:""});benefitType.$save({groupId:group._id},function(res){group.benefitTypes.push(res)},function(errorResponse){$scope.error=errorResponse.data.message})};var originalEditBenefitGroup={};$scope.selectBenefitGroup=function(benefitGroup){originalEditBenefitGroup=_.clone(benefitGroup),$scope.selectedBenefitGroup=benefitGroup},$scope.updateBenefitGroup=function(group){FinancialBenefitGroups.update({_id:group._id,name:group.name,description:group.description},function(group){$scope.selectBenefitGroupForm(group,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditBenefitGroup=function(group){$scope.error=null,$scope.selectedBenefitGroup.name=originalEditBenefitGroup.name,$scope.selectedBenefitGroup.description=originalEditBenefitGroup.description,$scope.selectBenefitGroupForm(group,"view")};var originalEditBenefitType={};$scope.selectBenefitType=function(type){originalEditBenefitType[type._id]=_.clone(type),$scope.error=null,$scope.selectBenefitTypeForm(type,"edit")},$scope.updateBenefitType=function(type){FinancialBenefitTypes.update({_id:type._id,name:type.name,description:type.description},function(res){$scope.selectBenefitTypeForm(res,"view")},function(err){$scope.error=err.data.message})},$scope.cancelEditBenefitType=function(type){$scope.error=null,type.name=originalEditBenefitType[type._id].name,type.description=originalEditBenefitType[type._id].description,$scope.selectBenefitTypeForm(type,"view")},$scope.removeBenefitGroup=function(group){$scope.error=null,group.$remove(function(response){$scope.selectedBenefitGroup=null,$scope.benefitGroupList()},function(errorResponse){
$scope.error=errorResponse.data.message})},$scope.removeBenefitType=function(group,type){$scope.error=null,FinancialBenefitTypes.remove({groupId:group._id},type,function(res){group.benefitTypes=_.without(group.benefitTypes,type)},function(err){$scope.error=err.data.message})}}]),angular.module("financial-analysis-setup").factory("FinancialBenefitGroups",["$resource",function($resource){return $resource("financial-benefit-groups/:financialBenefitGroupId",{financialBenefitGroupId:"@_id"},{update:{method:"PUT"}})}]),angular.module("financial-analysis-setup").factory("FinancialBenefitTypes",["$resource",function($resource){return $resource("financial-benefit-types/:financialBenefitTypeId",{financialBenefitTypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("financial-analysis-setup").factory("FinancialCostGroups",["$resource",function($resource){return $resource("financial-cost-groups/:financialCostGroupId",{financialCostGroupId:"@_id"},{update:{method:"PUT"}})}]),angular.module("financial-analysis-setup").factory("FinancialCostTypes",["$resource",function($resource){return $resource("financial-cost-types/:financialCostTypeId",{financialCostTypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("financial-analysis").config(["$stateProvider",function($stateProvider){$stateProvider.state("financial-analysis",{url:"/financial-analysis",templateUrl:"modules/financial-analysis/views/financial-analysis.client.view.html"})}]),angular.module("financial-analysis").controller("FinancialAnalysisController",["$rootScope","$scope","$stateParams","$location","Authentication","FinancialBenefitGroups","FinancialBenefitTypes","FinancialCostGroups","FinancialCostTypes","FinancialAnalysis","FinancialCosts","FinancialBenefits","Projects","Portfolios","$q","_",function($rootScope,$scope,$stateParams,$location,Authentication,FinancialBenefitGroups,FinancialBenefitTypes,FinancialCostGroups,FinancialCostTypes,FinancialAnalysis,FinancialCosts,FinancialBenefits,Projects,Portfolios,$q,_){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){$scope.userData=Authentication.user,Portfolios.query(function(portfolios){$scope.portfolios=portfolios},function(err){$scope.initError.push(err.data.message)}),Projects.query({"selection.active":!0,"selection.selectedForEvaluation":!0},function(projects){$scope.projects=projects},function(err){$scope.initError.push(err.data.message)}),FinancialBenefitGroups.query(function(benefitGroups){$scope.benefitGroups=benefitGroups},function(err){$scope.initError.push(err.data.message)}),FinancialBenefitTypes.query(function(benefitTypes){$scope.benefitTypes=benefitTypes},function(err){$scope.initError.push(err.data.message)}),FinancialCostGroups.query(function(costGroups){$scope.costGroups=costGroups},function(err){$scope.initError.push(err.data.message)}),FinancialCostTypes.query(function(costTypes){$scope.costTypes=costTypes},function(err){$scope.initError.push(err.data.message)}),FinancialCosts.query(function(costs){$scope.costs=costs},function(err){$scope.initError.push(err.data.message)}),FinancialBenefits.query(function(benefits){$scope.benefits=benefits},function(err){$scope.initError.push(err.data.message)})},$scope.userHasAuthorization=function(action,userData,project){if(action&&userData&&project){var userIsSuperhero,userIsProjectManager,userIsPortfolioManager;if("edit"===action)return userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsProjectManager=userData._id===project.identification.projectManager||userData._id===project.identification.backupProjectManager,project.portfolio&&(userIsPortfolioManager=userData._id===project.portfolio.portfolioManager||userData._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsProjectManager||userIsPortfolioManager}},$scope.switchProjectForm={},$scope.selectProjectForm=function(string){"default"===string&&($scope.switchProjectForm="default"),"new"===string&&($scope.switchProjectForm="new"),"view"===string&&($scope.switchProjectForm="view"),"edit"===string&&($scope.switchProjectForm="edit")},$scope.switchCostForm={},$scope.selectCostForm=function(assignedCost,string){"view"===string&&($scope.switchCostForm[assignedCost._id]="view"),"edit"===string&&($scope.switchCostForm[assignedCost._id]="edit")},$scope.switchBenefitForm={},$scope.selectBenefitForm=function(assignedBenefit,string){"view"===string&&($scope.switchBenefitForm[assignedBenefit._id]="view"),"edit"===string&&($scope.switchBenefitForm[assignedBenefit._id]="edit")};var allowNull=function(obj){return obj?obj._id:null};$scope.selectFinancialOverview=function(project){$scope.error=null,project?FinancialAnalysis.financialProfile({projectId:project._id},project,function(res){$scope.financialProfile=res},function(err){$scope.financialProfile=null,$scope.error=err.data.message}):$scope.financialProfile=null};var originalCostAssignment,originalBenefitAssignment,originalDiscountRate,originalBaseYear;$scope.selectProject=function(project){originalCostAssignment={},originalBenefitAssignment={},Projects.get({projectId:project._id,retPropertiesString:"user created selection identification portfolio discountRate baseYear costs benefits",deepPopulateArray:["portfolio","costs.group.costTypes","costs.type","benefits.group.benefitTypes","benefits.type"]},function(res){res.costs=_.sortBy(res.costs,"year"),$scope.selectedProject=res,$scope.selectFinancialOverview(res)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelViewProject=function(){$scope.selectedProject=null,originalCostAssignment=null,originalBenefitAssignment=null,originalDiscountRate=null,originalBaseYear=null},$scope.newCostAssignment={},$scope.newCostAssignment.group={},$scope.newCostAssignment.type={},$scope.newCostAssignment.name="",$scope.newCostAssignment.year=null,$scope.newCostAssignment.amount=null,$scope.createNewCostAssignment=function(project){var newCostAssignment=new FinancialCosts({group:$scope.newCostAssignment.group._id,type:$scope.newCostAssignment.type._id,name:$scope.newCostAssignment.name,year:$scope.newCostAssignment.year,amount:$scope.newCostAssignment.amount});newCostAssignment.$save({projectId:project._id},function(res){res.group=$scope.newCostAssignment.group,res.type=$scope.newCostAssignment.type,project.costs.unshift(res),$scope.newCostAssignment={},$scope.newCostAssignment.group={},$scope.newCostAssignment.type={},$scope.newCostAssignment.name="",$scope.newCostAssignment.year=null,$scope.newCostAssignment.amount=null},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.selectCostAssignment=function(assignedCost){originalCostAssignment[assignedCost._id]=_.clone(assignedCost)},$scope.editAssignedCost=function(project,assignedCost){_.find(assignedCost.group.costTypes,assignedCost.type)||(assignedCost.type=null);var copyAssignedCost=_.clone(assignedCost);copyAssignedCost.group=allowNull(copyAssignedCost.group),copyAssignedCost.type=allowNull(copyAssignedCost.type),FinancialCosts.update(copyAssignedCost,function(res){},function(err){$scope.error=err.data.message})},$scope.cancelEditAssignedCost=function(assignedCost){assignedCost.group=originalCostAssignment[assignedCost._id].group,assignedCost.type=originalCostAssignment[assignedCost._id].type,assignedCost.name=originalCostAssignment[assignedCost._id].name,assignedCost.year=originalCostAssignment[assignedCost._id].year,assignedCost.amount=originalCostAssignment[assignedCost._id].amount},$scope.deleteAssignedCost=function(project,assignedCost){FinancialCosts.remove({projectId:project._id},assignedCost,function(res){project.costs=_.without(project.costs,assignedCost)},function(err){$scope.error=err.data.message})},$scope.newBenefitAssignment={},$scope.newBenefitAssignment.group={},$scope.newBenefitAssignment.type={},$scope.newBenefitAssignment.name="",$scope.newBenefitAssignment.year=null,$scope.newBenefitAssignment.amount=null,$scope.createNewBenefitAssignment=function(project){var newBenefitAssignment=new FinancialBenefits({group:$scope.newBenefitAssignment.group._id,type:$scope.newBenefitAssignment.type._id,name:$scope.newBenefitAssignment.name,year:$scope.newBenefitAssignment.year,amount:$scope.newBenefitAssignment.amount});newBenefitAssignment.$save({projectId:project._id},function(res){res.group=$scope.newBenefitAssignment.group,res.type=$scope.newBenefitAssignment.type,project.benefits.unshift(res),$scope.newBenefitAssignment={},$scope.newBenefitAssignment.group={},$scope.newBenefitAssignment.type={},$scope.newBenefitAssignment.name="",$scope.newBenefitAssignment.year=null,$scope.newBenefitAssignment.amount=null},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.selectBenefitAssignment=function(assignedBenefit){originalBenefitAssignment[assignedBenefit._id]=_.clone(assignedBenefit)},$scope.editAssignedBenefit=function(project,assignedBenefit){_.find(assignedBenefit.group.benefitTypes,assignedBenefit.type)||(assignedBenefit.type=null);var copyAssignedBenefit=_.clone(assignedBenefit);copyAssignedBenefit.group=allowNull(copyAssignedBenefit.group),copyAssignedBenefit.type=allowNull(copyAssignedBenefit.type),FinancialBenefits.update(copyAssignedBenefit,function(res){},function(err){$scope.error=err.data.message})},$scope.cancelEditAssignedBenefit=function(assignedBenefit){assignedBenefit.group=originalBenefitAssignment[assignedBenefit._id].group,assignedBenefit.type=originalBenefitAssignment[assignedBenefit._id].type,assignedBenefit.name=originalBenefitAssignment[assignedBenefit._id].name,assignedBenefit.year=originalBenefitAssignment[assignedBenefit._id].year,assignedBenefit.amount=originalBenefitAssignment[assignedBenefit._id].amount},$scope.deleteAssignedBenefit=function(project,assignedBenefit){FinancialBenefits.remove({projectId:project._id},assignedBenefit,function(res){project.benefits=_.without(project.benefits,assignedBenefit)},function(err){$scope.error=err.data.message})},$scope.selectDiscountRate=function(project){originalDiscountRate=_.clone(project.discountRate),originalBaseYear=_.clone(project.baseYear)},$scope.saveDiscountRate=function(project){Projects.update({projectId:project._id},{discountRate:project.discountRate,baseYear:project.baseYear},function(res){},function(err){$scope.error=err.data.message})},$scope.cancelEditDiscountRate=function(project){project.discountRate=originalDiscountRate,project.baseYear=originalBaseYear}}]),angular.module("financial-analysis").factory("FinancialAnalysis",["$resource",function($resource){return $resource("financial-analysis",{},{financialProfile:{method:"GET",isArray:!1,url:"financial-analysis/financialProfile/:projectId"}})}]),angular.module("financial-analysis").factory("FinancialBenefits",["$resource",function($resource){return $resource("financial-benefits/:financialBenefitId",{financialBenefitId:"@_id"},{update:{method:"PUT"}})}]),angular.module("financial-analysis").factory("FinancialCosts",["$resource",function($resource){return $resource("financial-costs/:financialCostId",{financialCostId:"@_id"},{update:{method:"PUT"}})}]),angular.module("gate-performances").run(["Menus",function(Menus){}]),angular.module("gate-performances").config(["$stateProvider",function($stateProvider){$stateProvider.state("gate-performances-portfolio",{url:"/gate-performances-portfolio",templateUrl:"modules/gate-performances/views/gate-performances-portfolio.client.view.html"}).state("gate-performances-project",{url:"/gate-performances-project",templateUrl:"modules/gate-performances/views/gate-performances.client.view.html"})}]),angular.module("gate-performances").controller("GatePerformancesPortfolioController",["$scope","$stateParams","$location","Authentication","GatePerformances","Projects","Portfolios","GateProcessTemplates","_","$q","$modal",function($scope,$stateParams,$location,Authentication,GatePerformances,Projects,Portfolios,GateProcessTemplates,_,$q,$modal){var vm=this;vm.isResolving=!1,vm.initError=[],vm.init=function(){Portfolios.query(function(portfolios){vm.portfolios=portfolios,vm.portfolioTrees=createNodeTrees(portfolios)},function(err){vm.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);vm.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})});var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};vm.selectPortfolio=function(portfolio){vm.selectedProjectProfile=null,vm.selectedPortfolio=portfolio||{name:"Unassigned"},vm.error=null,vm.isResolving=!0,GatePerformances.portfolioPerformances({_id:portfolio&&portfolio._id||null},function(res){vm.isResolving=!1,vm.portfolioPerformances=res,console.log(res)},function(err){vm.error=err,vm.isResolving=!1})},vm.projectProfileDetails="financial";var modalProjectProfile=function(size,profile){$modal.open({templateUrl:"modules/gate-performances/views/project-profile.client.view.html",controller:function($scope,$modalInstance,profile){$scope.profile=profile,$scope.cancelModal=function(){$modalInstance.dismiss()},$scope.getProjectStatusAreaData=function(projectStatusArea,gate){return _.find(gate.deliveryStatus.projectStatusAreas,function(gatePSA){return gatePSA._id===projectStatusArea._id})}},size:size,resolve:{profile:function(){return profile}},backdrop:"static",keyboard:!1})};vm.selectProjectProfile=function(profile){modalProjectProfile("lg",profile)}}]),angular.module("gate-performances").factory("GatePerformances",["$resource",function($resource){return $resource("gate-performances",{},{portfolioPerformances:{method:"GET",isArray:!1,url:"gate-performances/portfolioPerformances"}})}]),angular.module("gate-process-assignment").config(["$stateProvider",function($stateProvider){$stateProvider.state("gate-process-assignment",{url:"/gate-process-assignment",templateUrl:"modules/gate-process-assignment/views/gate-process-assignment.client.view.html"})}]),angular.module("gate-process-assignment").controller("GateProcessAssignmentController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","Portfolios","GateProcessTemplates","StrategyNodes","CategoryGroups","PriorityGroups","PriorityValues","_","$q","$modal","$log",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,Portfolios,GateProcessTemplates,StrategyNodes,CategoryGroups,PriorityGroups,PriorityValues,_,$q,$modal,$log){$rootScope.staticMenu=!1;var vm=this;vm.isResolving=!1,vm.initError=[],vm.init=function(){vm.user=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForDelivery":!0},function(projects){vm.projects=projects},function(err){vm.initError.push(err.data.message)}),Portfolios.query(function(portfolios){vm.portfolios=portfolios},function(err){vm.initError.push(err.data.message)}),GateProcessTemplates.query({"approval.currentRecord.approvalState":"approved"},function(res){vm.gateProcesses=res},function(err){vm.initError.push(err.data.message)}),StrategyNodes.query(function(res){vm.strategyNodes=res},function(err){vm.initError.push(err.data.message)}),CategoryGroups.query(function(res){vm.categoryGroups=res},function(err){vm.initError.push(err.data.message)}),PriorityGroups.query(function(res){vm.priorityGroups=res},function(err){vm.initError.push(err.data.message)}),PriorityValues.query(function(res){vm.priorityValues=res},function(err){vm.initError.push(err.data.message)})},vm.userHasAuthorization=function(action,userData,project){var userIsSuperhero,userIsProjectManager,userIsPortfolioManager;return"edit"===action?(userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsProjectManager=userData._id===project.projectManager||userData._id===project.backupProjectManager,project.portfolio&&(userIsPortfolioManager=userData._id===project.portfolio.portfolioManager||userData._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsProjectManager||userIsPortfolioManager):void 0},vm.isProcessEditable=function(project){return project?"custom"===project.process.assignmentType&&project.process.assignmentConfirmed===!1:void 0},vm.isProcessApprovable=function(project){return project?project.process.assignmentConfirmed===!1:void 0},vm.filterProcess={},vm.filterCategorization={},vm.filterPrioritization={},vm.showEditProjectForm={};var originalProject={};vm.selectProject=function(project){originalProject[project._id]=_.cloneDeep(project),vm.showEditProjectForm[project._id]=!0};vm.selectedBlueprintProcess={},vm.confirmAssignment=function(project){Projects.confirmAssignment({projectId:project._id},project,function(res){project.process.assignmentConfirmed=res.process.assignmentConfirmed,vm.showEditProjectForm[project._id]=!1},function(err){console.log(err),vm.error=err.data.message})},vm.standardAssignment=function(project,blueprintProcess){Projects.standardAssignment({projectId:project._id},{processId:blueprintProcess._id,assignmentType:"standard"},function(res){project.process=res.process,project.process.assignmentType=res.process.assignmentType,project.process.assignmentConfirmed=res.process.assignmentConfirmed,vm.showEditProjectForm[project._id]=!1},function(err){vm.error=err.data.message})},vm.customAssignment=function(project,blueprintProcess){Projects.customAssignment({projectId:project._id},{processId:blueprintProcess&&blueprintProcess._id||null,assignmentType:"custom"},function(res){project.process=res.process,project.process.assignmentType=res.process.assignmentType,project.process.assignmentConfirmed=res.process.assignmentConfirmed,vm.showEditProjectForm[project._id]=!1},function(err){vm.error=err.data.message})},vm.removeAssignment=function(project){Projects.removeAssignment({projectId:project._id},{processId:project.process&&project.process._id||null,assignmentType:"unassigned"},function(res){project.process=res.process,project.process.assignmentType=res.process.assignmentType,project.process.assignmentConfirmed=res.process.assignmentConfirmed,vm.showEditProjectForm[project._id]=!1},function(err){vm.error=err.data.message})},vm.cancelEditProject=function(project){vm.error=null,project.process=originalProject[project._id].process,project.process.assignmentType=originalProject[project._id].process.assignmentType,project.process.assignmentConfirmed=originalProject[project._id].process.assignmentConfirmed,vm.showEditProjectForm[project._id]=!1};var modalUpdateIssue=function(size,user,project){$modal.open({templateUrl:"modules/gate-process-assignment/views/project-profile.client.view.html",controller:function($scope,$modalInstance,Projects,user,project){$scope.user=user,$scope.selectedProject=project,$scope.originalProject=_.cloneDeep(project);var originalProcess,originalGateHeader,originalGatePosition,originalOutcome;$scope.cancelModal=function(){$scope.selectedGate&&originalGateHeader&&$scope.cancelEditGateHeader($scope.selectedGate),$scope.selectedGate&&originalGatePosition&&$scope.cancelEditGatePosition($scope.selectedGate),$scope.selectedOutcome&&originalOutcome&&$scope.cancelEditOutcome($scope.selectedOutcome),$scope.error=null,$modalInstance.dismiss()},$scope.processDetails="header",$scope.editProcess=function(project){originalProcess=_.cloneDeep(project.process),$scope.switchProcessHeaderForm="edit"},$scope.saveEditProcess=function(project){$scope.isResolving=!0,$scope.error=null,Projects.updateProcess({projectId:project._id},project.process,function(res){$scope.isResolving=!1,originalProcess=null,$scope.switchProcessHeaderForm="view"},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditProcess=function(project){project.process.name=originalProcess.name,project.process.description=originalProcess.description,originalProcess=null,$scope.switchProcessHeaderForm="view"},$scope.createGate=function(project){$scope.isResolving=!0,$scope.error=null,Projects.createGate({projectId:project._id},{},function(res){$scope.isResolving=!1,project.process.gates=res.process.gates,$scope.selectedGate&&originalGateHeader&&$scope.cancelEditGateHeader($scope.selectedGate),$scope.selectedGate&&originalGatePosition&&$scope.cancelEditGatePosition($scope.selectedGate),$scope.selectedOutcome&&originalOutcome&&$scope.cancelEditOutcome($scope.selectedOutcome),$scope.selectedGate=null},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.gateDetails="header",$scope.selectGate=function(gate){$scope.selectedGate&&originalGateHeader&&$scope.cancelEditGateHeader($scope.selectedGate),$scope.selectedGate&&originalGatePosition&&$scope.cancelEditGatePosition($scope.selectedGate),$scope.selectedOutcome&&originalOutcome&&$scope.cancelEditOutcome($scope.selectedOutcome),$scope.selectedOutcome=null,$scope.selectedGate=gate,$scope.switchHeaderForm="view"},$scope.editGateHeader=function(gate){originalGateHeader=_.cloneDeep(gate),$scope.switchHeaderForm="edit"},$scope.saveEditGateHeader=function(project,gate){$scope.isResolving=!0,$scope.error=null,Projects.updateGateHeader({projectId:project._id,projectGateId:gate._id},gate,function(res){$scope.isResolving=!1,originalGateHeader=null,$scope.switchHeaderForm="view"},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditGateHeader=function(gate){gate.name=originalGateHeader.name,gate.description=originalGateHeader.description,originalGateHeader=null,$scope.switchHeaderForm="view"},$scope.getAllowedGatePositions=function(project){var process=project.process;if(process){var retArray=[];if(process.gates.length<3)return retArray;if(process.gates.length>=3){for(var i=2;i<process.gates.length;i++)retArray.push(i);return retArray}}},$scope.editGatePosition=function(gate){originalGatePosition=_.cloneDeep(gate),$scope.switchPositionForm="edit"},$scope.saveEditGatePosition=function(project,gate){$scope.isResolving=!0,$scope.error=null,Projects.updateGatePosition({projectId:project._id,projectGateId:gate._id},gate,function(res){$scope.isResolving=!1,$scope.selectedGate&&originalGateHeader&&$scope.cancelEditGateHeader($scope.selectedGate),originalGatePosition=null,$scope.selectedGate=null,project.process.gates=res.process.gates,$scope.switchPositionForm="view"},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditGatePosition=function(gate){gate.position=originalGatePosition.position,originalGatePosition=null,$scope.switchPositionForm="view"},$scope.deleteGate=function(project,gate){$scope.isResolving=!0,$scope.error=null,Projects.deleteGate({projectId:project._id,projectGateId:gate._id},gate,function(res){$scope.isResolving=!1,originalGateHeader=null,originalGatePosition=null,$scope.selectedGate=null,project.process.gates=res.process.gates},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.createOutcome=function(project,gate){$scope.isResolving=!0,$scope.error=null,Projects.createOutcome({projectId:project._id,projectGateId:gate._id},{},function(res){$scope.isResolving=!1,gate.outcomes.push(res)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.selectOutcome=function(outcome){$scope.selectedOutcome&&originalOutcome&&$scope.cancelEditOutcome($scope.selectedOutcome),$scope.selectedOutcome=outcome,$scope.switchOutcomeForm="view"},$scope.editOutcome=function(outcome){originalOutcome=_.cloneDeep(outcome),$scope.switchOutcomeForm="edit"},$scope.saveEditOutcome=function(project,gate,outcome){$scope.isResolving=!0,$scope.error=null,Projects.updateOutcome({projectId:project._id,projectGateId:gate._id,projectOutcomeId:outcome._id},outcome,function(res){$scope.isResolving=!1,originalOutcome=null,$scope.switchOutcomeForm="view"},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditOutcome=function(outcome){outcome.name=originalOutcome.name,outcome.description=originalOutcome.description,originalOutcome=null,$scope.switchOutcomeForm="view"},$scope.deleteOutcome=function(project,gate,outcome){$scope.isResolving=!0,$scope.error=null,Projects.deleteOutcome({projectId:project._id,projectGateId:gate._id,projectOutcomeId:outcome._id},outcome,function(res){$scope.isResolving=!1,originalOutcome=null,$scope.selectedOutcome=null,gate.outcomes=res.outcomes},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.submitProcess=function(project){$scope.error=null,$scope.isResolving=!0,Projects.submitProcess({projectId:project._id},project,function(res){$scope.isResolving=!1,project.process.approval=res.process.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.approveProcess=function(project){$scope.error=null,$scope.isResolving=!0,Projects.approveProcess({projectId:project._id},project,function(res){$scope.isResolving=!1,project.process.approval=res.process.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.rejectProcess=function(project){$scope.error=null,$scope.isResolving=!0,Projects.rejectProcess({projectId:project._id},project,function(res){$scope.isResolving=!1,project.process.approval=res.process.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.draftProcess=function(project){$scope.error=null,$scope.isResolving=!0,Projects.draftProcess({projectId:project._id},project,function(res){$scope.isResolving=!1,project.process.approval=res.process.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message})}},size:size,resolve:{project:function(){return project},user:function(){return user}},backdrop:"static",keyboard:!1})};vm.selectProjectProfile=function(user,project){modalUpdateIssue("lg",user,project)}}]),angular.module("gate-process-templates").config(["$stateProvider",function($stateProvider){$stateProvider.state("gate-process-templates",{url:"/gate-process-templates",templateUrl:"modules/gate-process-templates/views/gate-process-templates.client.view.html"})}]),angular.module("gate-process-templates").controller("GateProcessTemplatesController",["$rootScope","$scope","$stateParams","$location","Authentication","GateProcessTemplates","$q","_",function($rootScope,$scope,$stateParams,$location,Authentication,GateProcessTemplates,$q,_){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){GateProcessTemplates.query(function(processes){$scope.gateProcesses=processes},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.switchGateProcessForm={},$scope.selectGateProcessForm=function(process,string){"view"===string&&($scope.switchGateProcessForm[process._id]="view"),"edit"===string&&($scope.switchGateProcessForm[process._id]="edit")},$scope.switchGateHeaderForm={},$scope.selectGateHeaderForm=function(gate,string){"view"===string&&($scope.switchGateHeaderForm[gate._id]="view"),"edit"===string&&($scope.switchGateHeaderForm[gate._id]="edit")},$scope.switchGatePositionForm={},$scope.selectGatePositionForm=function(gate,string){"view"===string&&($scope.switchGatePositionForm[gate._id]="view"),"edit"===string&&($scope.switchGatePositionForm[gate._id]="edit")},$scope.switchGateOutcomeForm={},$scope.selectGateOutcomeForm=function(gateOutcome,string){"view"===string&&($scope.switchGateOutcomeForm[gateOutcome._id]="view"),"edit"===string&&($scope.switchGateOutcomeForm[gateOutcome._id]="edit")},$scope.createProcess=function(){var newProcess=new GateProcessTemplates({name:"New process"});$scope.isResolving=!0,$scope.error=null,newProcess.$save(function(res){$scope.isResolving=!1,$scope.gateProcesses.push(res)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.processDetails="header";var originalProcess;$scope.selectProcess=function(process){$scope.selectedProcess&&originalProcess&&$scope.cancelEditProcess($scope.selectedProcess),$scope.selectedGate&&originalGateHeader&&$scope.cancelEditGateHeader($scope.selectedGate),$scope.selectedGate&&originalGatePosition&&$scope.cancelEditGatePosition($scope.selectedGate),$scope.selectedOutcome&&originalOutcome&&$scope.cancelEditOutcome($scope.selectedOutcome),$scope.selectedOutcome=null,$scope.selectedGate=null,$scope.selectedProcess=process,$scope.switchProcessHeaderForm="view"},$scope.editProcess=function(process){originalProcess=_.cloneDeep(process),$scope.switchProcessHeaderForm="edit"},$scope.saveEditProcess=function(process){$scope.isResolving=!0,$scope.error=null,GateProcessTemplates.update({gateProcessTemplateId:process._id},process,function(res){$scope.isResolving=!1,originalProcess=null,$scope.switchProcessHeaderForm="view"},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditProcess=function(process){process.name=originalProcess.name,process.description=originalProcess.description,originalProcess=null,$scope.switchProcessHeaderForm="view"},$scope.deleteProcess=function(process){$scope.isResolving=!0,$scope.error=null,GateProcessTemplates["delete"]({gateProcessTemplateId:process._id},process,function(res){$scope.isResolving=!1,$scope.selectedProcess&&originalProcess&&$scope.cancelEditProcess($scope.selectedProcess),$scope.selectedGate&&originalGateHeader&&$scope.cancelEditGateHeader($scope.selectedGate),$scope.selectedGate&&originalGatePosition&&$scope.cancelEditGatePosition($scope.selectedGate),$scope.selectedOutcome&&originalOutcome&&$scope.cancelEditOutcome($scope.selectedOutcome),$scope.selectedOutcome=null,$scope.selectedGate=null,originalProcess=null,$scope.selectedProcess=null,$scope.gateProcesses=_.without($scope.gateProcesses,process)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.createGate=function(process){$scope.isResolving=!0,$scope.error=null,GateProcessTemplates.createGate({gateProcessTemplateId:process._id},{},function(res){$scope.isResolving=!1,process.gates=res.gates,$scope.selectedGate&&originalGateHeader&&$scope.cancelEditGateHeader($scope.selectedGate),$scope.selectedGate&&originalGatePosition&&$scope.cancelEditGatePosition($scope.selectedGate),$scope.selectedOutcome&&originalOutcome&&$scope.cancelEditOutcome($scope.selectedOutcome),$scope.selectedGate=null},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.gateDetails="header";var originalGateHeader,originalGatePosition;$scope.selectGate=function(gate){$scope.selectedGate&&originalGateHeader&&$scope.cancelEditGateHeader($scope.selectedGate),$scope.selectedGate&&originalGatePosition&&$scope.cancelEditGatePosition($scope.selectedGate),$scope.selectedOutcome&&originalOutcome&&$scope.cancelEditOutcome($scope.selectedOutcome),$scope.selectedOutcome=null,$scope.selectedGate=gate,$scope.switchHeaderForm="view"},$scope.editGateHeader=function(gate){originalGateHeader=_.cloneDeep(gate),$scope.switchHeaderForm="edit"},$scope.saveEditGateHeader=function(process,gate){$scope.isResolving=!0,$scope.error=null,GateProcessTemplates.updateGateHeader({gateProcessTemplateId:process._id,gateTemplateId:gate._id},gate,function(res){$scope.isResolving=!1,originalGateHeader=null,$scope.switchHeaderForm="view"},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditGateHeader=function(gate){gate.name=originalGateHeader.name,gate.description=originalGateHeader.description,originalGateHeader=null,$scope.switchHeaderForm="view"},$scope.getAllowedGatePositions=function(process){if(process){var retArray=[];if(process.gates.length<3)return retArray;
if(process.gates.length>=3){for(var i=2;i<process.gates.length;i++)retArray.push(i);return retArray}}},$scope.editGatePosition=function(gate){originalGatePosition=_.cloneDeep(gate),$scope.switchPositionForm="edit"},$scope.saveEditGatePosition=function(process,gate){$scope.isResolving=!0,$scope.error=null,GateProcessTemplates.updateGatePosition({gateProcessTemplateId:process._id,gateTemplateId:gate._id},gate,function(res){$scope.isResolving=!1,$scope.selectedGate&&originalGateHeader&&$scope.cancelEditGateHeader($scope.selectedGate),originalGatePosition=null,$scope.selectedGate=null,process.gates=res.gates,$scope.switchPositionForm="view"},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditGatePosition=function(gate){gate.position=originalGatePosition.position,originalGatePosition=null,$scope.switchPositionForm="view"},$scope.deleteGate=function(process,gate){$scope.isResolving=!0,$scope.error=null,GateProcessTemplates.deleteGate({gateProcessTemplateId:process._id,gateTemplateId:gate._id},gate,function(res){$scope.isResolving=!1,originalGateHeader=null,originalGatePosition=null,$scope.selectedGate=null,process.gates=res.gates},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.createOutcome=function(process,gate){$scope.isResolving=!0,$scope.error=null,GateProcessTemplates.createOutcome({gateProcessTemplateId:process._id,gateTemplateId:gate._id},{},function(res){$scope.isResolving=!1,gate.outcomes.push(res)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})};var originalOutcome;$scope.selectOutcome=function(outcome){$scope.selectedOutcome&&originalOutcome&&$scope.cancelEditOutcome($scope.selectedOutcome),$scope.selectedOutcome=outcome,$scope.switchOutcomeForm="view"},$scope.editOutcome=function(outcome){originalOutcome=_.cloneDeep(outcome),$scope.switchOutcomeForm="edit"},$scope.saveEditOutcome=function(process,gate,outcome){$scope.isResolving=!0,$scope.error=null,GateProcessTemplates.updateOutcome({gateProcessTemplateId:process._id,gateTemplateId:gate._id,outcomeTemplateId:outcome._id},outcome,function(res){$scope.isResolving=!1,originalOutcome=null,$scope.switchOutcomeForm="view"},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditOutcome=function(outcome){outcome.name=originalOutcome.name,outcome.description=originalOutcome.description,originalOutcome=null,$scope.switchOutcomeForm="view"},$scope.deleteOutcome=function(process,gate,outcome){$scope.isResolving=!0,$scope.error=null,GateProcessTemplates.deleteOutcome({gateProcessTemplateId:process._id,gateTemplateId:gate._id,outcomeTemplateId:outcome._id},outcome,function(res){$scope.isResolving=!1,originalOutcome=null,$scope.selectedOutcome=null,gate.outcomes=res.outcomes},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.submit=function(process){$scope.error=null,$scope.isResolving=!0,GateProcessTemplates.submit({gateProcessTemplateId:process._id},process,function(res){$scope.isResolving=!1,process.approval=res.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.approve=function(process){$scope.error=null,$scope.isResolving=!0,GateProcessTemplates.approve({gateProcessTemplateId:process._id},process,function(res){$scope.isResolving=!1,process.approval=res.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.reject=function(process){$scope.error=null,$scope.isResolving=!0,GateProcessTemplates.reject({gateProcessTemplateId:process._id},process,function(res){$scope.isResolving=!1,process.approval=res.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.draft=function(process){$scope.error=null,$scope.isResolving=!0,GateProcessTemplates.draft({gateProcessTemplateId:process._id},process,function(res){$scope.isResolving=!1,process.approval=res.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message})}}]),angular.module("gate-process-templates").factory("GateProcessTemplates",["$resource",function($resource){return $resource("gate-process-templates/:gateProcessTemplateId",{gateProcessTemplateId:"@_id"},{update:{method:"PUT"},createGate:{method:"PUT",url:"gate-process-templates/:gateProcessTemplateId/createGate"},updateGateHeader:{method:"PUT",url:"gate-process-templates/:gateProcessTemplateId/gate-templates/:gateTemplateId/updateHeader"},updateGatePosition:{method:"PUT",url:"gate-process-templates/:gateProcessTemplateId/gate-templates/:gateTemplateId/updatePosition"},deleteGate:{method:"PUT",url:"gate-process-templates/:gateProcessTemplateId/gate-templates/:gateTemplateId/delete"},createOutcome:{method:"PUT",url:"gate-process-templates/:gateProcessTemplateId/gate-templates/:gateTemplateId/createOutcome"},updateOutcome:{method:"PUT",url:"gate-process-templates/:gateProcessTemplateId/gate-templates/:gateTemplateId/outcome-templates/:outcomeTemplateId/update"},deleteOutcome:{method:"PUT",url:"gate-process-templates/:gateProcessTemplateId/gate-templates/:gateTemplateId/outcome-templates/:outcomeTemplateId/delete"},submit:{method:"PUT",url:"gate-process-templates/:gateProcessTemplateId/submit"},approve:{method:"PUT",url:"gate-process-templates/:gateProcessTemplateId/approve"},reject:{method:"PUT",url:"gate-process-templates/:gateProcessTemplateId/reject"},draft:{method:"PUT",url:"gate-process-templates/:gateProcessTemplateId/draft"}})}]),angular.module("gate-review-setup").config(["$stateProvider",function($stateProvider){$stateProvider.state("gate-review-setup",{url:"/gate-review-setup",templateUrl:"modules/gate-review-setup/views/gate-review-setup.client.view.html"})}]),angular.module("gate-review-setup").controller("GateReviewSetupController",["$rootScope","$scope","$stateParams","$location","Authentication","GateOutcomeScores","GateStates","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,GateOutcomeScores,GateStates,_,$q){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){GateOutcomeScores.query(function(scores){$scope.outcomeScores=scores},function(err){$scope.initError.push(err.data.message)}),GateStates.query(function(states){$scope.gateStates=states},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.switchScoreForm={},$scope.selectScoreForm=function(score,string){"view"===string&&($scope.switchScoreForm[score._id]="view"),"new"===string&&($scope.switchScoreForm[score._id]="new"),"edit"===string&&($scope.switchScoreForm[score._id]="edit")},$scope.findScores=function(){$scope.initError=[],GateOutcomeScores.query(function(scores){$scope.outcomeScores=_.clone(scores)},function(err){$scope.initError.push(err.data.message)})},$scope.selectScore=function(score){$scope.selectScoreForm(score,"edit")},$scope.updateScore=function(score){score.$update(function(response){$scope.findScores(),$scope.selectScoreForm(score,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditScore=function(score){$scope.findScores(),$scope.selectScoreForm(score,"view")},$scope.removeScore=function(score){score.$remove(function(response){$scope.findScores()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createScore=function(){var outcomeScore=new GateOutcomeScores({name:"New outcome score"});outcomeScore.$save(function(response){$scope.findScores(),$scope.selectScoreForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchStatusForm={},$scope.selectStatusForm=function(status,string){"view"===string&&($scope.switchStatusForm[status._id]="view"),"new"===string&&($scope.switchStatusForm[status._id]="new"),"edit"===string&&($scope.switchStatusForm[status._id]="edit")},$scope.findStatuses=function(){$scope.initError=[],GateStates.query(function(states){$scope.gateStates=_.clone(states)},function(err){$scope.initError.push(err.data.message)})},$scope.selectStatus=function(status){$scope.selectStatusForm(status,"edit")},$scope.updateStatus=function(status){status.$update(function(response){$scope.findStatuses(),$scope.selectStatusForm(status,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditStatus=function(status){$scope.findStatuses(),$scope.selectStatusForm(status,"view")},$scope.removeStatus=function(status){status.$remove(function(response){$scope.findStatuses()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createStatus=function(){var gateStatus=new GateStates({name:"New gate state"});gateStatus.$save(function(response){$scope.findStatuses(),$scope.selectStatusForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("gate-review-setup").factory("GateOutcomeScores",["$resource",function($resource){return $resource("gate-outcome-scores/:gateOutcomeScoreId",{gateOutcomeScoreId:"@_id"},{update:{method:"PUT"}})}]),angular.module("gate-review-setup").factory("GateStates",["$resource",function($resource){return $resource("gate-states/:gateStateId",{gateStateId:"@_id"},{update:{method:"PUT"}})}]),angular.module("gate-reviews").config(["$stateProvider",function($stateProvider){$stateProvider.state("gate-reviews",{url:"/gate-reviews",templateUrl:"modules/gate-reviews/views/gate-reviews.client.view.html"})}]),angular.module("gate-reviews").controller("GateReviewsController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","Portfolios","$q","_","GateProcessTemplates","GateOutcomeScores","GateStates",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,Portfolios,$q,_,GateProcessTemplates,GateOutcomeScores,GateStates){$rootScope.staticMenu=!1,$scope.isResolving=!1,$scope.initError=[],$scope.init=function(){$scope.user=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForDelivery":!0,"process.assignmentConfirmed":!0},function(projects){if($scope.projects=_.filter(projects,function(project){return"unassigned"!==project.process.assignmentType}),$stateParams.projectId){var foundProject=_.find($scope.projects,_.matchesProperty("_id",$stateParams.projectId));foundProject?$scope.selectProject(foundProject):$scope.error="Cannot find project "+$stateParams.projectId}},function(err){$scope.initError.push(err.data.message)}),Portfolios.query(function(portfolios){$scope.portfolios=portfolios},function(err){$scope.initError.push(err.data.message)}),GateProcessTemplates.query(function(gateProcesses){$scope.gateProcesses=gateProcesses},function(err){$scope.initError.push(err.data.message)}),GateOutcomeScores.query(function(outcomeScores){$scope.outcomeScores=outcomeScores},function(err){$scope.initError.push(err.data.message)}),GateStates.query(function(res){$scope.gateStates=res},function(err){$scope.initError.push(err.data.message)})},$scope.userHasAuthorization=function(action,user,project){var userIsSuperhero,userIsProjectManager,userIsPortfolioManager;return"edit"===action&&user&&project?(userIsSuperhero=!!_.some(user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsProjectManager=user._id===project.identification.projectManager||user._id===project.identification.backupProjectManager,project.portfolio&&(userIsPortfolioManager=user._id===project.portfolio.portfolioManager||user._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsProjectManager||userIsPortfolioManager):"approve"===action&&user&&project?userIsSuperhero=!!_.some(user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}):void 0},$scope.switchHeaderForm={},$scope.selectHeaderForm=function(string,document){"view"===string&&($scope.switchHeaderForm[document._id]="view"),"edit"===string&&($scope.switchHeaderForm[document._id]="edit")},$scope.switchBudgetForm={},$scope.selectBudgetForm=function(string,document){"view"===string&&($scope.switchBudgetForm[document._id]="view"),"edit"===string&&($scope.switchBudgetForm[document._id]="edit")},$scope.switchStateForm={},$scope.selectStateForm=function(string,document){"view"===string&&($scope.switchStateForm[document._id]="view"),"edit"===string&&($scope.switchStateForm[document._id]="edit")},$scope.switchOutcomeReviewForm={},$scope.selectOutcomeReviewForm=function(string,outcomeReview){"view"===string&&($scope.switchOutcomeReviewForm[outcomeReview._id]="view"),"edit"===string&&($scope.switchOutcomeReviewForm[outcomeReview._id]="edit")},$scope.switchBaselineDurationForm={},$scope.selectBaselineDurationForm=function(string,baselineDuration){"view"===string&&($scope.switchBaselineDurationForm[baselineDuration._id]="view"),"edit"===string&&($scope.switchBaselineDurationForm[baselineDuration._id]="edit")},$scope.switchBaselineCostForm={},$scope.selectBaselineCostForm=function(string,baselineCost){"view"===string&&($scope.switchBaselineCostForm[baselineCost._id]="view"),"edit"===string&&($scope.switchBaselineCostForm[baselineCost._id]="edit")},$scope.switchBaselineCompletionForm={},$scope.selectBaselineCompletionForm=function(string,baselineCompletion){"view"===string&&($scope.switchBaselineCompletionForm[baselineCompletion._id]="view"),"edit"===string&&($scope.switchBaselineCompletionForm[baselineCompletion._id]="edit")},$scope.switchEstimateDurationForm={},$scope.selectEstimateDurationForm=function(string,estimateDuration){"view"===string&&($scope.switchEstimateDurationForm[estimateDuration._id]="view"),"edit"===string&&($scope.switchEstimateDurationForm[estimateDuration._id]="edit")},$scope.switchEstimateCostForm={},$scope.selectEstimateCostForm=function(string,estimateCost){"view"===string&&($scope.switchEstimateCostForm[estimateCost._id]="view"),"edit"===string&&($scope.switchEstimateCostForm[estimateCost._id]="edit")},$scope.switchEstimateCompletionForm={},$scope.selectEstimateCompletionForm=function(string,estimateCompletion){"view"===string&&($scope.switchEstimateCompletionForm[estimateCompletion._id]="view"),"edit"===string&&($scope.switchEstimateCompletionForm[estimateCompletion._id]="edit")},$scope.switchActualDurationForm={},$scope.selectActualDurationForm=function(string,actualDuration){"view"===string&&($scope.switchActualDurationForm[actualDuration._id]="view"),"edit"===string&&($scope.switchActualDurationForm[actualDuration._id]="edit")},$scope.switchActualCostForm={},$scope.selectActualCostForm=function(string,actualCost){"view"===string&&($scope.switchActualCostForm[actualCost._id]="view"),"edit"===string&&($scope.switchActualCostForm[actualCost._id]="edit")},$scope.switchActualCompletionForm={},$scope.selectActualCompletionForm=function(string,actualCompletion){"view"===string&&($scope.switchActualCompletionForm[actualCompletion._id]="view"),"edit"===string&&($scope.switchActualCompletionForm[actualCompletion._id]="edit")},$scope.sortGateReviews=function(gateReview){return new Date(gateReview.reviewDate)},$scope.sortAppliedChanges=function(record){return new Date(record.created)},$scope.getDaysChange=function(stringDate1,stringDate2){var millisecondsPerDay=864e5;return-(new Date(stringDate1)-new Date(stringDate2))/millisecondsPerDay},$scope.showNewDocumentForm=!1,$scope.documentDetails="header",$scope.activeTab={},$scope.selectProject=function(project){$scope.error=null,$scope.cancelNewDocument(),$scope.selectedGate=null,$scope.selectedDocument=null,$scope.selectedProject=project},$scope.selectGate=function(gate){$scope.error=null,$scope.cancelNewDocument(),$scope.selectedDocument=null,$scope.selectedGate=gate},$scope.newHeaderDateOpened={},$scope.openNewHeaderDate=function(gate,$event){$event.preventDefault(),$event.stopPropagation(),$scope.newHeaderDateOpened[gate._id]=!0},$scope.newDocument={},$scope.createNewDocument=function(project,gate){$scope.error=null;var newDocument={reviewDate:$scope.newDocument.reviewDate,title:$scope.newDocument.title};Projects.createGateReview({projectId:project._id,projectGateId:gate._id},newDocument,function(res){$scope.isResolving=!1,gate.gateReviews.push(res),$scope.newDocument={},$scope.showNewDocumentForm=!1,$scope.selectDocument(res)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelNewDocument=function(){$scope.error=null,$scope.showNewDocumentForm=!1,$scope.newDocument={}},$scope.selectDocument=function(doc){$scope.selectedDocument=doc},$scope.headerDateOpened={},$scope.openHeaderDate=function(document,$event){$event.preventDefault(),$event.stopPropagation(),$scope.headerDateOpened[document._id]=!0};var originalHeader={};$scope.editHeader=function(gateReview){originalHeader[gateReview._id]={reviewDate:gateReview.reviewDate,title:gateReview.title,overallComment:gateReview.overallComment},$scope.selectHeaderForm("edit",gateReview)},$scope.saveEditHeader=function(project,gate,gateReview){$scope.error=null,$scope.isResolving=!0,Projects.updateGateReviewHeader({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id},gateReview,function(res){$scope.isResolving=!1,originalHeader[gateReview._id].reviewDate=gateReview.reviewDate,originalHeader[gateReview._id].title=gateReview.title,originalHeader[gateReview._id].overallComment=gateReview.overallComment,$scope.selectHeaderForm("view",gateReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditHeader=function(gateReview){$scope.error=null,gateReview.reviewDate=originalHeader[gateReview._id].reviewDate,gateReview.title=originalHeader[gateReview._id].title,gateReview.overallComment=originalHeader[gateReview._id].overallComment,$scope.selectHeaderForm("view",gateReview)},$scope.deleteDocument=function(project,gate,gateReview){$scope.error=null,$scope.isResolving=!0,Projects.deleteGateReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id},gateReview,function(res){$scope.isResolving=!1,gate.gateReviews=_.without(gate.gateReviews,gateReview),$scope.cancelNewDocument(),$scope.selectedDocument=null},function(err){$scope.isResolving=!1,$scope.error=err.data.message})};var originalState={};$scope.editState=function(gateReview){originalState[gateReview._id]={newOverallScore:gateReview.gateStateReview.newOverallScore,newState:gateReview.gateStateReview.newState,newCompleted:gateReview.gateStateReview.newCompleted},$scope.selectStateForm("edit",gateReview)},$scope.saveEditState=function(project,gate,gateReview){$scope.error=null,$scope.isResolving=!0,Projects.updateGateStateReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id},gateReview,function(res){$scope.isResolving=!1,originalState[gateReview._id].newOverallScore=gateReview.gateStateReview.newOverallScore,originalState[gateReview._id].newState=gateReview.gateStateReview.newState,originalState[gateReview._id].newCompleted=gateReview.gateStateReview.newCompleted,$scope.selectStateForm("view",gateReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditState=function(gateReview){$scope.error=null,gateReview.gateStateReview.newOverallScore=originalState[gateReview._id].newOverallScore,gateReview.gateStateReview.newState=originalState[gateReview._id].newState,gateReview.gateStateReview.newCompleted=originalState[gateReview._id].newCompleted,$scope.selectStateForm("view",gateReview)};var originalGateBudget={};$scope.editBudget=function(gateReview){originalGateBudget[gateReview._id]={newAmount:gateReview.budgetReview.newAmount},$scope.selectBudgetForm("edit",gateReview)},$scope.saveEditBudget=function(project,gate,gateReview){$scope.error=null,$scope.isResolving=!0,Projects.updateGateBudgetReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id},gateReview,function(res){$scope.isResolving=!1,originalGateBudget[gateReview._id].newAmount=gateReview.budgetReview.newAmount,$scope.selectBudgetForm("view",gateReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditBudget=function(gateReview){$scope.error=null,gateReview.budgetReview.newAmount=originalGateBudget[gateReview._id].newAmount,$scope.selectBudgetForm("view",gateReview)};var originalOutcomeReview={};$scope.editOutcomeReview=function(outcomeReview){originalOutcomeReview[outcomeReview._id]=_.cloneDeep(outcomeReview),$scope.selectOutcomeReviewForm("edit",outcomeReview)},$scope.saveEditOutcomeReview=function(project,gate,gateReview,outcomeReview){$scope.error=null,$scope.isResolving=!0,Projects.updateOutcomeScoreReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id,outcomeScoreReviewId:outcomeReview._id},outcomeReview,function(res){$scope.isResolving=!1,$scope.error=null,originalOutcomeReview[outcomeReview._id].newScore=outcomeReview.newScore,originalOutcomeReview[outcomeReview._id].newComment=outcomeReview.newComment,$scope.selectOutcomeReviewForm("view",outcomeReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditOutcomeReview=function(outcomeReview){$scope.error=null,outcomeReview.newScore=originalOutcomeReview[outcomeReview._id].newScore,outcomeReview.newComment=originalOutcomeReview[outcomeReview._id].newComment,$scope.selectOutcomeReviewForm("view",outcomeReview)},$scope.baselineDurationDateOpened={},$scope.openBaselineDurationDate=function(baselineDurationReview,$event){$event.preventDefault(),$event.stopPropagation(),$scope.baselineDurationDateOpened[baselineDurationReview._id]=!0};var originalBaselineDurationReview={};$scope.editBaselineDuration=function(baselineDurationReview){originalBaselineDurationReview[baselineDurationReview._id]=_.cloneDeep(baselineDurationReview),$scope.selectBaselineDurationForm("edit",baselineDurationReview)},$scope.saveEditBaselineDuration=function(project,gate,gateReview,baselineDurationReview){$scope.isResolving=!0,$scope.error=null,Projects.updateBaselineDurationReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id,baselineDurationReviewId:baselineDurationReview._id},baselineDurationReview,function(res){$scope.isResolving=!1,originalBaselineDurationReview[baselineDurationReview._id].newDate=baselineDurationReview.newDate,$scope.selectBaselineDurationForm("view",baselineDurationReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditBaselineDuration=function(baselineDurationReview){$scope.error=null,baselineDurationReview.newDate=originalBaselineDurationReview[baselineDurationReview._id].newDate,$scope.selectBaselineDurationForm("view",baselineDurationReview)},$scope.estimateDurationDateOpened={},$scope.openEstimateDurationDate=function(estimateDurationReview,$event){$event.preventDefault(),$event.stopPropagation(),$scope.estimateDurationDateOpened[estimateDurationReview._id]=!0};var originalEstimateDurationReview={};$scope.editEstimateDuration=function(estimateDurationReview){$scope.error=null,originalEstimateDurationReview[estimateDurationReview._id]=_.cloneDeep(estimateDurationReview),$scope.selectEstimateDurationForm("edit",estimateDurationReview)},$scope.saveEditEstimateDuration=function(project,gate,gateReview,estimateDurationReview){$scope.isResolving=!0,$scope.error=null,Projects.updateEstimateDurationReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id,estimateDurationReviewId:estimateDurationReview._id},estimateDurationReview,function(res){$scope.isResolving=!1,originalEstimateDurationReview[estimateDurationReview._id].newDate=estimateDurationReview.newDate,$scope.selectEstimateDurationForm("view",estimateDurationReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditEstimateDuration=function(estimateDurationReview){$scope.error=null,estimateDurationReview.newDate=originalEstimateDurationReview[estimateDurationReview._id].newDate,$scope.selectEstimateDurationForm("view",estimateDurationReview)},$scope.actualDurationDateOpened={},$scope.openActualDurationDate=function(actualDurationReview,$event){$event.preventDefault(),$event.stopPropagation(),$scope.actualDurationDateOpened[actualDurationReview._id]=!0};var originalActualDurationReview={};$scope.editActualDuration=function(actualDurationReview){$scope.error=null,originalActualDurationReview[actualDurationReview._id]=_.cloneDeep(actualDurationReview),$scope.selectActualDurationForm("edit",actualDurationReview)},$scope.saveEditActualDuration=function(project,gate,gateReview,actualDurationReview){$scope.isResolving=!0,$scope.error=null,Projects.updateActualDurationReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id,actualDurationReviewId:actualDurationReview._id},actualDurationReview,function(res){$scope.isResolving=!1,originalActualDurationReview[actualDurationReview._id].newDate=actualDurationReview.newDate,$scope.selectActualDurationForm("view",actualDurationReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditActualDuration=function(actualDurationReview){$scope.error=null,actualDurationReview.newDate=originalActualDurationReview[actualDurationReview._id].newDate,$scope.selectActualDurationForm("view",actualDurationReview)};var originalBaselineCostReview={};$scope.editBaselineCost=function(baselineCostReview){originalBaselineCostReview[baselineCostReview._id]=_.cloneDeep(baselineCostReview),$scope.selectBaselineCostForm("edit",baselineCostReview)},$scope.saveEditBaselineCost=function(project,gate,gateReview,baselineCostReview){$scope.error=null,$scope.isResolving=!0,Projects.updateBaselineCostReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id,baselineCostReviewId:baselineCostReview._id},baselineCostReview,function(res){$scope.isResolving=!1,originalBaselineCostReview[baselineCostReview._id].newCost=baselineCostReview.newCost,$scope.selectBaselineCostForm("view",baselineCostReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditBaselineCost=function(baselineCostReview){$scope.error=null,baselineCostReview.newCost=originalBaselineCostReview[baselineCostReview._id].newCost,$scope.selectBaselineCostForm("view",baselineCostReview)};var originalEstimateCostReview={};$scope.editEstimateCost=function(estimateCostReview){originalEstimateCostReview[estimateCostReview._id]=_.cloneDeep(estimateCostReview),$scope.selectEstimateCostForm("edit",estimateCostReview)},$scope.saveEditEstimateCost=function(project,gate,gateReview,estimateCostReview){$scope.error=null,$scope.isResolving=!0,Projects.updateEstimateCostReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id,estimateCostReviewId:estimateCostReview._id},estimateCostReview,function(res){$scope.isResolving=!1,originalEstimateCostReview[estimateCostReview._id].newCost=estimateCostReview.newCost,$scope.selectEstimateCostForm("view",estimateCostReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditEstimateCost=function(estimateCostReview){$scope.error=null,estimateCostReview.newCost=originalEstimateCostReview[estimateCostReview._id].newCost,$scope.selectEstimateCostForm("view",estimateCostReview)};var originalActualCostReview={};$scope.editActualCost=function(actualCostReview){originalActualCostReview[actualCostReview._id]=_.cloneDeep(actualCostReview),$scope.selectActualCostForm("edit",actualCostReview)},$scope.saveEditActualCost=function(project,gate,gateReview,actualCostReview){$scope.error=null,$scope.isResolving=!0,Projects.updateActualCostReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id,actualCostReviewId:actualCostReview._id},actualCostReview,function(res){$scope.isResolving=!1,originalActualCostReview[actualCostReview._id].newCost=actualCostReview.newCost,$scope.selectActualCostForm("view",actualCostReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditActualCost=function(actualCostReview){$scope.error=!0,actualCostReview.newCost=originalActualCostReview[actualCostReview._id].newCost,$scope.selectActualCostForm("view",actualCostReview)};var originalBaselineCompletionReview={};$scope.editBaselineCompletion=function(baselineCompletionReview){originalBaselineCompletionReview[baselineCompletionReview._id]=_.cloneDeep(baselineCompletionReview),$scope.selectBaselineCompletionForm("edit",baselineCompletionReview)},$scope.saveEditBaselineCompletion=function(project,gate,gateReview,baselineCompletionReview){$scope.error=null,$scope.isResolving=!0,Projects.updateBaselineCompletionReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id,baselineCompletionReviewId:baselineCompletionReview._id},baselineCompletionReview,function(res){$scope.isResolving=!1,originalBaselineCompletionReview[baselineCompletionReview._id].newCompletion=baselineCompletionReview.newCompletion,$scope.selectBaselineCompletionForm("view",baselineCompletionReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditBaselineCompletion=function(baselineCompletionReview){$scope.error=null,baselineCompletionReview.newCompletion=originalBaselineCompletionReview[baselineCompletionReview._id].newCompletion,$scope.selectBaselineCompletionForm("view",baselineCompletionReview)};var originalEstimateCompletionReview={};$scope.editEstimateCompletion=function(estimateCompletionReview){originalEstimateCompletionReview[estimateCompletionReview._id]=_.cloneDeep(estimateCompletionReview),$scope.selectEstimateCompletionForm("edit",estimateCompletionReview)},$scope.saveEditEstimateCompletion=function(project,gate,gateReview,estimateCompletionReview){$scope.error=null,$scope.isResolving=!0,Projects.updateEstimateCompletionReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id,estimateCompletionReviewId:estimateCompletionReview._id},estimateCompletionReview,function(res){$scope.isResolving=!1,originalEstimateCompletionReview[estimateCompletionReview._id].newCompletion=estimateCompletionReview.newCompletion,$scope.selectEstimateCompletionForm("view",estimateCompletionReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditEstimateCompletion=function(estimateCompletionReview){$scope.error=null,estimateCompletionReview.newCompletion=originalEstimateCompletionReview[estimateCompletionReview._id].newCompletion,$scope.selectEstimateCompletionForm("view",estimateCompletionReview)};var originalActualCompletionReview={};$scope.editActualCompletion=function(actualCompletionReview){originalActualCompletionReview[actualCompletionReview._id]=_.cloneDeep(actualCompletionReview),$scope.selectActualCompletionForm("edit",actualCompletionReview)},$scope.saveEditActualCompletion=function(project,gate,gateReview,actualCompletionReview){$scope.error=null,$scope.isResolving=!0,Projects.updateActualCompletionReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id,actualCompletionReviewId:actualCompletionReview._id},actualCompletionReview,function(res){$scope.isResolving=!1,originalActualCompletionReview[actualCompletionReview._id].newCompletion=actualCompletionReview.newCompletion,$scope.selectActualCompletionForm("view",actualCompletionReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditActualCompletion=function(actualCompletionReview){$scope.error=null,actualCompletionReview.newCompletion=originalActualCompletionReview[actualCompletionReview._id].newCompletion,$scope.selectActualCompletionForm("view",actualCompletionReview)},$scope.submitMissingFields={};var setSubmitMissingFields=function(gateReview){var missingFields=[];return gateReview.budgetReview.newAmount||missingFields.push("Budget amount"),_.each(gateReview.performances.duration.baselineDurationReviews,function(performanceReview){performanceReview.newDate||missingFields.push("Baseline date for "+performanceReview.baselineDuration.targetGate.name);
}),_.each(gateReview.performances.duration.estimateDurationReviews,function(performanceReview){performanceReview.newDate||missingFields.push("Estimate date for "+performanceReview.estimateDuration.targetGate.name)}),_.each(gateReview.performances.duration.actualDurationReviews,function(performanceReview){!performanceReview.newDate&&gateReview.gateStateReview.newCompleted&&missingFields.push("Actual date for "+performanceReview.baselineDuration.targetGate.name)}),_.each(gateReview.performances.cost.baselineCostReviews,function(performanceReview){performanceReview.newCost||missingFields.push("Baseline cost for "+performanceReview.baselineCost.targetGate.name)}),_.each(gateReview.performances.cost.estimateCostReviews,function(performanceReview){performanceReview.newCost||missingFields.push("Estimate cost for "+performanceReview.estimateCost.targetGate.name)}),_.each(gateReview.performances.cost.actualCostReviews,function(performanceReview){!performanceReview.newCost&&gateReview.gateStateReview.newCompleted&&missingFields.push("Actual cost for "+performanceReview.baselineCost.targetGate.name)}),_.each(gateReview.performances.completion.baselineCompletionReviews,function(performanceReview){performanceReview.newCompletion||missingFields.push("Baseline completion for "+performanceReview.baselineCompletion.targetGate.name)}),_.each(gateReview.performances.completion.estimateCompletionReviews,function(performanceReview){performanceReview.newCompletion||missingFields.push("Estimate completion for "+performanceReview.estimateCompletion.targetGate.name)}),_.each(gateReview.performances.completion.actualCompletionReviews,function(performanceReview){!performanceReview.newCompletion&&gateReview.gateStateReview.newCompleted&&missingFields.push("Actual completion for "+performanceReview.baselineCompletion.targetGate.name)}),missingFields};$scope.dateConsistencyErrors={};var checkDateConsistency=function(editedGateReview,editedGate,project){var gates=project.process.gates,dateConsistencyErrors=[],thisGate_BaselineDurationReview_NewDate=_.find(editedGateReview.performances.duration.baselineDurationReviews,function(performanceReview){return performanceReview.baselineDuration.targetGate._id===editedGate._id}).newDate;thisGate_BaselineDurationReview_NewDate=thisGate_BaselineDurationReview_NewDate&&new Date(thisGate_BaselineDurationReview_NewDate);var thisGate_EstimateDurationReview_NewDate=_.find(editedGateReview.performances.duration.estimateDurationReviews,function(performanceReview){return performanceReview.estimateDuration.targetGate._id===editedGate._id}).newDate;thisGate_EstimateDurationReview_NewDate=thisGate_EstimateDurationReview_NewDate&&new Date(thisGate_EstimateDurationReview_NewDate);var thisGate_ActualDurationReview_NewDate=_.find(editedGateReview.performances.duration.actualDurationReviews,function(performanceReview){return performanceReview.actualDuration.targetGate._id===editedGate._id}).newDate;return thisGate_ActualDurationReview_NewDate=thisGate_ActualDurationReview_NewDate&&new Date(thisGate_ActualDurationReview_NewDate),_.each(gates,function(gate){if(gate.position<editedGate.position&&editedGate._id!==project.process.startGate){var previousGate_BaselineDuration_CurrentDate=_.find(gate.performances.duration.baselineDurations,function(performance){return performance.targetGate._id===gate._id}).currentRecord.gateDate;previousGate_BaselineDuration_CurrentDate=previousGate_BaselineDuration_CurrentDate&&new Date(previousGate_BaselineDuration_CurrentDate);var previousGate_EstimateDuration_CurrentDate=_.find(gate.performances.duration.estimateDurations,function(performance){return performance.targetGate._id===gate._id}).currentRecord.gateDate;previousGate_EstimateDuration_CurrentDate=previousGate_EstimateDuration_CurrentDate&&new Date(previousGate_EstimateDuration_CurrentDate);var previousGate_ActualDuration_CurrentDate=_.find(gate.performances.duration.actualDurations,function(performance){return performance.targetGate._id===gate._id}).currentRecord.gateDate;previousGate_ActualDuration_CurrentDate=previousGate_ActualDuration_CurrentDate&&new Date(previousGate_ActualDuration_CurrentDate),previousGate_BaselineDuration_CurrentDate&&thisGate_BaselineDurationReview_NewDate&&previousGate_BaselineDuration_CurrentDate>thisGate_BaselineDurationReview_NewDate&&dateConsistencyErrors.push(editedGate.name+" Baseline date "+thisGate_BaselineDurationReview_NewDate.toDateString()+" cannot be earlier than previous gate "+gate.name+" "+previousGate_BaselineDuration_CurrentDate.toDateString()),previousGate_EstimateDuration_CurrentDate&&thisGate_EstimateDurationReview_NewDate&&previousGate_EstimateDuration_CurrentDate>thisGate_EstimateDurationReview_NewDate&&dateConsistencyErrors.push(editedGate.name+" Estimate date "+thisGate_EstimateDurationReview_NewDate.toDateString()+" cannot be earlier than previous gate "+gate.name+" "+previousGate_EstimateDuration_CurrentDate.toDateString()),previousGate_ActualDuration_CurrentDate&&thisGate_ActualDurationReview_NewDate&&previousGate_ActualDuration_CurrentDate>thisGate_ActualDurationReview_NewDate&&dateConsistencyErrors.push(editedGate.name+" Actual date "+thisGate_ActualDurationReview_NewDate.toDateString()+" cannot be earlier than previous gate "+gate.name+" "+previousGate_ActualDuration_CurrentDate.toDateString())}if(gate.position>editedGate.position&&editedGate._id!==project.process.endGate){var nextGate_BaselineDuration_CurrentDate=_.find(gate.performances.duration.baselineDurations,function(performance){return performance.targetGate._id===gate._id}).currentRecord.gateDate;nextGate_BaselineDuration_CurrentDate=nextGate_BaselineDuration_CurrentDate&&new Date(nextGate_BaselineDuration_CurrentDate);var nextGate_EstimateDuration_CurrentDate=_.find(gate.performances.duration.estimateDurations,function(performance){return performance.targetGate._id===gate._id}).currentRecord.gateDate;nextGate_EstimateDuration_CurrentDate=nextGate_EstimateDuration_CurrentDate&&new Date(nextGate_EstimateDuration_CurrentDate);var nextGate_ActualDuration_CurrentDate=_.find(gate.performances.duration.actualDurations,function(performance){return performance.targetGate._id===gate._id}).currentRecord.gateDate;nextGate_ActualDuration_CurrentDate=nextGate_ActualDuration_CurrentDate&&new Date(nextGate_ActualDuration_CurrentDate),nextGate_BaselineDuration_CurrentDate&&thisGate_BaselineDurationReview_NewDate&&thisGate_BaselineDurationReview_NewDate>nextGate_BaselineDuration_CurrentDate&&dateConsistencyErrors.push(editedGate.name+" Baseline date "+thisGate_BaselineDurationReview_NewDate.toDateString()+" cannot be later than next gate "+gate.name+" "+nextGate_BaselineDuration_CurrentDate.toDateString()),nextGate_EstimateDuration_CurrentDate&&thisGate_EstimateDurationReview_NewDate&&thisGate_EstimateDurationReview_NewDate>nextGate_EstimateDuration_CurrentDate&&dateConsistencyErrors.push(editedGate.name+" Estimate date "+thisGate_EstimateDurationReview_NewDate.toDateString()+" cannot be later than next gate "+gate.name+" "+nextGate_EstimateDuration_CurrentDate.toDateString()),nextGate_ActualDuration_CurrentDate&&thisGate_ActualDurationReview_NewDate&&thisGate_ActualDurationReview_NewDate>nextGate_ActualDuration_CurrentDate&&dateConsistencyErrors.push(editedGate.name+" Actual date "+thisGate_ActualDurationReview_NewDate.toDateString()+" cannot be later than next gate "+gate.name+" "+nextGate_ActualDuration_CurrentDate.toDateString())}}),dateConsistencyErrors};$scope.submit=function(project,gate,gateReview){$scope.submitMissingFields[gateReview._id]=setSubmitMissingFields(gateReview),$scope.dateConsistencyErrors[gateReview._id]=checkDateConsistency(gateReview,gate,project),$scope.submitMissingFields[gateReview._id].length>0||$scope.dateConsistencyErrors[gateReview._id].length>0||($scope.error=null,$scope.isResolving=!0,Projects.submitGateReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id},gateReview,function(res){$scope.isResolving=!1,gateReview.approval=res.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message}))},$scope.approve=function(project,gate,gateReview){$scope.submitMissingFields[gateReview._id]=setSubmitMissingFields(gateReview),$scope.dateConsistencyErrors[gateReview._id]=checkDateConsistency(gateReview,gate,project),$scope.submitMissingFields[gateReview._id].length>0||$scope.dateConsistencyErrors[gateReview._id].length>0||($scope.error=null,$scope.isResolving=!0,Projects.approveGateReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id},gateReview,function(res){$scope.isResolving=!1,gateReview.approval=res.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message}))},$scope.reject=function(project,gate,gateReview){$scope.error=null,$scope.isResolving=!0,Projects.rejectGateReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id},gateReview,function(res){$scope.isResolving=!1,gateReview.approval=res.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.draft=function(project,gate,gateReview){$scope.error=null,$scope.isResolving=!0,Projects.draftGateReview({projectId:project._id,projectGateId:gate._id,gateReviewId:gateReview._id},gateReview,function(res){$scope.isResolving=!1,gateReview.approval=res.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message})}}]),angular.module("improvement-activities").run(["Menus",function(Menus){}]),angular.module("improvement-activities").config(["$stateProvider",function($stateProvider){$stateProvider.state("improvement-activities",{url:"/improvement-activities",templateUrl:"modules/improvement-activities/views/improvement-activities.client.view.html"}).state("improvement-activities-id",{url:"/improvement-activities/:activityId",templateUrl:"modules/improvement-activities/views/improvement-activities.client.view.html"})}]),angular.module("improvement-activities").controller("ImprovementActivitiesController",["$rootScope","$scope","$stateParams","$location","$q","_","Authentication","Portfolios","ImprovementActivities","ImprovementTypes","ImprovementReasons","ImprovementStates","LogPriorities","LogStatusIndicators","People","$modal","$log",function($rootScope,$scope,$stateParams,$location,$q,_,Authentication,Portfolios,ImprovementActivities,ImprovementTypes,ImprovementReasons,ImprovementStates,LogPriorities,LogStatusIndicators,People,$modal,$log){$rootScope.staticMenu=!1;var vm=this;vm.initError=[],vm.init=function(){},vm.userData=Authentication.user,$q.all([Portfolios.query().$promise,ImprovementActivities.query().$promise,ImprovementTypes.query().$promise,ImprovementReasons.query().$promise,ImprovementStates.query().$promise,LogPriorities.query().$promise,LogStatusIndicators.query().$promise,People.query().$promise]).then(function(data){vm.portfolios=data[0],vm.portfolioTrees=createNodeTrees(data[0]),vm.improvementActivities=data[1],vm.improvementTypes=data[2],vm.improvementReasons=data[3],vm.improvementStates=data[4],vm.logPriorities=data[5],vm.logStatuses=data[6],vm.people=data[7]},function(err){vm.initError.push(err)});vm.userHasAuthorization=function(action,userData,improvementActivity){var userIsSuperhero,userIsOwner,userIsPortfolioManager;return"new"===action&&userData?userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}):"edit"===action&&userData&&improvementActivity?(userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),improvementActivity.assignedTo&&(userIsOwner=userData._id===improvementActivity.assignedTo.assignedUser),improvementActivity.portfolio&&(userIsPortfolioManager=userData._id===improvementActivity.portfolio.portfolioManager||userData._id===improvementActivity.portfolio.backupPortfolioManager),userIsSuperhero||userIsOwner||userIsPortfolioManager):void 0};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees},allowNull=function(obj){return obj?obj._id:null};vm.sortImprovementActivities=function(activity){return new Date(activity.raisedOnDate)},vm.completionFilterArray=[{name:"Completed",flag:!0},{name:"Not completed",flag:!1}],vm.openNewActivityRaisedOnDate=function($event){$event.preventDefault(),$event.stopPropagation(),vm.newImprovementActivityRaisedOnDateOpened=!0},vm.newImprovementActivity={},vm.createNewImprovementActivity=function(){var newImprovementActivity=new ImprovementActivities({raisedOnDate:vm.newImprovementActivity.raisedOnDate,title:vm.newImprovementActivity.title});newImprovementActivity.$save(function(res){vm.improvementActivities.push(res),vm.newImprovementActivity={},vm.selectImprovementActivity(_.find(vm.improvementActivities,_.matchesProperty("_id",res._id)))},function(err){vm.error=err.data.message})},vm.cancelNewImprovementActivity=function(){vm.newImprovementActivity={}};var modalUpdateActivity=function(size,activity,userData,portfolios,improvementTypes,improvementReasons,improvementStates,logPriorities,logStatuses,people){$modal.open({templateUrl:"modules/improvement-activities/views/edit-improvement-activity.client.view.html",controller:function($scope,$modalInstance,activity,userData,portfolios,improvementTypes,improvementReasons,improvementStates,logPriorities,logStatuses,people){$scope.userData=userData,$scope.originalImprovementActivity=_.cloneDeep(activity),$scope.selectedImprovementActivity=activity,$scope.portfolios=portfolios,$scope.improvementTypes=improvementTypes,$scope.improvementReasons=improvementReasons,$scope.improvementStates=improvementStates,$scope.logPriorities=logPriorities,$scope.logStatuses=logStatuses,$scope.people=people,$scope.cancelModal=function(){$modalInstance.dismiss()}},size:size,resolve:{activity:function(){return activity},userData:function(){return userData},portfolios:function(){return portfolios},improvementTypes:function(){return improvementTypes},improvementReasons:function(){return improvementReasons},improvementStates:function(){return improvementStates},logPriorities:function(){return logPriorities},logStatuses:function(){return logStatuses},people:function(){return people}},backdrop:"static",keyboard:!1})};vm.selectImprovementActivity=function(activity){modalUpdateActivity("lg",activity,vm.userData,vm.portfolios,vm.improvementTypes,vm.improvementReasons,vm.improvementStates,vm.logPriorities,vm.logStatuses,vm.people)},vm.improvementActivityDetails="header",vm.selectHeaderForm=function(string){"view"===string&&(vm.switchHeaderForm="view"),"edit"===string&&(vm.switchHeaderForm="edit")},vm.selectStatusForm=function(string){"view"===string&&(vm.switchStatusForm="view"),"edit"===string&&(vm.switchStatusForm="edit")},vm.openHeaderDate=function($event){$event.preventDefault(),$event.stopPropagation(),vm.headerDateOpened=!0},vm.editHeader=function(){vm.selectHeaderForm("edit")},vm.saveEditHeader=function(improvementActivity,originalImprovementActivity){var copyImprovementActivity=_.cloneDeep(improvementActivity);copyImprovementActivity.portfolio=allowNull(copyImprovementActivity.portfolio),copyImprovementActivity.type=allowNull(copyImprovementActivity.type),copyImprovementActivity.assignedTo=allowNull(copyImprovementActivity.assignedTo),copyImprovementActivity.reason=allowNull(copyImprovementActivity.reason),copyImprovementActivity.priority=allowNull(copyImprovementActivity.priority),copyImprovementActivity.state=allowNull(copyImprovementActivity.state),copyImprovementActivity.statusReview.currentRecord.status=allowNull(copyImprovementActivity.statusReview.currentRecord.status),ImprovementActivities.updateHeader({improvementActivityId:copyImprovementActivity._id},copyImprovementActivity,function(res){originalImprovementActivity.raisedOnDate=improvementActivity.raisedOnDate,originalImprovementActivity.title=improvementActivity.title,originalImprovementActivity.description=improvementActivity.description,originalImprovementActivity.type=improvementActivity.type,originalImprovementActivity.portfolio=improvementActivity.portfolio,originalImprovementActivity.assignedTo=improvementActivity.assignedTo,originalImprovementActivity.state=improvementActivity.state,originalImprovementActivity.reason=improvementActivity.reason,originalImprovementActivity.priority=improvementActivity.priority,vm.selectHeaderForm("view")},function(err){vm.error=err.data.message})},vm.cancelEditHeader=function(improvementActivity,originalImprovementActivity){improvementActivity.raisedOnDate=originalImprovementActivity.raisedOnDate,improvementActivity.title=originalImprovementActivity.title,improvementActivity.description=originalImprovementActivity.description,improvementActivity.type=originalImprovementActivity.type,improvementActivity.portfolio=originalImprovementActivity.portfolio,improvementActivity.assignedTo=originalImprovementActivity.assignedTo,improvementActivity.state=originalImprovementActivity.state,improvementActivity.reason=originalImprovementActivity.reason,improvementActivity.priority=originalImprovementActivity.priority,vm.selectHeaderForm("view")},vm.deleteImprovementActivity=function(improvementActivity){ImprovementActivities.remove({improvementActivityId:improvementActivity._id},improvementActivity,function(res){vm.improvementActivities=_.without(vm.improvementActivities,improvementActivity)},function(err){vm.error=err.data.message})},vm.openBaselineDeliveryDate=function($event){$event.preventDefault(),$event.stopPropagation(),vm.baselineDeliveryDateOpened=!0},vm.openEstimateDeliveryDate=function($event){$event.preventDefault(),$event.stopPropagation(),vm.estimateDeliveryDateOpened=!0},vm.openActualDeliveryDate=function($event){$event.preventDefault(),$event.stopPropagation(),vm.actualDeliveryDateOpened=!0},vm.editStatus=function(){vm.selectStatusForm("edit")},vm.saveEditStatus=function(improvementActivity,originalImprovementActivity){var copyImprovementActivity=_.cloneDeep(improvementActivity);copyImprovementActivity.portfolio=allowNull(copyImprovementActivity.portfolio),copyImprovementActivity.type=allowNull(copyImprovementActivity.type),copyImprovementActivity.assignedTo=allowNull(copyImprovementActivity.assignedTo),copyImprovementActivity.reason=allowNull(copyImprovementActivity.reason),copyImprovementActivity.priority=allowNull(copyImprovementActivity.priority),copyImprovementActivity.state=allowNull(copyImprovementActivity.state),copyImprovementActivity.statusReview.currentRecord.status=allowNull(copyImprovementActivity.statusReview.currentRecord.status),ImprovementActivities.updateStatus({improvementActivityId:copyImprovementActivity._id},copyImprovementActivity,function(res){originalImprovementActivity.statusReview.currentRecord.baselineDeliveryDate=improvementActivity.statusReview.currentRecord.baselineDeliveryDate,originalImprovementActivity.statusReview.currentRecord.estimateDeliveryDate=improvementActivity.statusReview.currentRecord.estimateDeliveryDate,originalImprovementActivity.statusReview.currentRecord.actualDeliveryDate=improvementActivity.statusReview.currentRecord.actualDeliveryDate,originalImprovementActivity.statusReview.currentRecord.status=improvementActivity.statusReview.currentRecord.status,originalImprovementActivity.statusReview.currentRecord.completed=improvementActivity.statusReview.currentRecord.completed,originalImprovementActivity.statusReview.currentRecord.statusComment=improvementActivity.statusReview.currentRecord.statusComment,vm.selectStatusForm("view")},function(err){vm.error=err.data.message})},vm.cancelEditStatus=function(improvementActivity,originalImprovementActivity){improvementActivity.statusReview.currentRecord.baselineDeliveryDate=originalImprovementActivity.statusReview.currentRecord.baselineDeliveryDate,improvementActivity.statusReview.currentRecord.estimateDeliveryDate=originalImprovementActivity.statusReview.currentRecord.estimateDeliveryDate,improvementActivity.statusReview.currentRecord.actualDeliveryDate=originalImprovementActivity.statusReview.currentRecord.actualDeliveryDate,improvementActivity.statusReview.currentRecord.status=originalImprovementActivity.statusReview.currentRecord.status,improvementActivity.statusReview.currentRecord.completed=originalImprovementActivity.statusReview.currentRecord.completed,improvementActivity.statusReview.currentRecord.statusComment=originalImprovementActivity.statusReview.currentRecord.statusComment,vm.selectStatusForm("view")}}]),angular.module("improvement-activities").factory("ImprovementActivities",["$resource",function($resource){return $resource("improvement-activities/:improvementActivityId",{improvementActivityId:"@_id"},{update:{method:"PUT"},updateHeader:{method:"PUT",url:"improvement-activities/:improvementActivityId/header"},updateStatus:{method:"PUT",url:"improvement-activities/:improvementActivityId/status"}})}]),angular.module("improvement-setup").config(["$stateProvider",function($stateProvider){$stateProvider.state("improvement-setup",{url:"/improvement-setup",templateUrl:"modules/improvement-setup/views/improvement-setup.client.view.html"})}]),angular.module("improvement-setup").controller("ImprovementSetupController",["$rootScope","$scope","$stateParams","$location","Authentication","ImprovementStates","ImprovementTypes","ImprovementReasons","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,ImprovementStates,ImprovementTypes,ImprovementReasons,_,$q){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){ImprovementStates.query(function(res){$scope.improvementStates=res},function(err){$scope.initError.push(err.data.message)}),ImprovementTypes.query(function(res){$scope.improvementTypes=res},function(err){$scope.initError.push(err.data.message)}),ImprovementReasons.query(function(res){$scope.improvementReasons=res},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.switchImprovementStateForm={},$scope.selectImprovementStateForm=function(state,string){"view"===string&&($scope.switchImprovementStateForm[state._id]="view"),"new"===string&&($scope.switchImprovementStateForm[state._id]="new"),"edit"===string&&($scope.switchImprovementStateForm[state._id]="edit")},$scope.findImprovementStates=function(){$scope.initError=[],ImprovementStates.query(function(states){$scope.improvementStates=states},function(err){$scope.initError.push(err.data.message)})};var originalImprovementState={};$scope.selectImprovementState=function(state){$scope.error=null,originalImprovementState[state._id]=_.clone(state),$scope.selectImprovementStateForm(state,"edit")},$scope.updateImprovementState=function(state){$scope.error=null,state.$update(function(response){$scope.findImprovementStates(),$scope.selectImprovementStateForm(state,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditImprovementState=function(state){state.name=originalImprovementState[state._id].name,state.description=originalImprovementState[state._id].description,$scope.selectImprovementStateForm(state,"view")},$scope.removeImprovementState=function(state){$scope.error=null,state.$remove(function(response){$scope.findImprovementStates()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createImprovementState=function(){$scope.error=null;var state=new ImprovementStates({name:"New improvement activity state"});state.$save(function(response){$scope.findImprovementStates(),$scope.selectImprovementStateForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchReasonForm={},$scope.selectReasonForm=function(reason,string){"view"===string&&($scope.switchReasonForm[reason._id]="view"),"new"===string&&($scope.switchReasonForm[reason._id]="new"),"edit"===string&&($scope.switchReasonForm[reason._id]="edit")},$scope.findReasons=function(){$scope.initError=[],ImprovementReasons.query(function(reasons){$scope.improvementReasons=reasons},function(err){$scope.initError.push(err.data.message)})};var originalReason={};$scope.selectReason=function(reason){$scope.error=null,originalReason[reason._id]=_.clone(reason),$scope.selectReasonForm(reason,"edit")},$scope.updateReason=function(reason){$scope.error=null,reason.$update(function(response){$scope.findReasons(),$scope.selectReasonForm(reason,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditReason=function(reason){reason.name=originalReason[reason._id].name,reason.description=originalReason[reason._id].description,$scope.selectReasonForm(reason,"view")},$scope.removeReason=function(reason){$scope.error=null,reason.$remove(function(response){$scope.findReasons()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createReason=function(){$scope.error=null;var reason=new ImprovementReasons({name:"New reason for improvement"});reason.$save(function(response){$scope.findReasons(),$scope.selectReasonForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchTypeForm={},$scope.selectTypeForm=function(type,string){"view"===string&&($scope.switchTypeForm[type._id]="view"),"new"===string&&($scope.switchTypeForm[type._id]="new"),"edit"===string&&($scope.switchTypeForm[type._id]="edit")},$scope.findTypes=function(){$scope.initError=[],ImprovementTypes.query(function(types){$scope.improvementTypes=types},function(err){$scope.initError.push(err.data.message)})};var originalType={};$scope.selectType=function(type){$scope.error=null,originalType[type._id]=_.clone(type),$scope.selectTypeForm(type,"edit")},$scope.updateType=function(type){$scope.error=null,type.$update(function(response){$scope.findTypes(),$scope.selectTypeForm(type,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditType=function(type){type.name=originalType[type._id].name,type.description=originalType[type._id].description,$scope.selectTypeForm(type,"view")},$scope.removeType=function(type){$scope.error=null,type.$remove(function(response){$scope.findTypes()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createType=function(){$scope.error=null;var type=new ImprovementTypes({name:"New improvement activity type"});type.$save(function(response){$scope.findTypes(),$scope.selectTypeForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("improvement-setup").factory("ImprovementReasons",["$resource",function($resource){return $resource("improvement-reasons/:improvementReasonId",{improvementReasonId:"@_id"},{update:{method:"PUT"}})}]),angular.module("improvement-setup").factory("ImprovementStates",["$resource",function($resource){return $resource("improvement-states/:improvementStateId",{improvementStateId:"@_id"},{update:{method:"PUT"}})}]),angular.module("improvement-setup").factory("ImprovementTypes",["$resource",function($resource){return $resource("improvement-types/:improvementTypeId",{improvementTypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("log-delivery-setup").config(["$stateProvider",function($stateProvider){$stateProvider.state("log-delivery-setup",{url:"/log-delivery-setup",templateUrl:"modules/log-delivery-setup/views/log-delivery-setup.client.view.html"})}]),angular.module("log-delivery-setup").controller("LogDeliverySetupController",["$rootScope","$scope","$stateParams","$location","Authentication","IssueStates","IssueActionStates","ChangeRequestStates","LogPriorities","LogReasons","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,IssueStates,IssueActionStates,ChangeRequestStates,LogPriorities,LogReasons,_,$q){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){IssueStates.query(function(issueStates){$scope.issueStates=issueStates},function(err){$scope.initError.push(err.data.message)}),IssueActionStates.query(function(actionStates){$scope.actionStates=actionStates},function(err){$scope.initError.push(err.data.message)}),ChangeRequestStates.query(function(changeRequestStates){$scope.changeRequestStates=changeRequestStates},function(err){$scope.initError.push(err.data.message)}),LogPriorities.query(function(priorities){$scope.logPriorities=priorities},function(err){$scope.initError.push(err.data.message)}),LogReasons.query(function(reasons){$scope.logReasons=reasons},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.switchIssueStateForm={},$scope.selectIssueStateForm=function(state,string){"view"===string&&($scope.switchIssueStateForm[state._id]="view"),"new"===string&&($scope.switchIssueStateForm[state._id]="new"),"edit"===string&&($scope.switchIssueStateForm[state._id]="edit")},$scope.findIssueStates=function(){$scope.initError=[],IssueStates.query(function(states){$scope.issueStates=states},function(err){$scope.initError.push(err.data.message)})};var originalIssueState={};$scope.selectIssueState=function(state){$scope.error=null,originalIssueState[state._id]=_.clone(state),$scope.selectIssueStateForm(state,"edit")},$scope.updateIssueState=function(state){$scope.error=null,state.$update(function(response){$scope.findIssueStates(),$scope.selectIssueStateForm(state,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditIssueState=function(state){state.name=originalIssueState[state._id].name,state.description=originalIssueState[state._id].description,$scope.selectIssueStateForm(state,"view")},$scope.removeIssueState=function(state){$scope.error=null,state.$remove(function(response){$scope.findIssueStates()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createIssueState=function(){$scope.error=null;var state=new IssueStates({name:"New issue state"});state.$save(function(response){$scope.findIssueStates(),$scope.selectIssueStateForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchActionStateForm={},$scope.selectActionStateForm=function(state,string){"view"===string&&($scope.switchActionStateForm[state._id]="view"),"new"===string&&($scope.switchActionStateForm[state._id]="new"),"edit"===string&&($scope.switchActionStateForm[state._id]="edit")},$scope.findActionStates=function(){$scope.initError=[],IssueActionStates.query(function(states){$scope.actionStates=states},function(err){$scope.initError.push(err.data.message)})};var originalActionState={};$scope.selectActionState=function(state){$scope.error=null,originalActionState[state._id]=_.clone(state),$scope.selectActionStateForm(state,"edit")},$scope.updateActionState=function(state){$scope.error=null,state.$update(function(response){$scope.findActionStates(),$scope.selectActionStateForm(state,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditActionState=function(state){state.name=originalActionState[state._id].name,state.description=originalActionState[state._id].description,$scope.selectActionStateForm(state,"view")},$scope.removeActionState=function(state){$scope.error=null,state.$remove(function(response){$scope.findActionStates()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createActionState=function(){
$scope.error=null;var state=new IssueActionStates({name:"New action state"});state.$save(function(response){$scope.findActionStates(),$scope.selectActionStateForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchChangeRequestStateForm={},$scope.selectChangeRequestStateForm=function(state,string){"view"===string&&($scope.switchChangeRequestStateForm[state._id]="view"),"new"===string&&($scope.switchChangeRequestStateForm[state._id]="new"),"edit"===string&&($scope.switchChangeRequestStateForm[state._id]="edit")},$scope.findChangeRequestStates=function(){$scope.initError=[],ChangeRequestStates.query(function(states){$scope.changeRequestStates=states},function(err){$scope.initError.push(err.data.message)})};var originalChangeRequestState={};$scope.selectChangeRequestState=function(state){$scope.error=null,originalChangeRequestState[state._id]=_.clone(state),$scope.selectChangeRequestStateForm(state,"edit")},$scope.updateChangeRequestState=function(state){$scope.error=null,state.$update(function(response){$scope.findChangeRequestStates(),$scope.selectChangeRequestStateForm(state,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditChangeRequestState=function(state){state.name=originalChangeRequestState[state._id].name,state.description=originalChangeRequestState[state._id].description,$scope.selectChangeRequestStateForm(state,"view")},$scope.removeChangeRequestState=function(state){$scope.error=null,state.$remove(function(response){$scope.findChangeRequestStates()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createChangeRequestState=function(){$scope.error=null;var state=new ChangeRequestStates({name:"New change request state"});state.$save(function(response){$scope.findChangeRequestStates(),$scope.selectChangeRequestStateForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.dragControlListeners={orderChanged:function(event){for(var i=0;i<$scope.logPriorities.length;i++)$scope.updateValue($scope.logPriorities[i])}},$scope.selectValueForm=function(string){"view"===string&&($scope.switchValueForm="view"),"edit"===string&&($scope.switchValueForm="edit")},$scope.findValues=function(){$scope.initError=[],LogPriorities.query(function(values){$scope.logPriorities=values},function(err){$scope.initError.push(err.data.message)})};var originalValue;$scope.selectValue=function(value){$scope.error=null,$scope.selectValueForm("view"),$scope.priorityValue=value,originalValue=_.clone(value)},$scope.updateValue=function(value){$scope.error=null,value.position=_.indexOf($scope.logPriorities,value)+1,value.$update(function(response){$scope.selectValueForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditValue=function(value){value.name=originalValue.name,value.numericalValue=originalValue.numericalValue,value.description=originalValue.description,$scope.selectValueForm("view")},$scope.removeValue=function(value){$scope.error=null,value.$remove(function(response){$scope.logPriorities=_.without($scope.logPriorities,value);for(var i=0;i<$scope.logPriorities.length;i++)$scope.logPriorities[i].position>value.position&&$scope.updateValue($scope.logPriorities[i]);$scope.priorityValue=null,$scope.selectValueForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createValue=function(){$scope.error=null;var priorityValue=new LogPriorities({name:"New log priority",numericalValue:0,position:$scope.logPriorities.length+1});priorityValue.$save(function(response){$scope.findValues(),$scope.selectValueForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchReasonForm={},$scope.selectReasonForm=function(reason,string){"view"===string&&($scope.switchReasonForm[reason._id]="view"),"new"===string&&($scope.switchReasonForm[reason._id]="new"),"edit"===string&&($scope.switchReasonForm[reason._id]="edit")},$scope.findReasons=function(){$scope.initError=[],LogReasons.query(function(reasons){$scope.logReasons=reasons},function(err){$scope.initError.push(err.data.message)})};var originalReason={};$scope.selectReason=function(reason){$scope.error=null,originalReason[reason._id]=_.clone(reason),$scope.selectReasonForm(reason,"edit")},$scope.updateReason=function(reason){$scope.error=null,reason.$update(function(response){$scope.findReasons(),$scope.selectReasonForm(reason,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditReason=function(reason){reason.name=originalReason[reason._id].name,reason.description=originalReason[reason._id].description,$scope.selectReasonForm(reason,"view")},$scope.removeReason=function(reason){$scope.error=null,reason.$remove(function(response){$scope.findReasons()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createReason=function(){$scope.error=null;var reason=new LogReasons({name:"New reason for change"});reason.$save(function(response){$scope.findReasons(),$scope.selectReasonForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("log-delivery-setup").factory("ChangeRequestStates",["$resource",function($resource){return $resource("change-request-states/:changeRequestStateId",{changeRequestStateId:"@_id"},{update:{method:"PUT"}})}]),angular.module("log-delivery-setup").factory("IssueActionStates",["$resource",function($resource){return $resource("issue-action-states/:issueActionStateId",{issueActionStateId:"@_id"},{update:{method:"PUT"}})}]),angular.module("log-delivery-setup").factory("IssueStates",["$resource",function($resource){return $resource("issue-states/:issueStateId",{issueStateId:"@_id"},{update:{method:"PUT"}})}]),angular.module("log-delivery-setup").factory("LogPriorities",["$resource",function($resource){return $resource("log-priorities/:logPriorityId",{logPriorityId:"@_id"},{update:{method:"PUT"}})}]),angular.module("log-delivery-setup").factory("LogReasons",["$resource",function($resource){return $resource("log-reasons/:logReasonId",{logReasonId:"@_id"},{update:{method:"PUT"}})}]),angular.module("log-milestone-setup").config(["$stateProvider",function($stateProvider){$stateProvider.state("log-milestone-setup",{url:"/log-milestone-setup",templateUrl:"modules/log-milestone-setup/views/log-milestone-setup.client.view.html"})}]),angular.module("log-milestone-setup").controller("LogMilestoneSetupController",["$rootScope","$scope","$stateParams","$location","Authentication","MilestoneStates","ProjectMilestoneTypes","PortfolioMilestoneTypes","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,MilestoneStates,ProjectMilestoneTypes,PortfolioMilestoneTypes,_,$q){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){MilestoneStates.query(function(milestoneStates){$scope.milestoneStates=milestoneStates},function(err){$scope.initError.push(err.data.message)}),ProjectMilestoneTypes.query(function(projectMilestoneTypes){$scope.projectMilestoneTypes=projectMilestoneTypes},function(err){$scope.initError.push(err.data.message)}),PortfolioMilestoneTypes.query(function(portfolioMilestoneTypes){$scope.portfolioMilestoneTypes=portfolioMilestoneTypes},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.switchMilestoneStateForm={},$scope.selectMilestoneStateForm=function(state,string){"view"===string&&($scope.switchMilestoneStateForm[state._id]="view"),"new"===string&&($scope.switchMilestoneStateForm[state._id]="new"),"edit"===string&&($scope.switchMilestoneStateForm[state._id]="edit")},$scope.findMilestoneStates=function(){$scope.initError=[],MilestoneStates.query(function(states){$scope.milestoneStates=states},function(err){$scope.initError.push(err.data.message)})};var originalMilestoneState={};$scope.selectMilestoneState=function(state){$scope.error=null,originalMilestoneState[state._id]=_.clone(state),$scope.selectMilestoneStateForm(state,"edit")},$scope.updateMilestoneState=function(state){$scope.error=null,state.$update(function(response){$scope.findMilestoneStates(),$scope.selectMilestoneStateForm(state,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditMilestoneState=function(state){state.name=originalMilestoneState[state._id].name,state.description=originalMilestoneState[state._id].description,$scope.selectMilestoneStateForm(state,"view")},$scope.removeMilestoneState=function(state){$scope.error=null,state.$remove(function(response){$scope.findMilestoneStates()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createMilestoneState=function(){$scope.error=null;var state=new MilestoneStates({name:"New milestone state"});state.$save(function(response){$scope.findMilestoneStates(),$scope.selectMilestoneStateForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchProjectMilestoneTypeForm={},$scope.selectProjectMilestoneTypeForm=function(type,string){"view"===string&&($scope.switchProjectMilestoneTypeForm[type._id]="view"),"new"===string&&($scope.switchProjectMilestoneTypeForm[type._id]="new"),"edit"===string&&($scope.switchProjectMilestoneTypeForm[type._id]="edit")},$scope.findProjectMilestoneTypes=function(){$scope.initError=[],ProjectMilestoneTypes.query(function(types){$scope.projectMilestoneTypes=types},function(err){$scope.initError.push(err.data.message)})};var originalProjectMilestoneType={};$scope.selectProjectMilestoneType=function(type){$scope.error=null,originalProjectMilestoneType[type._id]=_.clone(type),$scope.selectProjectMilestoneTypeForm(type,"edit")},$scope.updateProjectMilestoneType=function(type){$scope.error=null,type.$update(function(response){$scope.findProjectMilestoneTypes(),$scope.selectProjectMilestoneTypeForm(type,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditProjectMilestoneType=function(type){type.name=originalProjectMilestoneType[type._id].name,type.description=originalProjectMilestoneType[type._id].description,$scope.selectProjectMilestoneTypeForm(type,"view")},$scope.removeProjectMilestoneType=function(type){$scope.error=null,type.$remove(function(response){$scope.findProjectMilestoneTypes()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createProjectMilestoneType=function(){$scope.error=null;var type=new ProjectMilestoneTypes({name:"New project milestone type"});type.$save(function(response){$scope.findProjectMilestoneTypes(),$scope.selectProjectMilestoneTypeForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchPortfolioMilestoneTypeForm={},$scope.selectPortfolioMilestoneTypeForm=function(type,string){"view"===string&&($scope.switchPortfolioMilestoneTypeForm[type._id]="view"),"new"===string&&($scope.switchPortfolioMilestoneTypeForm[type._id]="new"),"edit"===string&&($scope.switchPortfolioMilestoneTypeForm[type._id]="edit")},$scope.findPortfolioMilestoneTypes=function(){$scope.initError=[],PortfolioMilestoneTypes.query(function(types){$scope.portfolioMilestoneTypes=types},function(err){$scope.initError.push(err.data.message)})};var originalPortfolioMilestoneType={};$scope.selectPortfolioMilestoneType=function(type){$scope.error=null,originalPortfolioMilestoneType[type._id]=_.clone(type),$scope.selectPortfolioMilestoneTypeForm(type,"edit")},$scope.updatePortfolioMilestoneType=function(type){$scope.error=null,type.$update(function(response){$scope.findPortfolioMilestoneTypes(),$scope.selectPortfolioMilestoneTypeForm(type,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditPortfolioMilestoneType=function(type){type.name=originalPortfolioMilestoneType[type._id].name,type.description=originalPortfolioMilestoneType[type._id].description,$scope.selectPortfolioMilestoneTypeForm(type,"view")},$scope.removePortfolioMilestoneType=function(type){$scope.error=null,type.$remove(function(response){$scope.findPortfolioMilestoneTypes()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createPortfolioMilestoneType=function(){$scope.error=null;var type=new PortfolioMilestoneTypes({name:"New portfolio milestone type"});type.$save(function(response){$scope.findPortfolioMilestoneTypes(),$scope.selectPortfolioMilestoneTypeForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("log-milestone-setup").factory("MilestoneStates",["$resource",function($resource){return $resource("milestone-states/:milestoneStateId",{milestoneStateId:"@_id"},{update:{method:"PUT"}})}]),angular.module("log-milestone-setup").factory("PortfolioMilestoneTypes",["$resource",function($resource){return $resource("portfolio-milestone-types/:portfolioMilestoneTypeId",{portfolioMilestoneTypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("log-milestone-setup").factory("ProjectMilestoneTypes",["$resource",function($resource){return $resource("project-milestone-types/:projectMilestoneTypeId",{projectMilestoneTypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("log-summaries").config(["$stateProvider",function($stateProvider){$stateProvider.state("portfolioLogSummaries",{url:"/log-summaries/portfolioLogs",templateUrl:"modules/log-summaries/views/portfolio-logs-summary.client.view.html"})}]),angular.module("log-summaries").controller("LogSummariesController",["$scope","$stateParams","$location","Authentication","LogSummaries","Projects","Portfolios","GateProcessTemplates","_","$q","$modal",function($scope,$stateParams,$location,Authentication,LogSummaries,Projects,Portfolios,GateProcessTemplates,_,$q,$modal){var vm=this;vm.isResolving=!1,vm.initError=[],vm.init=function(){Portfolios.query(function(portfolios){vm.portfolios=portfolios,vm.portfolioTrees=createNodeTrees(portfolios)},function(err){vm.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);vm.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})});var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};vm.selectPortfolio=function(portfolio){vm.selectedProjectProfile=null,vm.selectedPortfolio=portfolio,vm.error=null,vm.isResolving=!0,LogSummaries.portfolioLogsSummary({portfolioId:portfolio._id},function(res){vm.isResolving=!1,vm.portfolioPerformances=res,console.log(res)},function(err){vm.error=err,vm.isResolving=!1})},vm.projectProfileDetails="financial";var modalProjectProfile=function(size,profile){$modal.open({templateUrl:"modules/gate-performances/views/project-profile.client.view.html",controller:function($scope,$modalInstance,profile){$scope.profile=profile,$scope.cancelModal=function(){$modalInstance.dismiss()},$scope.getProjectStatusAreaData=function(projectStatusArea,gate){return _.find(gate.deliveryStatus.projectStatusAreas,function(gatePSA){return gatePSA._id===projectStatusArea._id})}},size:size,resolve:{profile:function(){return profile}},backdrop:"static",keyboard:!1})};vm.selectProjectProfile=function(profile){modalProjectProfile("lg",profile)}}]),angular.module("log-summaries").factory("LogSummaries",["$resource",function($resource){return $resource("log-summaries",{},{portfolioLogsSummary:{method:"GET",isArray:!1,url:"log-summaries/portfolioLogs"}})}]),angular.module("maturity-management").config(["$stateProvider",function($stateProvider){$stateProvider.state("maturity-management",{url:"/maturity-management",templateUrl:"modules/maturity-management/views/maturity-management.client.view.html"})}]),angular.module("maturity-management").controller("MaturityManagementController",["$rootScope","$scope","$stateParams","$location","$q","_","Authentication","MaturityModels","ProjectReviewScores",function($rootScope,$scope,$stateParams,$location,$q,_,Authentication,MaturityModels,ProjectReviewScores){$rootScope.staticMenu=!1;var vm=this;vm.isResolving=!1,vm.initError=[],vm.init=function(){vm.userData=Authentication.user,MaturityModels.query(function(res){vm.maturityModels=res},function(err){vm.initError.push(err.data.message)}),ProjectReviewScores.query(function(res){vm.projectReviewScores=res},function(err){vm.initError.push(err.data.message)})},vm.userHasAuthorization=function(userData){var userIsSuperhero;return userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})};var originalDimension={};vm.showHistoryComment={},vm.dimensionEdit={},vm.selectDimension=function(dimension){vm.selectedDimension&&vm.cancelEditDimension(vm.selectedDimension),originalDimension[dimension._id]=_.cloneDeep(dimension),vm.selectedDimension=dimension,vm.dimensionEdit[dimension._id]=!1},vm.saveEditDimension=function(model,dimension){vm.error=null,vm.isResolving=!0,MaturityModels.updateMaturityReview({maturityModelId:model._id,dimensionId:dimension._id},dimension,function(res){vm.isResolving=!1,dimension.maturityReview=res.maturityReview,originalDimension[dimension._id].maturityReview=res.maturityReview,vm.dimensionEdit[dimension._id]=!1},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditDimension=function(dimension){vm.error=null,dimension.maturityReview=originalDimension[dimension._id].maturityReview,vm.dimensionEdit[dimension._id]=!1},$scope.$watch(function(){return vm.selectedMaturityModel},function(newValue,oldValue){newValue!==oldValue&&(vm.selectedDimension&&(vm.cancelEditDimension(vm.selectedDimension),vm.selectedDimension=null),vm.dimensionFilter={})})}]),angular.module("maturity-setup").config(["$stateProvider",function($stateProvider){$stateProvider.state("maturity-setup",{url:"/maturity-setup",templateUrl:"modules/maturity-setup/views/maturity-setup.client.view.html"})}]),angular.module("maturity-setup").controller("MaturitySetupController",["$rootScope","$scope","$stateParams","$location","Authentication","MaturityModels","$q","_",function($rootScope,$scope,$stateParams,$location,Authentication,MaturityModels,$q,_){$rootScope.staticMenu=!1,$scope.isResolving=!1,$scope.init=function(){MaturityModels.query(function(res){$scope.maturityModels=res},function(err){$scope.error=err.data.message})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.createMaturityModel=function(){var maturityModel=new MaturityModels({name:"New maturity model",areas:[],levels:[],dimensions:[]});$scope.error=null,$scope.isResolving=!0,maturityModel.$save(function(res){$scope.isResolving=!1,$scope.maturityModels.push(res),$scope.selectMaturityModel(res)},function(err){$scope.error=err.data.message})},$scope.maturityModelEdit={},$scope.maturityModelDetails="header";var originalMaturityModel={};$scope.selectMaturityModel=function(model){$scope.selectedMaturityModel&&$scope.cancelEditMaturityModel($scope.selectedMaturityModel),$scope.selectedArea&&$scope.cancelEditArea($scope.selectedArea),$scope.selectedLevel&&$scope.cancelEditLevel($scope.selectedLevel),$scope.selectedDimension&&$scope.cancelEditDimension($scope.selectedDimension),$scope.selectedArea=null,$scope.selectedLevel=null,$scope.selectedDimension=null,originalMaturityModel[model._id]=_.cloneDeep(model),$scope.selectedMaturityModel=model,$scope.maturityModelEdit[model._id]=!1},$scope.saveEditMaturityModel=function(model){$scope.error=null,$scope.isResolving=!0,MaturityModels.update({_id:model._id,name:model.name,description:model.description},function(res){$scope.isResolving=!1,originalMaturityModel[model._id].name=model.name,originalMaturityModel[model._id].description=model.description,$scope.maturityModelEdit[model._id]=!1},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditMaturityModel=function(model){$scope.error=null,model.name=originalMaturityModel[model._id].name,model.description=originalMaturityModel[model._id].description,$scope.maturityModelEdit[model._id]=!1},$scope.deleteMaturityModel=function(model){$scope.error=null,$scope.isResolving=!0,model.$remove(function(res){$scope.isResolving=!1,$scope.selectedMaturityModel=null,$scope.maturityModels=_.without($scope.maturityModels,model)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.createArea=function(model){var newArea={name:"New maturity area"};$scope.error=null,$scope.isResolving=!0,MaturityModels.createArea({maturityModelId:model._id},newArea,function(res){$scope.isResolving=!1,model.areas.push(res),$scope.selectArea(res)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.areaEdit={};var originalArea={};$scope.selectArea=function(area){$scope.selectedArea&&$scope.cancelEditArea($scope.selectedArea),originalArea[area._id]=_.cloneDeep(area),$scope.selectedArea=area,$scope.areaEdit[area._id]=!1},$scope.saveEditArea=function(model,area){$scope.error=null,$scope.isResolving=!0,MaturityModels.updateArea({maturityModelId:model._id,areaId:area._id},area,function(res){$scope.isResolving=!1,originalArea[area._id].name=area.name,originalArea[area._id].description=area.description,$scope.areaEdit[area._id]=!1},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditArea=function(area){$scope.error=null,area.name=originalArea[area._id].name,area.description=originalArea[area._id].description,$scope.areaEdit[area._id]=!1},$scope.deleteArea=function(model,area){$scope.error=null,$scope.isResolving=!0,MaturityModels.deleteArea({maturityModelId:model._id,areaId:area._id},area,function(res){$scope.isResolving=!1,$scope.selectedArea=null,model.areas=_.without(model.areas,area),$scope.selectedDimension&&($scope.cancelEditDimension($scope.selectedDimension),$scope.selectedDimension=null),model.dimensions=_.filter(model.dimensions,function(dimension){return dimension.area!==area._id})},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.createLevel=function(model){var newLevel={name:"New maturity level"};$scope.error=null,$scope.isResolving=!0,MaturityModels.createLevel({maturityModelId:model._id},newLevel,function(res){$scope.isResolving=!1,model.levels.push(res),$scope.selectLevel(res)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})};var originalLevels;$scope.dragControlListeners={accept:function(sourceItemHandleScope,destSortableScope){return!$scope.isResolving},dragStart:function(event){originalLevels=_.cloneDeep($scope.selectedMaturityModel.levels)},orderChanged:function(event){$scope.error=null,$scope.isResolving=!0,MaturityModels.sortLevels({maturityModelId:$scope.selectedMaturityModel._id},event.source.sortableScope.modelValue,function(res){$scope.isResolving=!1},function(err){$scope.selectedMaturityModel.levels=originalLevels,$scope.isResolving=!1,$scope.error=err.data.message})}},$scope.levelEdit={};var originalLevel={};$scope.selectLevel=function(level){$scope.selectedLevel&&$scope.cancelEditLevel($scope.selectedLevel),originalLevel[level._id]=_.cloneDeep(level),$scope.selectedLevel=level,$scope.levelEdit[level._id]=!1},$scope.editLevel=function(level){$scope.levelEdit[level._id]=!0},$scope.saveEditLevel=function(model,level){$scope.error=null,$scope.isResolving=!0,MaturityModels.updateLevel({maturityModelId:model._id,levelId:level._id},level,function(res){$scope.isResolving=!1,originalLevel[level._id].name=level.name,originalLevel[level._id].description=level.description,$scope.levelEdit[level._id]=!1},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditLevel=function(level){$scope.error=null,level.name=originalLevel[level._id].name,level.description=originalLevel[level._id].description,$scope.levelEdit[level._id]=!1},$scope.deleteLevel=function(model,level){$scope.error=null,$scope.isResolving=!0,MaturityModels.deleteLevel({maturityModelId:model._id,levelId:level._id},level,function(res){$scope.isResolving=!1,$scope.selectedLevel=null,model.levels=_.without(model.levels,level),$scope.selectedDimension&&($scope.cancelEditDimension($scope.selectedDimension),$scope.selectedDimension=null),model.dimensions=_.filter(model.dimensions,function(dimension){return dimension.level!==level._id})},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.showNewDimensionForm=!1,$scope.newDimensionFormObj={},$scope.saveNewDimension=function(model){var newDimension={level:$scope.newDimensionFormObj[model._id].level._id,area:$scope.newDimensionFormObj[model._id].area._id,name:$scope.newDimensionFormObj[model._id].name,description:$scope.newDimensionFormObj[model._id].description,improvementActivities:[]};$scope.error=null,$scope.isResolving=!0,MaturityModels.createDimension({maturityModelId:model._id},newDimension,function(res){$scope.isResolving=!1,model.dimensions.push(res),$scope.newDimensionFormObj[model._id].name=null,$scope.newDimensionFormObj[model._id].description=null,$scope.showNewDimensionForm=!1,$scope.selectDimension(res)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelNewDimension=function(model){$scope.newDimensionFormObj[model._id]&&($scope.newDimensionFormObj[model._id].level=null,$scope.newDimensionFormObj[model._id].area=null,$scope.newDimensionFormObj[model._id].name=null,$scope.newDimensionFormObj[model._id].description=null),$scope.showNewDimensionForm=!1},$scope.dimensionEdit={};var originalDimension={};$scope.selectDimension=function(dimension){$scope.selectedDimension&&$scope.cancelEditDimension($scope.selectedDimension),originalDimension[dimension._id]=_.cloneDeep(dimension),$scope.selectedDimension=dimension,$scope.dimensionEdit[dimension._id]=!1},$scope.saveEditDimension=function(model,dimension){$scope.error=null,$scope.isResolving=!0,MaturityModels.updateDimension({maturityModelId:model._id,dimensionId:dimension._id},dimension,function(res){$scope.isResolving=!1,originalDimension[dimension._id].name=dimension.name,originalDimension[dimension._id].description=dimension.description,$scope.dimensionEdit[dimension._id]=!1},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditDimension=function(dimension){$scope.error=null,dimension.name=originalDimension[dimension._id].name,dimension.description=originalDimension[dimension._id].description,$scope.dimensionEdit[dimension._id]=!1},$scope.deleteDimension=function(model,dimension){$scope.error=null,$scope.isResolving=!0,MaturityModels.deleteDimension({maturityModelId:model._id,dimensionId:dimension._id},dimension,function(res){$scope.isResolving=!1,$scope.selectedDimension=null,model.dimensions=_.without(model.dimensions,dimension)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})}}]),angular.module("maturity-setup").factory("MaturityModels",["$resource",function($resource){return $resource("maturity-models/:maturityModelId",{maturityModelId:"@_id"},{update:{method:"PUT"},createLevel:{method:"PUT",url:"maturity-models/:maturityModelId/createLevel"},sortLevels:{method:"PUT",url:"maturity-models/:maturityModelId/sortLevels"},updateLevel:{method:"PUT",url:"maturity-models/:maturityModelId/updateLevel/:levelId"},deleteLevel:{method:"PUT",url:"maturity-models/:maturityModelId/deleteLevel/:levelId"},createArea:{method:"PUT",url:"maturity-models/:maturityModelId/createArea"},updateArea:{method:"PUT",url:"maturity-models/:maturityModelId/updateArea/:areaId"},deleteArea:{method:"PUT",url:"maturity-models/:maturityModelId/deleteArea/:areaId"},createDimension:{method:"PUT",url:"maturity-models/:maturityModelId/createDimension"},updateDimension:{method:"PUT",url:"maturity-models/:maturityModelId/updateDimension/:dimensionId"},deleteDimension:{method:"PUT",url:"maturity-models/:maturityModelId/deleteDimension/:dimensionId"},updateMaturityReview:{method:"PUT",url:"maturity-models/:maturityModelId/updateMaturityReview/:dimensionId"},createActivity:{method:"PUT",url:"maturity-models/:maturityModelId/createActivity/:dimensionId"},updateActivity:{method:"PUT",url:"maturity-models/:maturityModelId/updateActivity/:dimensionId/:activityId"},deleteActivity:{method:"PUT",url:"maturity-models/:maturityModelId/deleteActivity/:dimensionId/:activityId"}})}]),angular.module("mytao").run(["Menus",function(Menus){}]),angular.module("mytao").config(["$stateProvider",function($stateProvider){$stateProvider.state("mytao",{url:"/mytao",templateUrl:"modules/mytao/views/mytao.client.view.html"})}]),angular.module("mytao").controller("MytaoController",["$scope","$rootScope","$location","Authentication","$q","_","$timeout","Mytao",function($scope,$rootScope,$location,Authentication,$q,_,$timeout,Mytao){$rootScope.staticMenu=!1;var vm=this;vm.seed=function(){Mytao.seed(function(res){vm.seedRes=res},function(err){vm.seedErr=err.data.message})},vm.init=function(){vm.user=Authentication.user,vm.user||($location.path("/signin"),$rootScope.staticMenu=!0)},vm.error={},Mytao.userProjects(function(res){vm.userProjects=res},function(err){vm.error.userProjects=err.data.message}),Mytao.userPortfolios(function(res){vm.userPortfolios=res},function(err){vm.error.userPortfolios=err.data.message}),Mytao.userProjectReviews(function(res){vm.userProjectReviews=res},function(err){vm.error.userProjectReviews=err.data.message}),Mytao.userPortfolioReviews(function(res){vm.userPortfolioReviews=res},function(err){vm.error.userPortfolioReviews=err.data.message}),Mytao.userImprovementActivities(function(res){vm.userImprovementActivities=res},function(err){vm.error.userImprovementActivities=err.data.message}),Mytao.userProjectChangeRequests(function(res){vm.userProjectChangeRequests=res},function(err){vm.error.userProjectChangeRequests=err.data.message}),Mytao.userProjectStatusUpdates(function(res){vm.userProjectStatusUpdates=res},function(err){vm.error.userProjectStatusUpdates=err.data.message}),Mytao.userPortfolioChangeRequests(function(res){vm.userPortfolioChangeRequests=res},function(err){vm.error.userPortfolioChangeRequests=err.data.message}),Mytao.userGateReviews(function(res){vm.userGateReviews=res},function(err){vm.error.userGateReviews=err.data.message});var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){vm.userData=data.user,data.user||($location.path("/signin"),$rootScope.staticMenu=!0),vm.showIfSuperhero=!!_.find(data.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),vm.labels=["January","February","March","April","May","June","July"],vm.series=["Series A","Series B"],vm.data=[[65,59,80,81,56,55,40],[28,48,40,19,86,27,90]],vm.onClick=function(points,evt){console.log(points,evt)},$timeout(function(){vm.data=[[28,48,40,19,86,27,90],[65,59,80,81,56,55,40]]},3e3)}]),angular.module("mytao").factory("Mytao",["$resource",function($resource){return $resource("mytao",{},{userProjects:{method:"GET",isArray:!0,url:"mytao/user-projects"},userPortfolios:{method:"GET",isArray:!0,url:"mytao/user-portfolios"},userProjectReviews:{method:"GET",isArray:!0,url:"mytao/user-project-reviews"},userPortfolioReviews:{method:"GET",isArray:!0,url:"mytao/user-portfolio-reviews"},userImprovementActivities:{method:"GET",isArray:!0,url:"mytao/user-improvement-activities"},userProjectChangeRequests:{
method:"GET",isArray:!0,url:"mytao/user-project-change-requests"},userProjectStatusUpdates:{method:"GET",isArray:!0,url:"mytao/user-project-status-updates"},userPortfolioChangeRequests:{method:"GET",isArray:!0,url:"mytao/user-portfolio-change-requests"},userGateReviews:{method:"GET",isArray:!0,url:"mytao/user-gate-reviews"},seed:{method:"POST",isArray:!0,url:"mytao/seed"}})}]),angular.module("people-portfolio-analysis").config(["$stateProvider",function($stateProvider){$stateProvider.state("people-portfolio-analysis",{url:"/people-portfolio-analysis",templateUrl:"modules/people-portfolio-analysis/views/people-portfolio-analysis.client.view.html"})}]),angular.module("people-portfolio-analysis").controller("PeoplePortfolioAnalysisController",["$rootScope","$scope","$stateParams","$location","Authentication","Portfolios","PeoplePortfolioGroups","PeopleCategories","PeopleCategoryValues","People","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,Portfolios,PeoplePortfolioGroups,PeopleCategories,PeopleCategoryValues,People,_,$q){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){$scope.userData=Authentication.user,Portfolios.query(function(portfolios){$scope.portfolios=portfolios,$scope.portfolioTrees=createNodeTrees(portfolios)},function(err){$scope.initError.push(err.data.message)}),PeoplePortfolioGroups.query(function(groups){$scope.groups=groups},function(err){$scope.initError.push(err.data.message)}),PeopleCategories.query(function(categories){$scope.categories=categories},function(err){$scope.initError.push(err.data.message)}),PeopleCategoryValues.query(function(categoryValues){$scope.categoryValues=categoryValues},function(err){$scope.initError.push(err.data.message)}),People.query(function(people){$scope.people=people},function(err){$scope.initError.push(err.data.message)}),$scope.showRoleAssignment={}},$scope.userHasAuthorization=function(action,userData,portfolio){if(action&&userData&&portfolio){var userIsSuperhero,userIsPortfolioManager,userIsBackupPortfolioManager;if("edit"===action)return userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),portfolio.portfolioManager&&(userIsPortfolioManager=userData._id===portfolio.portfolioManager._id),portfolio.backupPortfolioManager&&(userIsBackupPortfolioManager=userData._id===portfolio.backupPortfolioManager._id),userIsSuperhero||userIsPortfolioManager||userIsBackupPortfolioManager}};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};$scope.switchPortfolioForm={},$scope.selectPortfolioForm=function(string){"default"===string&&($scope.switchPortfolioForm="default"),"new"===string&&($scope.switchPortfolioForm="new"),"view"===string&&($scope.switchPortfolioForm="view"),"edit"===string&&($scope.switchPortfolioForm="edit")},$scope.switchRoleForm={},$scope.selectRoleForm=function(assignedRole,string){"view"===string&&($scope.switchRoleForm[assignedRole._id]="view"),"edit"===string&&($scope.switchRoleForm[assignedRole._id]="edit")};var originalRoleAssignment,allowNull=function(obj){return obj?obj._id:null};$scope.selectPortfolio=function(portfolio){originalRoleAssignment={},Portfolios.get({portfolioId:portfolio._id,retPropertiesString:"user created name parent ancestors type portfolioManager backupPortfolioManager stakeholders",deepPopulateArray:["parent","type","portfolioManager","backupPortfolioManager","stakeholders.group","stakeholders.roles.categorization.category.categoryValues"]},function(res){$scope.selectedPortfolio=res},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelViewPortfolio=function(){$scope.selectedPortfolio=null,originalRoleAssignment=null},$scope.createAssignedRole=function(portfolio,assignedGroup){Portfolios.createAssignedRole({portfolioId:portfolio._id,assignedGroupId:assignedGroup._id},{},function(res){assignedGroup.roles.push(res)},function(err){$scope.error=err.data.message})},$scope.selectRoleAssignment=function(assignedRole){originalRoleAssignment[assignedRole._id]=_.cloneDeep(assignedRole),$scope.selectRoleForm(assignedRole,"edit")},$scope.saveEditAssignedRole=function(portfolio,assignedGroup,assignedRole){var copyAssignedRole=_.cloneDeep(assignedRole);copyAssignedRole.role=copyAssignedRole.role._id,copyAssignedRole.categorization=_.map(copyAssignedRole.categorization,function(assignedCategory){return assignedCategory.category=allowNull(assignedCategory.category),assignedCategory}),Portfolios.updateAssignedRole({portfolioId:portfolio._id,assignedGroupId:assignedGroup._id,assignedRoleId:assignedRole._id},copyAssignedRole,function(res){$scope.selectRoleForm(assignedRole,"view")},function(err){$scope.error=err.data.message})},$scope.cancelEditAssignedRole=function(assignedRole){assignedRole.role=originalRoleAssignment[assignedRole._id].role,assignedRole.person=originalRoleAssignment[assignedRole._id].person,assignedRole.categorization=originalRoleAssignment[assignedRole._id].categorization,$scope.selectRoleForm(assignedRole,"view")},$scope.deleteAssignedRole=function(portfolio,assignedGroup,assignedRole){Portfolios.deleteAssignedRole({portfolioId:portfolio._id,assignedGroupId:assignedGroup._id,assignedRoleId:assignedRole._id},assignedRole,function(res){assignedGroup.roles=_.without(assignedGroup.roles,assignedRole)},function(err){$scope.error=err.data.message})}}]),angular.module("people-project-analysis").config(["$stateProvider",function($stateProvider){$stateProvider.state("people-project-analysis",{url:"/people-project-analysis",templateUrl:"modules/people-project-analysis/views/people-project-analysis.client.view.html"})}]),angular.module("people-project-analysis").controller("PeopleProjectAnalysisController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","PeopleProjectGroups","PeopleCategories","PeopleCategoryValues","People","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,PeopleProjectGroups,PeopleCategories,PeopleCategoryValues,People,_,$q){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){$scope.userData=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForEvaluation":!0},function(projects){$scope.projects=projects},function(err){$scope.initError.push(err.data.message)}),PeopleProjectGroups.query(function(groups){$scope.groups=groups},function(err){$scope.initError.push(err.data.message)}),PeopleCategories.query(function(categories){$scope.categories=categories},function(err){$scope.initError.push(err.data.message)}),PeopleCategoryValues.query(function(categoryValues){$scope.categoryValues=categoryValues},function(err){$scope.initError.push(err.data.message)}),People.query(function(people){$scope.people=people},function(err){$scope.initError.push(err.data.message)}),$scope.showRoleAssignment={}},$scope.userHasAuthorization=function(action,userData,project){if(action&&userData&&project){var userIsSuperhero,userIsProjectManager,userIsPortfolioManager;if("edit"===action)return userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsProjectManager=userData._id===project.identification.projectManager||userData._id===project.identification.backupProjectManager,project.portfolio&&(userIsPortfolioManager=userData._id===project.portfolio.portfolioManager||userData._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsProjectManager||userIsPortfolioManager}},$scope.switchProjectForm={},$scope.selectProjectForm=function(string){"default"===string&&($scope.switchProjectForm="default"),"new"===string&&($scope.switchProjectForm="new"),"view"===string&&($scope.switchProjectForm="view"),"edit"===string&&($scope.switchProjectForm="edit")},$scope.switchRoleForm={},$scope.selectRoleForm=function(assignedRole,string){"view"===string&&($scope.switchRoleForm[assignedRole._id]="view"),"edit"===string&&($scope.switchRoleForm[assignedRole._id]="edit")};var originalRoleAssignment,allowNull=function(obj){return obj?obj._id:null};$scope.selectProject=function(project){originalRoleAssignment={},Projects.get({projectId:project._id,retPropertiesString:"user created selection identification portfolio stakeholders",deepPopulateArray:["portfolio","stakeholders.group","stakeholders.roles.categorization.category.categoryValues"]},function(res){$scope.selectedProject=res},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelViewProject=function(){$scope.selectedProject=null,originalRoleAssignment=null},$scope.createAssignedRole=function(project,assignedGroup){Projects.createAssignedRole({projectId:project._id,assignedGroupId:assignedGroup._id},{},function(res){assignedGroup.roles.push(res)},function(err){$scope.error=err.data.message})},$scope.selectRoleAssignment=function(assignedRole){originalRoleAssignment[assignedRole._id]=_.cloneDeep(assignedRole),$scope.selectRoleForm(assignedRole,"edit")},$scope.saveEditAssignedRole=function(project,assignedGroup,assignedRole){var copyAssignedRole=_.cloneDeep(assignedRole);copyAssignedRole.role=copyAssignedRole.role._id,copyAssignedRole.categorization=_.map(copyAssignedRole.categorization,function(assignedCategory){return assignedCategory.category=allowNull(assignedCategory.category),assignedCategory}),Projects.updateAssignedRole({projectId:project._id,assignedGroupId:assignedGroup._id,assignedRoleId:assignedRole._id},copyAssignedRole,function(res){$scope.selectRoleForm(assignedRole,"view")},function(err){$scope.error=err.data.message})},$scope.cancelEditAssignedRole=function(assignedRole){assignedRole.role=originalRoleAssignment[assignedRole._id].role,assignedRole.person=originalRoleAssignment[assignedRole._id].person,assignedRole.categorization=originalRoleAssignment[assignedRole._id].categorization,$scope.selectRoleForm(assignedRole,"view")},$scope.deleteAssignedRole=function(project,assignedGroup,assignedRole){Projects.deleteAssignedRole({projectId:project._id,assignedGroupId:assignedGroup._id,assignedRoleId:assignedRole._id},assignedRole,function(res){assignedGroup.roles=_.without(assignedGroup.roles,assignedRole)},function(err){$scope.error=err.data.message})}}]),angular.module("people-setup").config(["$stateProvider",function($stateProvider){$stateProvider.state("people-setup",{url:"/people-setup",templateUrl:"modules/people-setup/views/people-setup.client.view.html"})}]),angular.module("people-setup").controller("PeopleSetupController",["$rootScope","$scope","$stateParams","$location","Authentication","People","PeoplePortfolioGroups","PeopleProjectGroups","PeopleCategories","PeopleCategoryValues","$q","_",function($rootScope,$scope,$stateParams,$location,Authentication,People,PeoplePortfolioGroups,PeopleProjectGroups,PeopleCategories,PeopleCategoryValues,$q,_){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){PeoplePortfolioGroups.query(function(portfolioGroups){$scope.peoplePortfolioGroups=portfolioGroups},function(err){$scope.initError.push(err.data.message)}),PeopleProjectGroups.query(function(projectGroups){$scope.peopleProjectGroups=projectGroups},function(err){$scope.initError.push(err.data.message)}),People.query(function(people){$scope.people=people},function(err){$scope.initError.push(err.data.message)}),PeopleCategories.query(function(peopleCategories){$scope.peopleCategories=peopleCategories},function(err){$scope.initError.push(err.data.message)}),PeopleCategoryValues.query(function(peopleCategoryValues){$scope.peopleCategoryValues=peopleCategoryValues},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.selectPersonForm=function(string){"view"===string&&($scope.switchPersonForm="view"),"edit"===string&&($scope.switchPersonForm="edit")},$scope.findPeople=function(){$scope.initError=[],People.query(function(people){$scope.people=people},function(err){$scope.initError.push(err.data.message)})};var originalPerson={};$scope.selectPerson=function(person){$scope.error=null,$scope.selectPersonForm("view"),$scope.person=person,originalPerson=_.clone(person)},$scope.updatePerson=function(person){$scope.error=null,person.$update(function(response){$scope.findPeople(),$scope.selectPersonForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditPerson=function(person){person.name=originalPerson.name,person.organization=originalPerson.organization,person.title=originalPerson.title,person.email=originalPerson.email,person.phone=originalPerson.phone,$scope.selectPersonForm("view")},$scope.removePerson=function(person){person.$remove(function(response){$scope.people=_.without($scope.people,person),$scope.person=null,$scope.selectPersonForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createPerson=function(){var person=new People({name:"New person",organization:"",title:"",email:"",phone:""});person.$save(function(response){$scope.people.push(response),$scope.selectPerson(response),$scope.selectPersonForm("edit")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchProjectGroupForm={},$scope.selectProjectGroupForm=function(group,string){"view"===string&&($scope.switchProjectGroupForm[group._id]="view"),"new"===string&&($scope.switchProjectGroupForm[group._id]="new"),"edit"===string&&($scope.switchProjectGroupForm[group._id]="edit")},$scope.projectGroupList=function(){$scope.initError=[],PeopleProjectGroups.query(function(groups){$scope.peopleProjectGroups=groups},function(err){$scope.initError.push(err.data.message)})},$scope.createProjectGroup=function(){$scope.error=null;var peopleProjectGroup=new PeopleProjectGroups({name:"New project stakeholder group",description:""});peopleProjectGroup.$save(function(response){$scope.projectGroupList()},function(errorResponse){$scope.error=errorResponse.data.message})};var originalEditProjectGroup={};$scope.selectProjectGroup=function(group){originalEditProjectGroup[group._id]=_.clone(group),$scope.error=null,$scope.selectProjectGroupForm(group,"edit")},$scope.updateProjectGroup=function(group){group.$update(function(response){$scope.selectProjectGroupForm(group,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditProjectGroup=function(group){$scope.error=null,group.name=originalEditProjectGroup[group._id].name,group.description=originalEditProjectGroup[group._id].description,$scope.selectProjectGroupForm(group,"view")},$scope.removeProjectGroup=function(group){$scope.error=null,group.$remove(function(response){$scope.projectGroupList()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchPortfolioGroupForm={},$scope.selectPortfolioGroupForm=function(group,string){"view"===string&&($scope.switchPortfolioGroupForm[group._id]="view"),"new"===string&&($scope.switchPortfolioGroupForm[group._id]="new"),"edit"===string&&($scope.switchPortfolioGroupForm[group._id]="edit")},$scope.portfolioGroupList=function(){$scope.initError=[],PeoplePortfolioGroups.query(function(groups){$scope.peoplePortfolioGroups=groups},function(err){$scope.initError.push(err.data.message)})},$scope.createPortfolioGroup=function(){$scope.error=null;var peoplePortfolioGroup=new PeoplePortfolioGroups({name:"New portfolio stakeholder group",description:""});peoplePortfolioGroup.$save(function(response){$scope.portfolioGroupList()},function(errorResponse){$scope.error=errorResponse.data.message})};var originalEditPortfolioGroup={};$scope.selectPortfolioGroup=function(group){originalEditPortfolioGroup[group._id]=_.clone(group),$scope.error=null,$scope.selectPortfolioGroupForm(group,"edit")},$scope.updatePortfolioGroup=function(group){group.$update(function(response){$scope.selectPortfolioGroupForm(group,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditPortfolioGroup=function(group){$scope.error=null,group.name=originalEditPortfolioGroup[group._id].name,group.description=originalEditPortfolioGroup[group._id].description,$scope.selectPortfolioGroupForm(group,"view")},$scope.removePortfolioGroup=function(group){$scope.error=null,group.$remove(function(response){$scope.portfolioGroupList()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchCategoryForm={},$scope.selectCategoryForm=function(category,string){"view"===string&&($scope.switchCategoryForm[category._id]="view"),"new"===string&&($scope.switchCategoryForm[category._id]="new"),"edit"===string&&($scope.switchCategoryForm[category._id]="edit")},$scope.switchCategoryValueForm={},$scope.selectCategoryValueForm=function(categoryValue,string){"view"===string&&($scope.switchCategoryValueForm[categoryValue._id]="view"),"edit"===string&&($scope.switchCategoryValueForm[categoryValue._id]="edit")},$scope.createCategory=function(){$scope.error=null;var category=new PeopleCategories({name:"New stakeholder category",categoryValues:[]});category.$save(function(res){$scope.peopleCategories.push(res)},function(errorResponse){$scope.error=errorResponse.data.message})};var originalEditCategory={};$scope.selectCategory=function(category){originalEditCategory[category._id]=_.clone(category),$scope.error=null,$scope.selectCategoryForm(category,"edit")},$scope.updateCategory=function(category){PeopleCategories.update({_id:category._id,name:category.name,description:category.description},function(category){$scope.selectCategoryForm(category,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditCategory=function(category){$scope.error=null,category.name=originalEditCategory[category._id].name,category.description=originalEditCategory[category._id].description,$scope.selectCategoryForm(category,"view")},$scope.removeCategory=function(category){$scope.error=null,PeopleCategories.remove({},category,function(res){$scope.peopleCategories=_.without($scope.peopleCategories,category)},function(err){$scope.error=err.data.message})},$scope.createCategoryValue=function(category){$scope.error=null;var categoryValue=new PeopleCategoryValues({name:"New stakeholder category value"});categoryValue.$save({categoryId:category._id},function(res){category.categoryValues.push(res)},function(errorResponse){$scope.error=errorResponse.data.message})};var originalEditCategoryValue={};$scope.selectEditCategoryValue=function(category,categoryValue){originalEditCategoryValue[categoryValue._id]=_.clone(categoryValue),$scope.selectCategoryValueForm(categoryValue,"edit")},$scope.updateCategoryValue=function(category,categoryValue){PeopleCategoryValues.update(categoryValue,function(response){$scope.selectCategoryValueForm(categoryValue,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditCategoryValue=function(categoryValue){$scope.error=null,categoryValue.name=originalEditCategoryValue[categoryValue._id].name,categoryValue.description=originalEditCategoryValue[categoryValue._id].description,$scope.selectCategoryValueForm(categoryValue,"view")},$scope.removeCategoryValue=function(category,categoryValue){$scope.error=null,PeopleCategoryValues.remove({categoryId:category._id},categoryValue,function(res){category.categoryValues=_.without(category.categoryValues,categoryValue)},function(err){$scope.error=err.data.message})}}]),angular.module("people-setup").factory("PeopleCategories",["$resource",function($resource){return $resource("people-categories/:peopleCategoryId",{peopleCategoryId:"@_id"},{update:{method:"PUT"}})}]),angular.module("people-setup").factory("PeopleCategoryValues",["$resource",function($resource){return $resource("people-category-values/:peopleCategoryValueId",{peopleCategoryValueId:"@_id"},{update:{method:"PUT"}})}]),angular.module("people-setup").factory("PeoplePortfolioGroups",["$resource",function($resource){return $resource("people-portfolio-groups/:peoplePortfolioGroupId",{peoplePortfolioGroupId:"@_id"},{update:{method:"PUT"}})}]),angular.module("people-setup").factory("PeopleProjectGroups",["$resource",function($resource){return $resource("people-project-groups/:peopleProjectGroupId",{peopleProjectGroupId:"@_id"},{update:{method:"PUT"}})}]),angular.module("people-setup").factory("People",["$resource",function($resource){return $resource("people/:personId",{personId:"@_id"},{update:{method:"PUT"}})}]),angular.module("portfolio-assignment").config(["$stateProvider",function($stateProvider){$stateProvider.state("portfolio-assignment",{url:"/portfolio-assignment",templateUrl:"modules/portfolio-assignment/views/portfolio-assignment.client.view.html"})}]),angular.module("portfolio-assignment").controller("PortfolioAssignmentController",["$rootScope","$scope","$stateParams","$location","Authentication","Portfolios","Projects","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,Portfolios,Projects,_,$q){$rootScope.staticMenu=!1,$scope.isResolving=!1,$scope.initError=[],$scope.init=function(){$q.all([Portfolios.query().$promise,Projects.query({"selection.active":!0}).$promise]).then(function(data){var portfolios=data[0],projects=data[1];$scope.portfolios=portfolios,$scope.portfolioTrees=createNodeTrees(portfolios),$scope.projects=projects,$scope.selectedAssignments={},$scope.selectedAssignments.assignedProjects={},$scope.selectedAssignments.unassignedProjects=[],createProjectAssignments(projects,portfolios,$scope.selectedAssignments)})};var createProjectAssignments=function(projects,portfolios,selectedAssignments){_.forEach(portfolios,function(node){selectedAssignments.assignedProjects[node._id]=[]}),_.map(projects,function(project){_.isNull(project.portfolio)||_.isUndefined(project.portfolio)?selectedAssignments.unassignedProjects.push(project):_.forEach(portfolios,function(node){project.portfolio._id===node._id&&selectedAssignments.assignedProjects[node._id].push(project)})})},d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role||"portfolioManager"===role})});var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};$scope.selectNode=function(node){$scope.error=null,$scope.selectedNode=node},$scope.getTotalEarmarkedFunds=function(projects){return _.reduce(projects,function(sum,project){return sum+project.identification.earmarkedFunds},0)},$scope.dragControlListenersAssigned={itemMoved:function(eventObj){var movedProjectFromAssigned=eventObj.source.itemScope.project,originalPortfolio=movedProjectFromAssigned.portfolio;movedProjectFromAssigned.portfolio=null,$scope.error=null,$scope.isResolving=!0,Projects.updatePortfolioAssignment(movedProjectFromAssigned,function(res){$scope.isResolving=!1},function(err){$scope.isResolving=!1,$scope.error=err.data.message,movedProjectFromAssigned.portfolio=originalPortfolio,eventObj.dest.sortableScope.removeItem(eventObj.dest.index),eventObj.source.itemScope.sortableScope.insertItem(eventObj.source.index,movedProjectFromAssigned)})}},$scope.dragControlListenersUnassigned={itemMoved:function(eventObj){var movedProjectFromUnassigned=eventObj.source.itemScope.project;movedProjectFromUnassigned.portfolio=$scope.selectedNode,$scope.error=null,$scope.isResolving=!0,Projects.updatePortfolioAssignment(movedProjectFromUnassigned,function(res){$scope.isResolving=!1},function(err){$scope.isResolving=!1,$scope.error=err.data.message,movedProjectFromUnassigned.portfolio=null,eventObj.dest.sortableScope.removeItem(eventObj.dest.index),eventObj.source.itemScope.sortableScope.insertItem(eventObj.source.index,movedProjectFromUnassigned)})}}}]),angular.module("portfolio-change-requests").run(["Menus",function(Menus){}]),angular.module("portfolio-change-requests").config(["$stateProvider",function($stateProvider){$stateProvider.state("PortfolioChangeRequests",{url:"/portfolio-change-requests",templateUrl:"modules/portfolio-change-requests/views/portfolio-change-requests.client.view.html"}).state("portfolio-change-requests-id",{url:"/portfolio-change-requests/:portfolioChangeRequestId/portfolios/:portfolioId",templateUrl:"modules/portfolio-change-requests/views/portfolio-change-requests.client.view.html"})}]),angular.module("portfolio-change-requests").controller("PortfolioChangeRequestsController",["$rootScope","$scope","$stateParams","$location","$q","_","Authentication","Portfolios","PortfolioTypes","Projects","PortfolioChangeRequests","GateProcessTemplates","LogReasons","ChangeRequestStates","LogPriorities","LogStatusIndicators","People","$modal","$log",function($rootScope,$scope,$stateParams,$location,$q,_,Authentication,Portfolios,PortfolioTypes,Projects,PortfolioChangeRequests,GateProcessTemplates,LogReasons,ChangeRequestStates,LogPriorities,LogStatusIndicators,People,$modal,$log){$rootScope.staticMenu=!1;var vm=this;vm.isResolving=!1,vm.initError=[],vm.init=function(){vm.user=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForDelivery":!0,"process.assignmentConfirmed":!0},function(res){vm.projects=res},function(err){vm.initError.push(err.data.message)}),Portfolios.query(function(portfolios){vm.portfolios=portfolios,vm.portfolioTrees=createNodeTrees(portfolios)},function(err){vm.initError.push(err.data.message)}),PortfolioTypes.query(function(res){vm.portfolioTypes=res},function(err){vm.initError.push(err.data.message)}),GateProcessTemplates.query(function(gateProcesses){vm.gateProcesses=gateProcesses},function(err){vm.initError.push(err.data.message)}),LogReasons.query(function(logReasons){vm.logReasons=logReasons},function(err){vm.initError.push(err.data.message)}),ChangeRequestStates.query(function(changeRequestStates){vm.changeRequestStates=changeRequestStates},function(err){vm.initError.push(err.data.message)}),LogPriorities.query(function(logPriorities){vm.logPriorities=logPriorities},function(err){vm.initError.push(err.data.message)}),LogStatusIndicators.query(function(logStatusIndicators){vm.logStatuses=logStatusIndicators},function(err){vm.initError.push(err.data.message)})},vm.userHasAuthorization=function(action,user,portfolio){var userIsSuperhero,userIsPortfolioManager;return"edit"===action&&user&&portfolio?(userIsSuperhero=!!_.some(user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsPortfolioManager=user._id===portfolio.portfolioManager||user._id===portfolio.backupPortfolioManager,userIsSuperhero||userIsPortfolioManager):"approve"===action&&user&&portfolio?userIsSuperhero=!!_.some(user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}):void 0};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};vm.switchHeaderForm={},vm.selectHeaderForm=function(string,portfolioChangeRequest){"view"===string&&(vm.switchHeaderForm[portfolioChangeRequest._id]="view"),"edit"===string&&(vm.switchHeaderForm[portfolioChangeRequest._id]="edit")},vm.switchAssociatedProjectChangeRequestForm={},vm.selectAssociatedProjectChangeRequestForm=function(string,portfolioChangeRequest){"view"===string&&(vm.switchAssociatedProjectChangeRequestForm[portfolioChangeRequest._id]="view"),"edit"===string&&(vm.switchAssociatedProjectChangeRequestForm[portfolioChangeRequest._id]="edit")},vm.switchRequestedFundsForm={},vm.selectRequestedFundsForm=function(string,portfolioChangeRequest){"view"===string&&(vm.switchRequestedFundsForm[portfolioChangeRequest._id]="view"),"edit"===string&&(vm.switchRequestedFundsForm[portfolioChangeRequest._id]="edit")};vm.sortPortfolioChangeRequests=function(portfolioChangeRequest){return new Date(portfolioChangeRequest.raisedOnDate)},vm.sortByCreated=function(object){return new Date(object.created)},vm.calculateTotalCRBudget=function(){return vm.selectedPortfolioChangeRequest?_.reduce(vm.selectedPortfolioChangeRequest.associatedProjectChangeRequests,function(sum,request){return sum+request.budgetReview.budgetChange},0):0},vm.calculateTotalRequests=function(){return vm.selectedPortfolioChangeRequest?_.reduce(vm.selectedPortfolioChangeRequest.fundingRequests,function(sum,request){return sum+request.funds},0):0},vm.portfolioChangeRequestDetails="header",vm.associatedChangeRequestDetails="associated";var originalPortfolioChangeRequest={};vm.selectPortfolio=function(portfolio){vm.cancelNewPortfolioChangeRequest(),vm.selectedPortfolio=null,vm.portfolioChangeRequests=null,vm.selectedPortfolioChangeRequest=null,originalPortfolioChangeRequest={},vm.selectedPortfolio=portfolio,vm.error=null,vm.isResolving=!0,PortfolioChangeRequests.query({portfolio:portfolio._id},function(res){vm.isResolving=!1,vm.portfolioChangeRequests=res},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelViewPortfolio=function(){vm.error=null,vm.selectedPortfolio=null,vm.portfolioChangeRequests=null},vm.showNewPortfolioChangeRequestForm=!1,vm.openNewPortfolioCRRaisedOnDate=function($event){$event.preventDefault(),$event.stopPropagation(),vm.newPortfolioCRRaisedOnDateOpened=!0},vm.newPortfolioChangeRequest={},vm.createNewPortfolioChangeRequest=function(portfolio){var newPortfolioChangeRequest=new PortfolioChangeRequests({portfolio:portfolio._id,raisedOnDate:vm.newPortfolioChangeRequest.raisedOnDate,title:vm.newPortfolioChangeRequest.title});vm.error=null,vm.isResolving=!0,newPortfolioChangeRequest.$save(function(res){vm.isResolving=!1,vm.showNewPortfolioChangeRequestForm=!1,vm.newPortfolioChangeRequest={},vm.portfolioChangeRequests.push(res),vm.selectPortfolioChangeRequest(portfolio,res),vm.showNewPortfolioChangeRequestForm=!1},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelNewPortfolioChangeRequest=function(){vm.error=null,vm.newPortfolioChangeRequest={},vm.showNewPortfolioChangeRequestForm=!1};var portfolioChangeRequestFromList={};vm.selectPortfolioChangeRequest=function(portfolio,portfolioChangeRequest){vm.error=null,vm.isResolving=!0,$q.all([PortfolioChangeRequests.get({portfolioChangeRequestId:portfolioChangeRequest._id}).$promise,PortfolioChangeRequests.getAvailableProjectChangeRequests({portfolioId:portfolio._id,portfolioChangeRequestId:portfolioChangeRequest._id}).$promise,Projects.query({portfolio:portfolio._id,"selection.active":!0,"selection.selectedForDelivery":!0,"process.assignmentConfirmed":!0}).$promise]).then(function(data){vm.isResolving=!1,portfolioChangeRequestFromList[portfolioChangeRequest._id]=portfolioChangeRequest,originalPortfolioChangeRequest[portfolioChangeRequest._id]=_.cloneDeep(data[0]),vm.selectedPortfolioChangeRequest=data[0],vm.availableProjectChangeRequests=data[1],
vm.availableProjects=data[2]},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.headerDateOpened={},vm.openHeaderDate=function(portfolioChangeRequest,$event){$event.preventDefault(),$event.stopPropagation(),vm.headerDateOpened[portfolioChangeRequest._id]=!0},vm.editHeader=function(portfolioChangeRequest){vm.selectHeaderForm("edit",portfolioChangeRequest)},vm.saveEditHeader=function(portfolioChangeRequest){var copyPortfolioChangeRequest=_.cloneDeep(portfolioChangeRequest);copyPortfolioChangeRequest.portfolio=_.get(copyPortfolioChangeRequest.portfolio,"_id"),vm.error=null,vm.isResolving=!0,PortfolioChangeRequests.updateHeader({portfolioChangeRequestId:copyPortfolioChangeRequest._id},copyPortfolioChangeRequest,function(res){vm.isResolving=!1,originalPortfolioChangeRequest[portfolioChangeRequest._id].raisedOnDate=portfolioChangeRequest.raisedOnDate,originalPortfolioChangeRequest[portfolioChangeRequest._id].title=portfolioChangeRequest.title,originalPortfolioChangeRequest[portfolioChangeRequest._id].description=portfolioChangeRequest.description,originalPortfolioChangeRequest[portfolioChangeRequest._id].state=portfolioChangeRequest.state,originalPortfolioChangeRequest[portfolioChangeRequest._id].priority=portfolioChangeRequest.priority,portfolioChangeRequestFromList[portfolioChangeRequest._id].raisedOnDate=portfolioChangeRequest.raisedOnDate,portfolioChangeRequestFromList[portfolioChangeRequest._id].title=portfolioChangeRequest.title,vm.selectHeaderForm("view",portfolioChangeRequest)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditHeader=function(portfolioChangeRequest){vm.error=null,portfolioChangeRequest.raisedOnDate=originalPortfolioChangeRequest[portfolioChangeRequest._id].raisedOnDate,portfolioChangeRequest.title=originalPortfolioChangeRequest[portfolioChangeRequest._id].title,portfolioChangeRequest.description=originalPortfolioChangeRequest[portfolioChangeRequest._id].description,portfolioChangeRequest.state=originalPortfolioChangeRequest[portfolioChangeRequest._id].state,portfolioChangeRequest.priority=originalPortfolioChangeRequest[portfolioChangeRequest._id].priority,vm.selectHeaderForm("view",portfolioChangeRequest)},vm.deletePortfolioChangeRequest=function(portfolioChangeRequest){vm.error=null,vm.isResolving=!0,PortfolioChangeRequests.remove({portfolioChangeRequestId:portfolioChangeRequest._id},portfolioChangeRequest,function(res){vm.isResolving=!1,vm.portfolioChangeRequests=_.without(vm.portfolioChangeRequests,_.find(vm.portfolioChangeRequests,_.matchesProperty("_id",portfolioChangeRequest._id))),vm.cancelNewPortfolioChangeRequest(),vm.selectedPortfolioChangeRequest=null,originalPortfolioChangeRequest={}},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.submit=function(portfolio,portfolioChangeRequest){var copyPortfolioChangeRequest=_.cloneDeep(portfolioChangeRequest);copyPortfolioChangeRequest.portfolio=_.get(copyPortfolioChangeRequest.portfolio,"_id"),vm.error=null,vm.isResolving=!0,PortfolioChangeRequests.submit({portfolioChangeRequestId:copyPortfolioChangeRequest._id},copyPortfolioChangeRequest,function(res){vm.isResolving=!1,originalPortfolioChangeRequest[portfolioChangeRequest._id].approval=res.approval,portfolioChangeRequest.approval=res.approval},function(err){vm.isResolving=!1,$scope.error=err.data.message})},vm.approve=function(portfolio,portfolioChangeRequest){var copyPortfolioChangeRequest=_.cloneDeep(portfolioChangeRequest);copyPortfolioChangeRequest.portfolio=_.get(copyPortfolioChangeRequest.portfolio,"_id"),vm.error=null,vm.isResolving=!0,PortfolioChangeRequests.approve({portfolioChangeRequestId:copyPortfolioChangeRequest._id},copyPortfolioChangeRequest,function(res){vm.isResolving=!1,portfolioChangeRequestFromList[portfolioChangeRequest._id].approval=res.approval,originalPortfolioChangeRequest[portfolioChangeRequest._id].approval=res.approval,portfolioChangeRequest.approval=res.approval},function(err){vm.isResolving=!1,$scope.error=err.data.message})},vm.reject=function(portfolio,portfolioChangeRequest){var copyPortfolioChangeRequest=_.cloneDeep(portfolioChangeRequest);copyPortfolioChangeRequest.portfolio=_.get(copyPortfolioChangeRequest.portfolio,"_id"),vm.error=null,vm.isResolving=!0,PortfolioChangeRequests.reject({portfolioChangeRequestId:copyPortfolioChangeRequest._id},copyPortfolioChangeRequest,function(res){vm.isResolving=!1,portfolioChangeRequestFromList[portfolioChangeRequest._id].approval=res.approval,originalPortfolioChangeRequest[portfolioChangeRequest._id].approval=res.approval,portfolioChangeRequest.approval=res.approval},function(err){vm.isResolving=!1,$scope.error=err.data.message})},vm.draft=function(portfolio,portfolioChangeRequest){var copyPortfolioChangeRequest=_.cloneDeep(portfolioChangeRequest);copyPortfolioChangeRequest.portfolio=_.get(copyPortfolioChangeRequest.portfolio,"_id"),vm.error=null,vm.isResolving=!0,PortfolioChangeRequests.draft({portfolioChangeRequestId:copyPortfolioChangeRequest._id},copyPortfolioChangeRequest,function(res){vm.isResolving=!1,originalPortfolioChangeRequest[portfolioChangeRequest._id].approval=res.approval,portfolioChangeRequest.approval=res.approval},function(err){vm.isResolving=!1,$scope.error=err.data.message})};var modalProjectChangeRequest=function(size,change,logReasons,changeRequestStates,logPriorities,logStatuses){$modal.open({templateUrl:"modules/portfolio-change-requests/views/associated-project-change.client.view.html",controller:function($scope,$modalInstance,change,logReasons,changeRequestStates,logPriorities,logStatuses){$scope.selectedProjectChangeRequest=change,$scope.logReasons=logReasons,$scope.changeRequestStates=changeRequestStates,$scope.logPriorities=logPriorities,$scope.logStatuses=logStatuses,$scope.projectChangeRequestDetails="header",$scope.cancelModal=function(){$modalInstance.dismiss()}},size:size,resolve:{change:function(){return change},logReasons:function(){return logReasons},changeRequestStates:function(){return changeRequestStates},logPriorities:function(){return logPriorities},logStatuses:function(){return logStatuses}},backdrop:"static",keyboard:!1})};vm.viewProjectChangeRequest=function(change){modalProjectChangeRequest("lg",change,vm.logReasons,vm.changeRequestStates,vm.logPriorities,vm.logStatuses)},vm.addProjectChangeRequest=function(portfolioChange,projectChange){vm.error=null,vm.isResolving=!0,PortfolioChangeRequests.addProjectChangeRequest({portfolioChangeRequestId:portfolioChange._id,projectChangeRequestId:projectChange._id},projectChange,function(res){vm.isResolving=!1,portfolioChange.associatedProjectChangeRequests.push(projectChange),vm.availableProjectChangeRequests=_.without(vm.availableProjectChangeRequests,projectChange)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.removeProjectChangeRequest=function(portfolioChange,projectChange){vm.error=null,vm.isResolving=!0,PortfolioChangeRequests.removeProjectChangeRequest({portfolioChangeRequestId:portfolioChange._id,projectChangeRequestId:projectChange._id},projectChange,function(res){vm.isResolving=!1,portfolioChange.associatedProjectChangeRequests=_.without(portfolioChange.associatedProjectChangeRequests,projectChange),vm.availableProjectChangeRequests.push(projectChange)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.switchFundingRequestForm={},vm.selectFundingRequestForm=function(string,fundingRequest){"view"===string&&(vm.switchFundingRequestForm[fundingRequest._id]="view"),"edit"===string&&(vm.switchFundingRequestForm[fundingRequest._id]="edit")},vm.createFundingRequest=function(portfolioChange){var newFundingRequest={title:"New funding request item",description:"",funds:0};vm.error=null,vm.isResolving=!0,PortfolioChangeRequests.createFundingRequest({portfolioChangeRequestId:portfolioChange._id},newFundingRequest,function(res){vm.isResolving=!1,portfolioChange.fundingRequests.push(res)},function(err){vm.isResolving=!1,vm.error=err.data.message})};var originalFundingRequest={};vm.editFundingRequest=function(fundingRequest){originalFundingRequest[fundingRequest._id]=_.cloneDeep(fundingRequest),vm.selectedFundingRequest=fundingRequest,vm.selectFundingRequestForm("edit",fundingRequest)},vm.saveEditFundingRequest=function(portfolioChange,fundingRequest){vm.error=null,vm.isResolving=!0,PortfolioChangeRequests.updateFundingRequest({portfolioChangeRequestId:portfolioChange._id,fundingRequestId:fundingRequest._id},fundingRequest,function(res){vm.isResolving=!1,vm.selectFundingRequestForm("view",fundingRequest)},function(err){vm.isResolving=!1,vm.error=err.data.message,vm.selectFundingRequestForm("view",fundingRequest)})},vm.cancelEditFundingRequest=function(portfolioChange,fundingRequest){vm.error=null,fundingRequest.title=originalFundingRequest[fundingRequest._id].title,fundingRequest.description=originalFundingRequest[fundingRequest._id].description,fundingRequest.funds=originalFundingRequest[fundingRequest._id].funds,vm.selectFundingRequestForm("view",fundingRequest)},vm.deleteFundingRequest=function(portfolioChange,fundingRequest){vm.error=null,vm.isResolving=!0,PortfolioChangeRequests.deleteFundingRequest({portfolioChangeRequestId:portfolioChange._id,fundingRequestId:fundingRequest._id},fundingRequest,function(res){vm.isResolving=!1,portfolioChange.fundingRequests=_.without(portfolioChange.fundingRequests,fundingRequest)},function(err){vm.isResolving=!1,vm.error=err.data.message})}}]),angular.module("portfolio-change-requests").factory("PortfolioChangeRequests",["$resource",function($resource){return $resource("portfolio-change-requests/:portfolioChangeRequestId",{portfolioChangeRequestId:"@_id"},{update:{method:"PUT"},updateHeader:{method:"PUT",url:"portfolio-change-requests/:portfolioChangeRequestId/header"},submit:{method:"PUT",url:"portfolio-change-requests/:portfolioChangeRequestId/submit"},approve:{method:"PUT",url:"portfolio-change-requests/:portfolioChangeRequestId/approve"},reject:{method:"PUT",url:"portfolio-change-requests/:portfolioChangeRequestId/reject"},draft:{method:"PUT",url:"portfolio-change-requests/:portfolioChangeRequestId/draft"},getAvailableProjectChangeRequests:{method:"GET",isArray:!0,url:"portfolio-change-requests/:portfolioChangeRequestId/portfolios/:portfolioId"},addProjectChangeRequest:{method:"PUT",url:"portfolio-change-requests/:portfolioChangeRequestId/project-change-requests/:projectChangeRequestId/addProjectChange"},removeProjectChangeRequest:{method:"PUT",url:"portfolio-change-requests/:portfolioChangeRequestId/project-change-requests/:projectChangeRequestId/removeProjectChange"},createFundingRequest:{method:"PUT",url:"portfolio-change-requests/:portfolioChangeRequestId/createFundingRequest"},deleteFundingRequest:{method:"PUT",url:"portfolio-change-requests/:portfolioChangeRequestId/funding-requests/:fundingRequestId/deleteFundingRequest"},updateFundingRequest:{method:"PUT",url:"portfolio-change-requests/:portfolioChangeRequestId/funding-requests/:fundingRequestId/updateFundingRequest"}})}]),angular.module("portfolio-issues").run(["Menus",function(Menus){}]),angular.module("portfolio-issues").config(["$stateProvider",function($stateProvider){$stateProvider.state("portfolio-issues",{url:"/portfolio-issues",templateUrl:"modules/portfolio-issues/views/portfolio-issues.client.view.html"})}]),angular.module("portfolio-issues").controller("PortfolioIssuesController",["$rootScope","$scope","$stateParams","$location","$q","_","Authentication","Portfolios","Projects","ProjectIssues","PortfolioIssues","GateProcessTemplates","LogReasons","IssueStates","IssueActionStates","LogPriorities","LogStatusIndicators","People","$modal","$log",function($rootScope,$scope,$stateParams,$location,$q,_,Authentication,Portfolios,Projects,ProjectIssues,PortfolioIssues,GateProcessTemplates,LogReasons,IssueStates,IssueActionStates,LogPriorities,LogStatusIndicators,People,$modal,$log){$rootScope.staticMenu=!1;var vm=this;vm.isResolving=!1,vm.initErrors=[],vm.init=function(){vm.user=Authentication.user,Projects.query({"selection.selectedForDelivery":!0},function(projects){vm.projects=_.filter(projects,function(project){return null!==project.process})},function(err){vm.initErrors.push(err.data.message)}),Portfolios.query(function(portfolios){vm.portfolios=portfolios,vm.portfolioTrees=createNodeTrees(portfolios)},function(err){vm.initErrors.push(err.data.message)}),GateProcessTemplates.query(function(gateProcesses){vm.gateProcesses=gateProcesses},function(err){vm.initErrors.push(err.data.message)}),LogReasons.query(function(res){vm.logReasons=res},function(err){vm.initErrors.push(err.data.message)}),IssueStates.query(function(res){vm.issueStates=res},function(err){vm.initErrors.push(err.data.message)}),IssueActionStates.query(function(res){vm.issueActionStates=res},function(err){vm.initErrors.push(err.data.message)}),LogPriorities.query(function(res){vm.logPriorities=res},function(err){vm.initError.push(err.data.message)}),LogStatusIndicators.query(function(res){vm.logStatuses=res},function(err){vm.initError.push(err.data.message)}),People.query(function(res){vm.people=res},function(err){vm.initError.push(err.data.message)})},vm.userHasAuthorization=function(action,user,portfolio){var userIsSuperhero,userIsPortfolioManager;return"edit"===action&&user&&portfolio?(userIsSuperhero=!!_.some(user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsPortfolioManager=user._id===portfolio.portfolioManager||user._id===portfolio.backupPortfolioManager,userIsSuperhero||userIsPortfolioManager):void 0};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees},allowNull=function(obj){return obj?obj._id:null};vm.sortProjectIssues=function(projectIssue){return new Date(projectIssue.raisedOnDate)},vm.completionFilterArray=[{name:"Completed",flag:!0},{name:"Not completed",flag:!1}],vm.selectPortfolio=function(portfolio){vm.portfolioIssues=null,vm.selectedPortfolioIssue=null,vm.selectedPortfolio=portfolio,vm.error=null,vm.isResolving=!0,PortfolioIssues.query({portfolio:portfolio._id},function(res){vm.isResolving=!1,vm.portfolioIssues=res},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.showNewPortfolioIssueForm=!1,vm.newPortfolioIssueRaisedOnDateOpened={},vm.openNewPortfolioIssueRaisedOnDate=function(portfolio,$event){$event.preventDefault(),$event.stopPropagation(),vm.newPortfolioIssueRaisedOnDateOpened[portfolio._id]=!0},vm.newPortfolioIssue={},vm.createNewPortfolioIssue=function(portfolio){var newPortfolioIssue=new PortfolioIssues({portfolio:portfolio._id,raisedOnDate:vm.newPortfolioIssue.raisedOnDate,title:vm.newPortfolioIssue.title});vm.error=null,vm.isResolving=!0,newPortfolioIssue.$save(function(res){vm.isResolving=!1,res.portfolio=_.cloneDeep(portfolio),vm.portfolioIssues.push(res),vm.newPortfolioIssue={},vm.selectPortfolioIssue(_.find(vm.portfolioIssues,_.matchesProperty("_id",res._id)),portfolio),vm.showNewPortfolioIssueForm=!1},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelNewPortfolioIssue=function(){vm.error=null,vm.newPortfolioIssue={},vm.showNewPortfolioIssueForm=!1};var modalUpdateIssue=function(size,issue,portfolio){$modal.open({templateUrl:"modules/portfolio-issues/views/edit-portfolio-issue.client.view.html",controller:function($scope,$modalInstance,issue,portfolio,availableProjectIssues,availableProjects){$scope.selectedPortfolio=portfolio,$scope.originalPortfolioIssue=_.cloneDeep(issue),$scope.selectedPortfolioIssue=issue,$scope.availableProjectIssues=availableProjectIssues,$scope.availableProjects=availableProjects,$scope.associateProjectIssue=function(portfolioIssue,projectIssue){$scope.error=null,$scope.isResolving=!0,PortfolioIssues.addProjectIssue({portfolioIssueId:portfolioIssue._id,projectIssueId:projectIssue._id},portfolioIssue,function(res){$scope.isResolving=!1,portfolioIssue.associatedProjectIssues.push(projectIssue),$scope.availableProjectIssues=_.without($scope.availableProjectIssues,projectIssue)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.disassociateProjectIssue=function(portfolioIssue,projectIssue){$scope.error=null,$scope.isResolving=!0,PortfolioIssues.removeProjectIssue({portfolioIssueId:portfolioIssue._id,projectIssueId:projectIssue._id},portfolioIssue,function(res){$scope.isResolving=!1,portfolioIssue.associatedProjectIssues=_.without(portfolioIssue.associatedProjectIssues,projectIssue),$scope.availableProjectIssues.push(projectIssue)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelModal=function(){$scope.error=null,$modalInstance.dismiss()}},size:size,resolve:{issue:function(){return issue},portfolio:function(){return portfolio},availableProjectIssues:function(PortfolioIssues){return PortfolioIssues.getAvailableProjectIssues({portfolioId:portfolio._id,portfolioIssueId:issue._id},function(res){return res},function(err){vm.error=err.data.message})},availableProjects:function(Projects){return Projects.query({portfolio:portfolio._id},function(res){return res},function(err){vm.error=err.data.message})}},backdrop:"static",keyboard:!1})};vm.selectPortfolioIssue=function(issue,portfolio){vm.issue=null,modalUpdateIssue("lg",issue,portfolio)},vm.portfolioIssueDetails="header",vm.selectHeaderForm=function(string){"view"===string&&(vm.switchHeaderForm="view"),"edit"===string&&(vm.switchHeaderForm="edit")},vm.selectStatusForm=function(string){"view"===string&&(vm.switchStatusForm="view"),"edit"===string&&(vm.switchStatusForm="edit")},vm.openHeaderDate=function($event){$event.preventDefault(),$event.stopPropagation(),vm.headerDateOpened=!0},vm.editHeader=function(){vm.selectHeaderForm("edit")},vm.saveEditHeader=function(portfolioIssue,originalPortfolioIssue){var copyPortfolioIssue=_.cloneDeep(portfolioIssue);copyPortfolioIssue.portfolio=_.get(copyPortfolioIssue.portfolio,"_id"),copyPortfolioIssue.reason=allowNull(copyPortfolioIssue.reason),copyPortfolioIssue.priority=allowNull(copyPortfolioIssue.priority),copyPortfolioIssue.state=allowNull(copyPortfolioIssue.state),copyPortfolioIssue.statusReview.currentRecord.status=allowNull(copyPortfolioIssue.statusReview.currentRecord.status),vm.error=null,vm.isResolving=!0,PortfolioIssues.updateHeader({portfolioIssueId:copyPortfolioIssue._id},copyPortfolioIssue,function(res){vm.isResolving=!1,originalPortfolioIssue.raisedOnDate=portfolioIssue.raisedOnDate,originalPortfolioIssue.title=portfolioIssue.title,originalPortfolioIssue.description=portfolioIssue.description,originalPortfolioIssue.state=portfolioIssue.state,originalPortfolioIssue.reason=portfolioIssue.reason,originalPortfolioIssue.priority=portfolioIssue.priority,vm.selectHeaderForm("view")},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditHeader=function(portfolioIssue,originalPortfolioIssue){vm.error=null,portfolioIssue.gate=originalPortfolioIssue.gate,portfolioIssue.raisedOnDate=originalPortfolioIssue.raisedOnDate,portfolioIssue.title=originalPortfolioIssue.title,portfolioIssue.description=originalPortfolioIssue.description,portfolioIssue.state=originalPortfolioIssue.state,portfolioIssue.reason=originalPortfolioIssue.reason,portfolioIssue.priority=originalPortfolioIssue.priority,vm.selectHeaderForm("view")},vm.deletePortfolioIssue=function(portfolioIssue){vm.error=null,vm.isResolving=!0,PortfolioIssues.remove({portfolioIssueId:portfolioIssue._id},portfolioIssue,function(res){vm.isResolving=!1,vm.portfolioIssues=_.without(vm.portfolioIssues,portfolioIssue)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.openBaselineDeliveryDate=function($event){$event.preventDefault(),$event.stopPropagation(),vm.baselineDeliveryDateOpened=!0},vm.openEstimateDeliveryDate=function($event){$event.preventDefault(),$event.stopPropagation(),vm.estimateDeliveryDateOpened=!0},vm.openActualDeliveryDate=function($event){$event.preventDefault(),$event.stopPropagation(),vm.actualDeliveryDateOpened=!0},vm.editStatus=function(){vm.selectStatusForm("edit")},vm.saveEditStatus=function(portfolioIssue,originalPortfolioIssue){var copyPortfolioIssue=_.cloneDeep(portfolioIssue);copyPortfolioIssue.portfolio=_.get(copyPortfolioIssue.portfolio,"_id"),copyPortfolioIssue.reason=allowNull(copyPortfolioIssue.reason),copyPortfolioIssue.priority=allowNull(copyPortfolioIssue.priority),copyPortfolioIssue.state=allowNull(copyPortfolioIssue.state),copyPortfolioIssue.statusReview.currentRecord.status=allowNull(copyPortfolioIssue.statusReview.currentRecord.status),vm.error=null,vm.isResolving=!0,PortfolioIssues.updateStatus({portfolioIssueId:copyPortfolioIssue._id},copyPortfolioIssue,function(res){vm.isResolving=!1,originalPortfolioIssue.statusReview.currentRecord.baselineDeliveryDate=portfolioIssue.statusReview.currentRecord.baselineDeliveryDate,originalPortfolioIssue.statusReview.currentRecord.estimateDeliveryDate=portfolioIssue.statusReview.currentRecord.estimateDeliveryDate,originalPortfolioIssue.statusReview.currentRecord.actualDeliveryDate=portfolioIssue.statusReview.currentRecord.actualDeliveryDate,originalPortfolioIssue.statusReview.currentRecord.status=portfolioIssue.statusReview.currentRecord.status,originalPortfolioIssue.statusReview.currentRecord.completed=portfolioIssue.statusReview.currentRecord.completed,originalPortfolioIssue.statusReview.currentRecord.statusComment=portfolioIssue.statusReview.currentRecord.statusComment,vm.selectStatusForm("view")},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditStatus=function(portfolioIssue,originalPortfolioIssue){vm.error=null,portfolioIssue.statusReview.currentRecord.baselineDeliveryDate=originalPortfolioIssue.statusReview.currentRecord.baselineDeliveryDate,portfolioIssue.statusReview.currentRecord.estimateDeliveryDate=originalPortfolioIssue.statusReview.currentRecord.estimateDeliveryDate,portfolioIssue.statusReview.currentRecord.actualDeliveryDate=originalPortfolioIssue.statusReview.currentRecord.actualDeliveryDate,portfolioIssue.statusReview.currentRecord.status=originalPortfolioIssue.statusReview.currentRecord.status,portfolioIssue.statusReview.currentRecord.completed=originalPortfolioIssue.statusReview.currentRecord.completed,portfolioIssue.statusReview.currentRecord.statusComment=originalPortfolioIssue.statusReview.currentRecord.statusComment,vm.selectStatusForm("view")},vm.addNewAction=function(portfolioIssue){var newAction={raisedOnDate:Date.now(),title:"New action title"};vm.error=null,vm.isResolving=!0,PortfolioIssues.createAction({portfolioIssueId:portfolioIssue._id},newAction,function(res){vm.isResolving=!1,portfolioIssue.escalationActions.push(res),vm.selectAction(_.find(portfolioIssue.escalationActions,_.matchesProperty("_id",res._id)))},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.selectAction=function(action){vm.originalAction=_.cloneDeep(action),vm.selectedAction=action},vm.actionDetails="header",vm.switchActionHeaderForm={},vm.selectActionHeaderForm=function(string,action){"view"===string&&(vm.switchActionHeaderForm[action._id]="view"),"edit"===string&&(vm.switchActionHeaderForm[action._id]="edit")},vm.switchActionStatusForm={},vm.selectActionStatusForm=function(string,action){"view"===string&&(vm.switchActionStatusForm[action._id]="view"),"edit"===string&&(vm.switchActionStatusForm[action._id]="edit")},vm.actionHeaderDateOpened={},vm.openActionHeaderDate=function($event,action){$event.preventDefault(),$event.stopPropagation(),vm.actionHeaderDateOpened[action._id]=!0},vm.editActionHeader=function(action){vm.selectActionHeaderForm("edit",action)},vm.saveEditActionHeader=function(issue,action,originalAction){var copyAction=_.cloneDeep(action);copyAction.portfolio=_.get(copyAction.portfolio,"_id"),copyAction.escalatedTo=allowNull(copyAction.escalatedTo),copyAction.priority=allowNull(copyAction.priority),copyAction.state=allowNull(copyAction.state),copyAction.statusReview.currentRecord.status=allowNull(copyAction.statusReview.currentRecord.status),vm.error=null,vm.isResolving=!0,PortfolioIssues.updateActionHeader({portfolioIssueId:issue._id,escalationActionId:action._id},copyAction,function(res){vm.isResolving=!1,originalAction.raisedOnDate=action.raisedOnDate,originalAction.title=action.title,originalAction.description=action.description,originalAction.state=action.state,originalAction.escalatedTo=action.escalatedTo,originalAction.priority=action.priority,vm.selectActionHeaderForm("view",action)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditActionHeader=function(action,originalAction){vm.error=null,action.raisedOnDate=originalAction.raisedOnDate,action.title=originalAction.title,action.description=originalAction.description,action.state=originalAction.state,action.escalatedTo=originalAction.escalatedTo,action.priority=originalAction.priority,vm.selectActionHeaderForm("view",action)},vm.deleteAction=function(issue,action){vm.error=null,vm.isResolving=!0,PortfolioIssues.deleteAction({portfolioIssueId:issue._id,escalationActionId:action._id},action,function(res){vm.isResolving=!1,issue.escalationActions=_.without(issue.escalationActions,action),vm.originalAction=null,vm.selectedAction=null},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.actionBaselineDeliveryDateOpened={},vm.openActionBaselineDeliveryDate=function($event,action){$event.preventDefault(),$event.stopPropagation(),vm.actionBaselineDeliveryDateOpened[action._id]=!0},vm.actionEstimateDeliveryDateOpened={},vm.openActionEstimateDeliveryDate=function($event,action){$event.preventDefault(),$event.stopPropagation(),vm.actionEstimateDeliveryDateOpened[action._id]=!0},vm.actionActualDeliveryDateOpened={},vm.openActionActualDeliveryDate=function($event,action){$event.preventDefault(),$event.stopPropagation(),vm.actionActualDeliveryDateOpened[action._id]=!0},vm.editActionStatus=function(action){vm.selectActionStatusForm("edit",action)},vm.saveEditActionStatus=function(issue,action,originalAction){var copyAction=_.cloneDeep(action);copyAction.portfolio=_.get(copyAction.portfolio,"_id"),copyAction.escalatedTo=allowNull(copyAction.escalatedTo),copyAction.priority=allowNull(copyAction.priority),copyAction.state=allowNull(copyAction.state),copyAction.statusReview.currentRecord.status=allowNull(copyAction.statusReview.currentRecord.status),vm.error=null,vm.isResolving=!0,PortfolioIssues.updateActionStatus({portfolioIssueId:issue._id,escalationActionId:action._id},copyAction,function(res){vm.isResolving=!1,originalAction.statusReview.currentRecord.baselineDeliveryDate=issue.statusReview.currentRecord.baselineDeliveryDate,originalAction.statusReview.currentRecord.estimateDeliveryDate=issue.statusReview.currentRecord.estimateDeliveryDate,originalAction.statusReview.currentRecord.actualDeliveryDate=issue.statusReview.currentRecord.actualDeliveryDate,originalAction.statusReview.currentRecord.status=issue.statusReview.currentRecord.status,originalAction.statusReview.currentRecord.completed=issue.statusReview.currentRecord.completed,originalAction.statusReview.currentRecord.statusComment=issue.statusReview.currentRecord.statusComment,vm.selectActionStatusForm("view",action)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditActionStatus=function(action,originalAction){vm.error=null,action.statusReview.currentRecord.baselineDeliveryDate=originalAction.statusReview.currentRecord.baselineDeliveryDate,action.statusReview.currentRecord.estimateDeliveryDate=originalAction.statusReview.currentRecord.estimateDeliveryDate,action.statusReview.currentRecord.actualDeliveryDate=originalAction.statusReview.currentRecord.actualDeliveryDate,action.statusReview.currentRecord.status=originalAction.statusReview.currentRecord.status,action.statusReview.currentRecord.completed=originalAction.statusReview.currentRecord.completed,action.statusReview.currentRecord.statusComment=originalAction.statusReview.currentRecord.statusComment,vm.selectActionStatusForm("view",action)}}]),angular.module("portfolio-issues").factory("PortfolioIssues",["$resource",function($resource){return $resource("portfolio-issues/:portfolioIssueId",{portfolioIssueId:"@_id"},{update:{method:"PUT"},updateHeader:{method:"PUT",url:"portfolio-issues/:portfolioIssueId/header"},updateStatus:{method:"PUT",url:"portfolio-issues/:portfolioIssueId/status"},createAction:{method:"POST",url:"portfolio-issues/:portfolioIssueId/createAction"},updateActionHeader:{method:"PUT",url:"portfolio-issues/:portfolioIssueId/escalationActions/:escalationActionId/actionHeader"},updateActionStatus:{method:"PUT",url:"portfolio-issues/:portfolioIssueId/escalationActions/:escalationActionId/actionStatus"},deleteAction:{method:"PUT",url:"portfolio-issues/:portfolioIssueId/escalationActions/:escalationActionId/deleteAction"},getAvailableProjectIssues:{method:"GET",isArray:!0,url:"portfolio-issues/:portfolioIssueId/portfolios/:portfolioId"},addProjectIssue:{method:"PUT",url:"portfolio-issues/:portfolioIssueId/project-issues/:projectIssueId/addProjectIssue"},removeProjectIssue:{method:"PUT",url:"portfolio-issues/:portfolioIssueId/project-issues/:projectIssueId/removeProjectIssue"}})}]),angular.module("portfolio-milestones").run(["Menus",function(Menus){}]),angular.module("portfolio-milestones").config(["$stateProvider",function($stateProvider){$stateProvider.state("portfolio-milestones",{url:"/portfolio-milestones",templateUrl:"modules/portfolio-milestones/views/portfolio-milestones.client.view.html"})}]),angular.module("portfolio-milestones").controller("PortfolioMilestonesController",["$rootScope","$scope","$stateParams","$location","$q","_","Authentication","Portfolios","Projects","PortfolioMilestones","GateProcessTemplates","MilestoneStates","PortfolioMilestoneTypes","ProjectMilestoneTypes","LogStatusIndicators","$modal","$log",function($rootScope,$scope,$stateParams,$location,$q,_,Authentication,Portfolios,Projects,PortfolioMilestones,GateProcessTemplates,MilestoneStates,PortfolioMilestoneTypes,ProjectMilestoneTypes,LogStatusIndicators,$modal,$log){$rootScope.staticMenu=!1;var vm=this;vm.isResolving=!1,vm.initErrors=[],vm.init=function(){vm.user=Authentication.user,Portfolios.query(function(portfolios){vm.portfolios=portfolios,vm.portfolioTrees=createNodeTrees(portfolios)},function(err){vm.initErrors.push(err.data.message)}),GateProcessTemplates.query(function(gateProcesses){vm.gateProcesses=gateProcesses},function(err){vm.initErrors.push(err.data.message)}),MilestoneStates.query(function(milestoneStates){vm.milestoneStates=milestoneStates},function(err){vm.initErrors.push(err.data.message)}),PortfolioMilestoneTypes.query(function(portfolioMilestoneTypes){vm.portfolioMilestoneTypes=portfolioMilestoneTypes},function(err){vm.initErrors.push(err.data.message)}),ProjectMilestoneTypes.query(function(projectMilestoneTypes){vm.projectMilestoneTypes=projectMilestoneTypes},function(err){vm.initErrors.push(err.data.message)}),LogStatusIndicators.query(function(logStatusIndicators){vm.logStatuses=logStatusIndicators},function(err){vm.initErrors.push(err.data.message)})},vm.userHasAuthorization=function(action,user,portfolio){var userIsSuperhero,userIsPortfolioManager;return"edit"===action&&user&&portfolio?(userIsSuperhero=!!_.some(user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsPortfolioManager=user._id===portfolio.portfolioManager||user._id===portfolio.backupPortfolioManager,userIsSuperhero||userIsPortfolioManager):void 0};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){
nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};vm.switchHeaderForm={},vm.selectHeaderForm=function(string,portfolioMilestone){"view"===string&&(vm.switchHeaderForm[portfolioMilestone._id]="view"),"edit"===string&&(vm.switchHeaderForm[portfolioMilestone._id]="edit")},vm.switchStatusForm={},vm.selectStatusForm=function(string,portfolioMilestone){"view"===string&&(vm.switchStatusForm[portfolioMilestone._id]="view"),"edit"===string&&(vm.switchStatusForm[portfolioMilestone._id]="edit")},vm.switchAssociatedProjectMilestoneForm={},vm.selectAssociatedProjectMilestoneForm=function(string,portfolioMilestone){"view"===string&&(vm.switchAssociatedProjectMilestoneForm[portfolioMilestone._id]="view"),"edit"===string&&(vm.switchAssociatedProjectMilestoneForm[portfolioMilestone._id]="edit")},vm.portfolioMilestoneFilter={};vm.sortMilestones=function(milestone){return new Date(milestone.statusReview.currentRecord.estimateDeliveryDate)},vm.sortByCreated=function(object){return new Date(object.created)},vm.portfolioMilestoneDetails="header";var originalPortfolioMilestone={};vm.selectPortfolio=function(portfolio){vm.cancelNewPortfolioMilestone(),vm.selectedPortfolio=null,vm.portfolioMilestones=null,vm.selectedPortfolioMilestone=null,originalPortfolioMilestone={},vm.selectedPortfolio=portfolio,vm.error=null,vm.isResolving=!0,PortfolioMilestones.query({portfolio:portfolio._id},function(res){vm.isResolving=!1,vm.portfolioMilestones=res},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelViewPortfolio=function(){vm.error=null,vm.selectedPortfolio=null,vm.portfolioMilestones=null},vm.showNewPortfolioMilestoneForm=!1,vm.openNewPortfolioCRRaisedOnDate=function($event){$event.preventDefault(),$event.stopPropagation(),vm.newPortfolioCRRaisedOnDateOpened=!0},vm.newPortfolioMilestone={},vm.createNewPortfolioMilestone=function(portfolio){var newPortfolioMilestone=new PortfolioMilestones({portfolio:portfolio._id,type:vm.newPortfolioMilestone.type,name:vm.newPortfolioMilestone.name});vm.error=null,vm.isResolving=!0,newPortfolioMilestone.$save(function(res){vm.isResolving=!1,vm.newPortfolioMilestone={},vm.portfolioMilestones.push(res),vm.selectPortfolioMilestone(portfolio,res),vm.showNewPortfolioMilestoneForm=!1},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelNewPortfolioMilestone=function(){vm.error=null,vm.newPortfolioMilestone={},vm.showNewPortfolioMilestoneForm=!1};var portfolioMilestoneFromList={};vm.selectPortfolioMilestone=function(portfolio,portfolioMilestone){vm.error=null,vm.isResolving=!0,$q.all([PortfolioMilestones.get({portfolioMilestoneId:portfolioMilestone._id}).$promise,PortfolioMilestones.getAvailableProjectMilestones({portfolioId:portfolio._id,portfolioMilestoneId:portfolioMilestone._id}).$promise,Projects.query({portfolio:portfolio._id}).$promise]).then(function(data){vm.isResolving=!1,portfolioMilestoneFromList[portfolioMilestone._id]=portfolioMilestone,originalPortfolioMilestone[portfolioMilestone._id]=_.cloneDeep(data[0]),vm.selectedPortfolioMilestone=data[0],vm.availableProjectMilestones=data[1],vm.availableProjects=data[2]},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.editHeader=function(portfolioMilestone){vm.selectHeaderForm("edit",portfolioMilestone)},vm.saveEditHeader=function(portfolioMilestone){var copyPortfolioMilestone=_.cloneDeep(portfolioMilestone);copyPortfolioMilestone.portfolio=_.get(copyPortfolioMilestone.portfolio,"_id"),vm.error=null,vm.isResolving=!0,PortfolioMilestones.updateHeader({portfolioMilestoneId:copyPortfolioMilestone._id},copyPortfolioMilestone,function(res){vm.isResolving=!1,originalPortfolioMilestone[portfolioMilestone._id].name=portfolioMilestone.name,originalPortfolioMilestone[portfolioMilestone._id].description=portfolioMilestone.description,originalPortfolioMilestone[portfolioMilestone._id].state=portfolioMilestone.state,originalPortfolioMilestone[portfolioMilestone._id].type=portfolioMilestone.type,portfolioMilestoneFromList[portfolioMilestone._id].name=portfolioMilestone.name,vm.selectHeaderForm("view",portfolioMilestone)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditHeader=function(portfolioMilestone){vm.error=null,portfolioMilestone.name=originalPortfolioMilestone[portfolioMilestone._id].name,portfolioMilestone.description=originalPortfolioMilestone[portfolioMilestone._id].description,portfolioMilestone.state=originalPortfolioMilestone[portfolioMilestone._id].state,portfolioMilestone.type=originalPortfolioMilestone[portfolioMilestone._id].type,vm.selectHeaderForm("view",portfolioMilestone)},vm.deletePortfolioMilestone=function(portfolioMilestone){vm.error=null,vm.isResolving=!0,PortfolioMilestones.remove({portfolioMilestoneId:portfolioMilestone._id},portfolioMilestone,function(res){vm.isResolving=!1,vm.portfolioMilestones=_.without(vm.portfolioMilestones,_.find(vm.portfolioMilestones,_.matchesProperty("_id",portfolioMilestone._id))),vm.cancelNewPortfolioMilestone(),vm.selectedPortfolioMilestone=null,originalPortfolioMilestone={}},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.baselineDeliveryDateOpened={},vm.openBaselineDeliveryDate=function(portfolioMilestone,$event){$event.preventDefault(),$event.stopPropagation(),vm.baselineDeliveryDateOpened[portfolioMilestone._id]=!0},vm.estimateDeliveryDateOpened={},vm.openEstimateDeliveryDate=function(portfolioMilestone,$event){$event.preventDefault(),$event.stopPropagation(),vm.estimateDeliveryDateOpened[portfolioMilestone._id]=!0},vm.actualDeliveryDateOpened={},vm.openActualDeliveryDate=function(portfolioMilestone,$event){$event.preventDefault(),$event.stopPropagation(),vm.actualDeliveryDateOpened[portfolioMilestone._id]=!0},vm.editStatus=function(portfolioMilestone){vm.selectStatusForm("edit",portfolioMilestone)},vm.saveEditStatus=function(portfolioMilestone){var copyPortfolioMilestone=_.cloneDeep(portfolioMilestone);copyPortfolioMilestone.project=_.get(copyPortfolioMilestone.project,"_id"),copyPortfolioMilestone.gate=_.get(copyPortfolioMilestone.gate,"_id"),vm.error=null,vm.isResolving=!0,PortfolioMilestones.updateStatus({portfolioMilestoneId:copyPortfolioMilestone._id},copyPortfolioMilestone,function(res){vm.isResolving=!1,portfolioMilestoneFromList[portfolioMilestone._id].statusReview.currentRecord.completed=portfolioMilestone.statusReview.currentRecord.completed,portfolioMilestoneFromList[portfolioMilestone._id].statusReview.currentRecord.estimateDeliveryDate=portfolioMilestone.statusReview.currentRecord.estimateDeliveryDate,originalPortfolioMilestone[portfolioMilestone._id].statusReview.currentRecord.baselineDeliveryDate=portfolioMilestone.statusReview.currentRecord.baselineDeliveryDate,originalPortfolioMilestone[portfolioMilestone._id].statusReview.currentRecord.estimateDeliveryDate=portfolioMilestone.statusReview.currentRecord.estimateDeliveryDate,originalPortfolioMilestone[portfolioMilestone._id].statusReview.currentRecord.actualDeliveryDate=portfolioMilestone.statusReview.currentRecord.actualDeliveryDate,originalPortfolioMilestone[portfolioMilestone._id].statusReview.currentRecord.status=portfolioMilestone.statusReview.currentRecord.status,originalPortfolioMilestone[portfolioMilestone._id].statusReview.currentRecord.completed=portfolioMilestone.statusReview.currentRecord.completed,originalPortfolioMilestone[portfolioMilestone._id].statusReview.currentRecord.statusComment=portfolioMilestone.statusReview.currentRecord.statusComment,vm.selectStatusForm("view",portfolioMilestone)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditStatus=function(portfolioMilestone){vm.error=null,portfolioMilestone.statusReview.currentRecord.baselineDeliveryDate=originalPortfolioMilestone[portfolioMilestone._id].statusReview.currentRecord.baselineDeliveryDate,portfolioMilestone.statusReview.currentRecord.estimateDeliveryDate=originalPortfolioMilestone[portfolioMilestone._id].statusReview.currentRecord.estimateDeliveryDate,portfolioMilestone.statusReview.currentRecord.actualDeliveryDate=originalPortfolioMilestone[portfolioMilestone._id].statusReview.currentRecord.actualDeliveryDate,portfolioMilestone.statusReview.currentRecord.status=originalPortfolioMilestone[portfolioMilestone._id].statusReview.currentRecord.status,portfolioMilestone.statusReview.currentRecord.completed=originalPortfolioMilestone[portfolioMilestone._id].statusReview.currentRecord.completed,portfolioMilestone.statusReview.currentRecord.statusComment=originalPortfolioMilestone[portfolioMilestone._id].statusReview.currentRecord.statusComment,vm.selectStatusForm("view",portfolioMilestone)};var modalProjectMilestone=function(size,milestone,milestoneStates,portfolioMilestoneTypes,projectMilestoneTypes,logStatuses,availableProjects){$modal.open({templateUrl:"modules/portfolio-milestones/views/associated-project-milestone.client.view.html",controller:function($scope,$modalInstance,milestone){$scope.selectedProjectMilestone=milestone,$scope.milestoneStates=milestoneStates,$scope.portfolioMilestoneTypes=portfolioMilestoneTypes,$scope.projectMilestoneTypes=projectMilestoneTypes,$scope.logStatuses=logStatuses,$scope.availableProjects=availableProjects,$scope.projectMilestoneDetails="header",$scope.cancelModal=function(){$modalInstance.dismiss()}},size:size,resolve:{milestone:function(){return milestone},milestoneStates:function(){return milestoneStates},portfolioMilestoneTypes:function(){return portfolioMilestoneTypes},projectMilestoneTypes:function(){return projectMilestoneTypes},logStatuses:function(){return logStatuses},availableProjects:function(){return availableProjects}},backdrop:"static",keyboard:!1})};vm.viewProjectMilestone=function(milestone){modalProjectMilestone("lg",milestone,vm.milestoneStates,vm.portfolioMilestoneTypes,vm.projectMilestoneTypes,vm.logStatuses,vm.availableProjects)},vm.addProjectMilestone=function(portfolioMilestone,projectMilestone){vm.error=null,vm.isResolving=!0,PortfolioMilestones.addProjectMilestone({portfolioMilestoneId:portfolioMilestone._id,projectMilestoneId:projectMilestone._id},projectMilestone,function(res){vm.isResolving=!1,portfolioMilestone.associatedProjectMilestones.push(projectMilestone),vm.availableProjectMilestones=_.without(vm.availableProjectMilestones,projectMilestone)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.removeProjectMilestone=function(portfolioMilestone,projectMilestone){vm.error=null,vm.isResolving=!0,PortfolioMilestones.removeProjectMilestone({portfolioMilestoneId:portfolioMilestone._id,projectMilestoneId:projectMilestone._id},projectMilestone,function(res){vm.isResolving=!1,portfolioMilestone.associatedProjectMilestones=_.without(portfolioMilestone.associatedProjectMilestones,projectMilestone),vm.availableProjectMilestones.push(projectMilestone)},function(err){vm.isResolving=!1,vm.error=err.data.message})}}]),angular.module("portfolio-milestones").factory("PortfolioMilestones",["$resource",function($resource){return $resource("portfolio-milestones/:portfolioMilestoneId",{portfolioMilestoneId:"@_id"},{update:{method:"PUT"},updateHeader:{method:"PUT",url:"portfolio-milestones/:portfolioMilestoneId/header"},updateStatus:{method:"PUT",url:"portfolio-milestones/:portfolioMilestoneId/status"},getAvailableProjectMilestones:{method:"GET",isArray:!0,url:"portfolio-milestones/:portfolioMilestoneId/portfolios/:portfolioId"},addProjectMilestone:{method:"PUT",url:"portfolio-milestones/:portfolioMilestoneId/project-milestones/:projectMilestoneId/addProjectMilestone"},removeProjectMilestone:{method:"PUT",url:"portfolio-milestones/:portfolioMilestoneId/project-milestones/:projectMilestoneId/removeProjectMilestone"}})}]),angular.module("portfolio-ranking-assignment").config(["$stateProvider",function($stateProvider){$stateProvider.state("portfolio-ranking-assignment",{url:"/portfolio-ranking-assignment",templateUrl:"modules/portfolio-ranking-assignment/views/portfolio-ranking-assignment.client.view.html"})}]),angular.module("portfolio-ranking-assignment").controller("PortfolioRankingAssignmentController",["$rootScope","$scope","$stateParams","$location","Authentication","Portfolios","Projects","PortfolioRankings","OverallRankings","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,Portfolios,Projects,PortfolioRankings,OverallRankings,_,$q){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){$scope.userData=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForPrioritization":!0},function(projects){$scope.projects=projects},function(err){$scope.initError.push(err.data.message)}),Portfolios.query(function(portfolios){$scope.portfolios=portfolios,$scope.portfolioTrees=createNodeTrees(portfolios)},function(err){$scope.initError.push(err.data.message)}),PortfolioRankings.query(function(portfolioRankings){$scope.portfolioRankings=portfolioRankings},function(err){$scope.initError.push(err.data.message)}),OverallRankings.query(function(res){$scope.overallRankings=res},function(err){$scope.initError.push(err.data.message)})};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees},userHasAuthorization=!1,getAuthorization=function(portfolio,userData){var isPortfolioManager,isBackupPortfolioManager,isSuperhero;return portfolio.portfolioManager&&(isPortfolioManager=portfolio.portfolioManager===userData._id),portfolio.backupPortfolioManager&&(isBackupPortfolioManager=portfolio.backupPortfolioManager===userData._id),isSuperhero=!!_.find(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),isPortfolioManager||isBackupPortfolioManager||isSuperhero},selectedPortfolioRanking={};$scope.selectedAssignment={};var overallSelected=!1;$scope.selectNode=function(node,userData){userHasAuthorization=getAuthorization(node,userData),"overall"===node?($scope.error=null,$scope.selectedNode={name:"Overall"},overallSelected=!0,OverallRankings.query(function(res){selectedPortfolioRanking=res[0],$scope.selectedAssignment.assignedProjects=_.map(res[0].projects,function(project){return{_id:project._id,idReference:project.identification.idReference,name:project.identification.name}}),$scope.selectedAssignment.unassignedProjects=[],_.forEach($scope.projects,function(project){_.find(res[0].projects,"_id",project._id)||$scope.selectedAssignment.unassignedProjects.push({_id:project._id,idReference:project.identification.idReference,name:project.identification.name})})})):($scope.error=null,$scope.selectedNode=node,overallSelected=!1,PortfolioRankings.get({portfolioId:node._id,retPropertiesString:"user created selection identification portfolio",deepPopulateArray:["portfolio","identification.projectManager","identification.backupProjectManager"]},function(res){selectedPortfolioRanking=res,$scope.selectedAssignment.assignedProjects=_.map(res.projects,function(project){return{_id:project._id,idReference:project.identification.idReference,name:project.identification.name}}),$scope.selectedAssignment.unassignedProjects=[],_.forEach($scope.projects,function(project){project.portfolio&&project.portfolio._id===node._id&&(_.find(res.projects,"_id",project._id)||$scope.selectedAssignment.unassignedProjects.push({_id:project._id,idReference:project.identification.idReference,name:project.identification.name}))})}))},$scope.dragControlListeners={accept:function(sourceItemHandleScope,destSortableScope){return userHasAuthorization},itemMoved:function(eventObj){if(eventObj){var cleanProjectsArray=_.map($scope.selectedAssignment.assignedProjects,function(project){return project._id});overallSelected?OverallRankings.update({overallRankingId:selectedPortfolioRanking._id},{projects:cleanProjectsArray},function(res){$scope.error=null},function(err){$scope.error=err.data.message,eventObj.dest.sortableScope.removeItem(eventObj.dest.index),eventObj.source.itemScope.sortableScope.insertItem(eventObj.source.index,eventObj.source.itemScope.project)}):PortfolioRankings.update({portfolioRankingId:selectedPortfolioRanking._id},{projects:cleanProjectsArray},function(res){$scope.error=null},function(err){$scope.error=err.data.message,eventObj.dest.sortableScope.removeItem(eventObj.dest.index),eventObj.source.itemScope.sortableScope.insertItem(eventObj.source.index,eventObj.source.itemScope.project)})}},orderChanged:function(eventObj){if(eventObj){var cleanProjectsArray=_.map($scope.selectedAssignment.assignedProjects,function(project){return project._id});overallSelected?OverallRankings.update({overallRankingId:selectedPortfolioRanking._id},{projects:cleanProjectsArray},function(res){$scope.error=null},function(err){$scope.error=err.data.message,eventObj.dest.sortableScope.removeItem(eventObj.dest.index),eventObj.source.itemScope.sortableScope.insertItem(eventObj.source.index,eventObj.source.itemScope.project)}):PortfolioRankings.update({portfolioRankingId:selectedPortfolioRanking._id},{projects:cleanProjectsArray},function(res){$scope.error=null},function(err){$scope.error=err.data.message,eventObj.dest.sortableScope.removeItem(eventObj.dest.index),eventObj.source.itemScope.sortableScope.insertItem(eventObj.source.index,eventObj.source.itemScope.project)})}}}}]),angular.module("portfolio-ranking-assignment").factory("OverallRankings",["$resource",function($resource){return $resource("overall-rankings/:overallRankingId",{overallRankingId:"@_id"},{update:{method:"PUT"}})}]),angular.module("portfolio-ranking-assignment").factory("PortfolioRankings",["$resource",function($resource){return $resource("portfolio-rankings/:portfolioRankingId",{portfolioRankingId:"@_id"},{update:{method:"PUT"}})}]),angular.module("portfolio-review-templates").config(["$stateProvider",function($stateProvider){$stateProvider.state("portfolio-review-templates",{url:"/portfolio-review-templates",templateUrl:"modules/portfolio-review-templates/views/portfolio-review-templates.client.view.html"})}]),angular.module("portfolio-review-templates").controller("PortfolioReviewTemplatesController",["$rootScope","$scope","$stateParams","$location","Authentication","PortfolioReviewTemplates","PortfolioReviewTypes","PeoplePortfolioGroups","$q","_",function($rootScope,$scope,$stateParams,$location,Authentication,PortfolioReviewTemplates,PortfolioReviewTypes,PeoplePortfolioGroups,$q,_){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){PortfolioReviewTemplates.query(function(res){$scope.templates=res},function(err){$scope.initError.push(err.data.message)}),PortfolioReviewTypes.query(function(res){$scope.templateTypes=res},function(err){$scope.initError.push(err.data.message)}),PeoplePortfolioGroups.query(function(res){$scope.stakeholderGroups=res},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.switchTemplateForm={},$scope.selectTemplateForm=function(template,string){"view"===string&&($scope.switchTemplateForm[template._id]="view"),"edit"===string&&($scope.switchTemplateForm[template._id]="edit")},$scope.switchGroupForm={},$scope.selectGroupForm=function(group,string){"view"===string&&($scope.switchGroupForm[group._id]="view"),"new"===string&&($scope.switchGroupForm[group._id]="new"),"edit"===string&&($scope.switchGroupForm[group._id]="edit")},$scope.switchItemForm={},$scope.selectItemForm=function(item,string){"view"===string&&($scope.switchItemForm[item._id]="view"),"edit"===string&&($scope.switchItemForm[item._id]="edit")},$scope.templateList=function(){PortfolioReviewTemplates.query(function(templates){$scope.templates=templates})},$scope.getTotalTemplateWeights=function(template){return template?_.reduce(template.groups,function(memo,group){return memo+group.weight},0):void 0},$scope.getTotalItemWeights=function(group){return group?_.reduce(group.items,function(memo,impact){return memo+impact.weight},0):void 0},$scope.newTemplate={},$scope.showNewTemplateForm=!1,$scope.saveNewTemplate=function(newTemplate){$scope.error=null;var template=new PortfolioReviewTemplates({name:newTemplate.name,type:newTemplate.type,groups:[]});template.$save(function(res){$scope.error=null,$scope.newTemplate={},$scope.showNewTemplateForm=!1,$scope.templateList()},function(err){$scope.error=err.data.message})},$scope.cancelNewTemplate=function(){$scope.error=null,$scope.newTemplate={},$scope.showNewTemplateForm=!1};var originalEditTemplate={};$scope.selectTemplate=function(template){originalEditTemplate=_.clone(template),$scope.selectedTemplate=template},$scope.updateTemplate=function(template){PortfolioReviewTemplates.update({_id:template._id,name:template.name,type:template.type,description:template.description},function(template){$scope.error=null,$scope.selectTemplateForm(template,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditTemplate=function(template){$scope.error=null,$scope.selectedTemplate.name=originalEditTemplate.name,$scope.selectedTemplate.description=originalEditTemplate.description,$scope.selectedTemplate.type=originalEditTemplate.type,$scope.selectTemplateForm(template,"view")},$scope.createGroup=function(template){var newGroup={name:"New group",weight:0,peopleGroups:[],items:[]};PortfolioReviewTemplates.createGroup({portfolioReviewTemplateId:template._id},newGroup,function(res){$scope.error=null,template.groups.push(res)},function(err){console.log(err.data.message),$scope.error=err.data.message})};var originalEditGroup={};$scope.selectedStakeholderGroup={},$scope.selectGroup=function(group){$scope.selectedStakeholderGroup[group._id]=null,originalEditGroup[group._id]=_.clone(group),$scope.error=null,$scope.selectGroupForm(group,"edit")},$scope.updateGroup=function(template,group){PortfolioReviewTemplates.updateGroup({portfolioReviewTemplateId:template._id,groupId:group._id},group,function(res){$scope.error=null,$scope.selectGroupForm(res,"view")},function(err){$scope.error=err.data.message})},$scope.cancelEditGroup=function(group){$scope.error=null,group.name=originalEditGroup[group._id].name,group.description=originalEditGroup[group._id].description,group.weight=originalEditGroup[group._id].weight,$scope.selectGroupForm(group,"view")},$scope.getAllowedStakeholderGroups=function(reviewGroup){return _.filter($scope.stakeholderGroups,function(stakeholderGroup){return!_.find(reviewGroup.peopleGroups,function(sGroup){return sGroup._id===stakeholderGroup._id})})},$scope.stringForAllowedStakeholderGroups="No selectable groups",$scope.addStakeholderGroup=function(template,group,stakeholderGroup){$scope.selectedStakeholderGroup[group._id]=null,PortfolioReviewTemplates.addStakeholderGroup({portfolioReviewTemplateId:template._id,groupId:group._id,peopleGroupId:stakeholderGroup._id},stakeholderGroup,function(res){$scope.error=null,group.peopleGroups.push(stakeholderGroup)},function(err){$scope.error=err.data.message})},$scope.removeStakeholderGroup=function(template,group,stakeholderGroup){$scope.selectedStakeholderGroup[group._id]=null,PortfolioReviewTemplates.removeStakeholderGroup({portfolioReviewTemplateId:template._id,groupId:group._id,peopleGroupId:stakeholderGroup._id},stakeholderGroup,function(res){$scope.error=null,group.peopleGroups=_.without(group.peopleGroups,stakeholderGroup)},function(err){$scope.error=err.data.message})},$scope.createItem=function(template,group){$scope.error=null;var newItem={name:"New review item",weight:0,peopleReviews:[]};PortfolioReviewTemplates.createItem({portfolioReviewTemplateId:template._id,groupId:group._id},newItem,function(res){group.items.push(res)},function(err){$scope.error=err.data.message})};var originalEditItem={};$scope.selectEditItem=function(group,item){originalEditItem[item._id]=_.clone(item),$scope.selectItemForm(item,"edit")},$scope.updateItem=function(template,group,item){PortfolioReviewTemplates.updateItem({portfolioReviewTemplateId:template._id,groupId:group._id,itemId:item._id},item,function(res){$scope.selectItemForm(item,"view")},function(err){$scope.error=err.data.message})},$scope.cancelEditItem=function(item){$scope.error=null,item.name=originalEditItem[item._id].name,item.description=originalEditItem[item._id].description,item.weight=originalEditItem[item._id].weight,$scope.selectItemForm(item,"view")},$scope.removeTemplate=function(template){$scope.error=null,template.$remove(function(response){$scope.selectedTemplate=null,$scope.templateList()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.removeGroup=function(template,group){$scope.error=null,PortfolioReviewTemplates.deleteGroup({portfolioReviewTemplateId:template._id,groupId:group._id},group,function(res){template.groups=_.without(template.groups,group)},function(err){$scope.error=err.data.message})},$scope.removeItem=function(template,group,item){$scope.error=null,PortfolioReviewTemplates.deleteItem({portfolioReviewTemplateId:template._id,groupId:group._id,itemId:item._id},item,function(res){group.items=_.without(group.items,item)},function(err){$scope.error=err.data.message})}}]),angular.module("portfolio-review-templates").factory("PortfolioReviewTemplates",["$resource",function($resource){return $resource("portfolio-review-templates/:portfolioReviewTemplateId",{portfolioReviewTemplateId:"@_id"},{update:{method:"PUT"},createGroup:{method:"PUT",url:"portfolio-review-templates/:portfolioReviewTemplateId/groups"},updateGroup:{method:"PUT",url:"portfolio-review-templates/:portfolioReviewTemplateId/groups/:groupId/update"},deleteGroup:{method:"PUT",url:"portfolio-review-templates/:portfolioReviewTemplateId/groups/:groupId/delete"},addStakeholderGroup:{method:"PUT",url:"portfolio-review-templates/:portfolioReviewTemplateId/groups/:groupId/peopleGroups/:peopleGroupId/add"},removeStakeholderGroup:{method:"PUT",url:"portfolio-review-templates/:portfolioReviewTemplateId/groups/:groupId/peopleGroups/:peopleGroupId/remove"},createItem:{method:"PUT",url:"portfolio-review-templates/:portfolioReviewTemplateId/groups/:groupId/items"},updateItem:{method:"PUT",url:"portfolio-review-templates/:portfolioReviewTemplateId/groups/:groupId/items/:itemId/update"},deleteItem:{method:"PUT",url:"portfolio-review-templates/:portfolioReviewTemplateId/groups/:groupId/items/:itemId/delete"}})}]),angular.module("portfolio-reviews").run(["Menus",function(Menus){}]),angular.module("portfolio-reviews").config(["$stateProvider",function($stateProvider){$stateProvider.state("portfolio-reviews",{url:"/portfolio-reviews",templateUrl:"modules/portfolio-reviews/views/portfolio-reviews.client.view.html"}).state("portfolio-reviews-id",{url:"/portfolio-reviews/:portfolioReviewId/portfolios/:portfolioId",templateUrl:"modules/portfolio-reviews/views/portfolio-reviews.client.view.html"})}]),angular.module("portfolio-reviews").controller("PortfolioReviewsController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","Portfolios","$q","_","PortfolioReviewTemplates","ProjectReviewScores","PortfolioReviewTypes","PortfolioReviews","PeoplePortfolioGroups",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,Portfolios,$q,_,PortfolioReviewTemplates,ProjectReviewScores,PortfolioReviewTypes,PortfolioReviews,PeoplePortfolioGroups){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){$scope.userData=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForEvaluation":!0},function(res){$scope.projects=res},function(err){$scope.initError.push({message:err.data.message})}),Portfolios.query(function(res){if($scope.portfolios=res,$scope.portfolioTrees=createNodeTrees(res),$stateParams.portfolioId){var foundPortfolio=_.find(res,_.matchesProperty("_id",$stateParams.portfolioId));foundPortfolio?$scope.selectPortfolio(foundPortfolio):($scope.error="Cannot find portfolio"+$stateParams.portfolioId,$stateParams.portfolioReviewId=null)}},function(err){$scope.initError.push({message:err.data.message})}),PortfolioReviewTemplates.query(function(res){$scope.portfolioReviewTemplates=res},function(err){$scope.initError.push({message:err.data.message})}),ProjectReviewScores.query(function(res){$scope.projectReviewScores=res},function(err){$scope.initError.push({message:err.data.message})}),PortfolioReviewTypes.query(function(res){$scope.portfolioReviewTypes=res},function(err){$scope.initError.push({message:err.data.message})}),PeoplePortfolioGroups.query(function(res){$scope.peoplePortfolioGroups=res},function(err){$scope.initError.push({message:err.data.message})})},$scope.userHasManagementAuthorization=function(action,userData,portfolio){if(action&&userData&&portfolio){var userIsSuperhero,userIsPortfolioManager,userIsBackupPortfolioManager;if("edit"===action)return userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsPortfolioManager=userData._id===portfolio.portfolioManager,userIsBackupPortfolioManager=userData._id===portfolio.backupPortfolioManager,userIsSuperhero||userIsPortfolioManager||userIsBackupPortfolioManager}},$scope.userHasReviewAuthorization=function(action,userData,peopleReview){if(action&&userData&&peopleReview){var userIsSuperhero,userIsReviewer;if("edit"===action)return userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),peopleReview.person&&(userIsReviewer=userData._id===peopleReview.person._id),userIsSuperhero||userIsReviewer}};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};$scope.switchPortfolioForm="",$scope.selectPortfolioForm=function(string){"default"===string&&($scope.switchPortfolioForm="default"),"new"===string&&($scope.switchPortfolioForm="new"),"view"===string&&($scope.switchPortfolioForm="view"),"edit"===string&&($scope.switchPortfolioForm="edit")},$scope.switchHeaderForm={},$scope.selectHeaderForm=function(string,portfolioReview){"view"===string&&($scope.switchHeaderForm[portfolioReview._id]="view"),"edit"===string&&($scope.switchHeaderForm[portfolioReview._id]="edit")},$scope.switchPeopleReviewForm={},$scope.selectPeopleReviewForm=function(string,peopleReview){"view"===string&&($scope.switchPeopleReviewForm[peopleReview._id]="view"),"edit"===string&&($scope.switchPeopleReviewForm[peopleReview._id]="edit")},$scope.switchWorkflowForm={},$scope.selectWorkflowForm=function(string,portfolioReview){"view"===string&&($scope.switchWorkflowForm[portfolioReview._id]="view"),"edit"===string&&($scope.switchWorkflowForm[portfolioReview._id]="edit")};$scope.sortAppliedChanges=function(record){return new Date(record.created)},$scope.portfolioReviewDetails="header";var originalPortfolioReview={};$scope.selectPortfolio=function(portfolio){$scope.error=null,$scope.selectedPortfolio=null,$scope.portfolioReviews=null,$scope.selectedPortfolioReview=null,originalPortfolioReview={},$scope.selectedPortfolio=portfolio,
PortfolioReviews.query({portfolio:portfolio._id},function(res){if($scope.portfolioReviews=res,$stateParams.portfolioReviewId){var foundPortfolioReview=_.find($scope.portfolioReviews,_.matchesProperty("_id",$stateParams.portfolioReviewId));foundPortfolioReview?$scope.selectPortfolioReview(foundPortfolioReview):$scope.error="Cannot find portfolio review"+$stateParams.portfolioReviewId}},function(err){$scope.error=err.data.message})},$scope.cancelViewPortfolio=function(){$scope.error=null,$scope.selectedPortfolio=null,$scope.portfolioReviews=null},$scope.newStartDateOpened={},$scope.openNewStartDate=function(portfolio,$event){$event.preventDefault(),$event.stopPropagation(),$scope.newStartDateOpened[portfolio._id]=!0},$scope.newEndDateOpened={},$scope.openNewEndDate=function(portfolio,$event){$event.preventDefault(),$event.stopPropagation(),$scope.newEndDateOpened[portfolio._id]=!0},$scope.newPortfolioReview={},$scope.allowedPortfolioReviewTemplates=function(){return _.filter($scope.portfolioReviewTemplates,_.matchesProperty("type",$scope.newPortfolioReview.type))},$scope.createNewPortfolioReview=function(portfolio){$scope.error=null;var newPortfolioReview=new PortfolioReviews({portfolio:portfolio._id,name:$scope.newPortfolioReview.name,startDate:$scope.newPortfolioReview.startDate,endDate:$scope.newPortfolioReview.startDate,template:$scope.newPortfolioReview.template});newPortfolioReview.$save(function(res){$scope.newPortfolioReview={},$scope.portfolioReviews.push(res),$scope.selectPortfolioReview(res)},function(err){$scope.error=err.data.message})},$scope.cancelNewPortfolioReview=function(){$scope.error=null,$scope.newPortfolioReview={}},$scope.selectPortfolioReview=function(portfolioReview){$scope.error=null,$scope.selectedPortfolioReview=portfolioReview,originalPortfolioReview[portfolioReview._id]=_.cloneDeep(portfolioReview)},$scope.editStartDateOpened={},$scope.openEditStartDate=function(review,$event){$event.preventDefault(),$event.stopPropagation(),$scope.editStartDateOpened[review._id]=!0},$scope.editEndDateOpened={},$scope.openEditEndDate=function(review,$event){$event.preventDefault(),$event.stopPropagation(),$scope.editEndDateOpened[review._id]=!0},$scope.editHeader=function(portfolioReview){originalPortfolioReview[portfolioReview._id]=_.cloneDeep(portfolioReview),$scope.selectHeaderForm("edit",portfolioReview)},$scope.saveEditHeader=function(portfolioReview){var copyPortfolioReview=_.cloneDeep(portfolioReview);PortfolioReviews.updateHeader({portfolioReviewId:copyPortfolioReview._id},copyPortfolioReview,function(res){$scope.selectHeaderForm("view",portfolioReview)},function(err){$scope.error=err.data.message})},$scope.cancelEditHeader=function(portfolioReview){$scope.error=null,portfolioReview.name=originalPortfolioReview[portfolioReview._id].name,portfolioReview.startDate=originalPortfolioReview[portfolioReview._id].startDate,portfolioReview.endDate=originalPortfolioReview[portfolioReview._id].endDate,portfolioReview.description=originalPortfolioReview[portfolioReview._id].description,$scope.selectHeaderForm("view",portfolioReview)},$scope.deletePortfolioReview=function(portfolioReview){PortfolioReviews.remove({portfolioReviewId:portfolioReview._id},portfolioReview,function(res){$scope.portfolioReviews=_.without($scope.portfolioReviews,portfolioReview),$scope.cancelNewPortfolioReview(),$scope.selectedPortfolioReview=null,originalPortfolioReview={}},function(err){$scope.error=err.data.message})},$scope.oneAtATime=!0;var originalPeopleReview={};$scope.editPeopleReview=function(peopleReview){$scope.error=null,$scope.selectPeopleReviewForm("edit",peopleReview),originalPeopleReview[peopleReview._id]=_.cloneDeep(peopleReview)},$scope.saveEditPeopleReview=function(portfolioReview,reviewGroup,reviewItem,peopleReview){var copyPeopleReview=_.cloneDeep(peopleReview);copyPeopleReview.person=copyPeopleReview.person._id,PortfolioReviews.updatePeopleReview({portfolioReviewId:portfolioReview._id,groupId:reviewGroup._id,itemId:reviewItem._id,peopleReviewId:peopleReview._id},copyPeopleReview,function(res){$scope.selectPeopleReviewForm("view",peopleReview)},function(err){$scope.error=err.data.message})},$scope.cancelEditPeopleReview=function(peopleReview){peopleReview.score=originalPeopleReview[peopleReview._id].score,peopleReview.comment=originalPeopleReview[peopleReview._id].comment,$scope.error=null,$scope.selectPeopleReviewForm("view",peopleReview)},$scope.submitPeopleReview=function(portfolioReview,reviewGroup,reviewItem,peopleReview){$scope.error=null;var copyPeopleReview=_.cloneDeep(peopleReview);copyPeopleReview.person=copyPeopleReview.person._id,PortfolioReviews.submitPeopleReview({portfolioReviewId:portfolioReview._id,groupId:reviewGroup._id,itemId:reviewItem._id,peopleReviewId:peopleReview._id},copyPeopleReview,function(res){peopleReview.submitted=res.submitted,$scope.selectPeopleReviewForm("view",peopleReview)},function(err){$scope.error=err.data.message})},$scope.submit=function(portfolioReview){$scope.error=null,PortfolioReviews.submit({portfolioReviewId:portfolioReview._id},portfolioReview,function(res){portfolioReview.approval=res.approval},function(err){$scope.error=err.data.message})},$scope.complete=function(portfolioReview){$scope.error=null,PortfolioReviews.complete({portfolioReviewId:portfolioReview._id},portfolioReview,function(res){portfolioReview.approval=res.approval},function(err){$scope.error=err.data.message})},$scope.draft=function(portfolioReview){$scope.error=null,PortfolioReviews.draft({portfolioReviewId:portfolioReview._id},portfolioReview,function(res){portfolioReview.approval=res.approval},function(err){$scope.error=err.data.message})}}]),angular.module("portfolio-reviews").factory("PortfolioReviews",["$resource",function($resource){return $resource("portfolio-reviews/:portfolioReviewId",{portfolioReviewId:"@_id"},{update:{method:"PUT"},updateHeader:{method:"PUT",url:"portfolio-reviews/:portfolioReviewId/header"},updatePeopleReview:{method:"PUT",url:"portfolio-reviews/:portfolioReviewId/groups/:groupId/items/:itemId/peopleReviews/:peopleReviewId/update"},submitPeopleReview:{method:"PUT",url:"portfolio-reviews/:portfolioReviewId/groups/:groupId/items/:itemId/peopleReviews/:peopleReviewId/submit"},submit:{method:"PUT",url:"portfolio-reviews/:portfolioReviewId/submit"},complete:{method:"PUT",url:"portfolio-reviews/:portfolioReviewId/complete"},draft:{method:"PUT",url:"portfolio-reviews/:portfolioReviewId/draft"}})}]),angular.module("portfolio-setup").config(["$stateProvider",function($stateProvider){$stateProvider.state("portfolio-setup",{url:"/portfolio-setup",templateUrl:"modules/portfolio-setup/views/portfolio-setup.client.view.html"})}]),angular.module("portfolio-setup").controller("PortfolioSetupController",["$rootScope","$scope","$stateParams","$location","Authentication","Portfolios","PortfolioTypes","Subusers","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,Portfolios,PortfolioTypes,Subusers,_,$q){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){Subusers.query(function(users){$scope.users=users,$scope.portfolioManagers=_.filter(users,function(user){return _.find(_.get(user,"roles"),function(role){return"portfolioManager"===role})})},function(err){$scope.initError.push(err.data.message)}),Portfolios.query(function(portfolios){$scope.portfolios=portfolios,$scope.portfolioTrees=createNodeTrees(portfolios)},function(err){$scope.initError.push(err.data.message)}),PortfolioTypes.query(function(portfolioTypes){$scope.portfolioTypes=_.clone(portfolioTypes)},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})});var allowNull=function(obj){return obj?obj._id:null};$scope.switchTypeForm={},$scope.selectTypeForm=function(type,string){"view"===string&&($scope.switchTypeForm[type._id]="view"),"new"===string&&($scope.switchTypeForm[type._id]="new"),"edit"===string&&($scope.switchTypeForm[type._id]="edit")},$scope.findTypes=function(){$scope.initError=[],PortfolioTypes.query(function(types){$scope.portfolioTypes=_.clone(types)},function(err){$scope.initError.push(err.data.message)})},$scope.selectType=function(type){$scope.selectTypeForm(type,"edit")},$scope.updateType=function(type){type.$update(function(response){$scope.findTypes(),$scope.selectTypeForm(type,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditType=function(type){$scope.findTypes(),$scope.selectTypeForm(type,"view")},$scope.removeType=function(type){type.$remove(function(response){$scope.findTypes()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createType=function(){var portfolioType=new PortfolioTypes({name:"New portfolio type"});portfolioType.$save(function(response){$scope.findTypes(),$scope.selectTypeForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees},ancestorsArray=function(parent){if(parent){var retArray=[];return retArray.push(parent._id),_.map(parent.ancestors,function(ancestor){retArray.push(ancestor)}),retArray}return[]},editParent=function(parent){return parent?_.get($scope.editPortfolio,"parent._id"):null};$scope.portfolioList=function(){$scope.initError=[],Portfolios.query(function(portfolios){$scope.portfolios=portfolios,$scope.portfolioTrees=createNodeTrees(portfolios)},function(err){$scope.initError.push(err.data.message)})},$scope.switchPortfolioForm="view",$scope.selectPortfolioForm=function(string){"view"===string&&($scope.switchPortfolioForm="view"),"new"===string&&($scope.switchPortfolioForm="new"),"edit"===string&&($scope.switchPortfolioForm="edit")};var masterPortfolio;$scope.selectPortfolio=function(portfolioId){$scope.selectPortfolioForm("view"),Portfolios.get({portfolioId:portfolioId,retPropertiesString:"user created name parent ancestors type portfolioManager backupPortfolioManager earmarkedFunds budget",deepPopulateArray:["parent","type","portfolioManager","backupPortfolioManager"]},function(portfolio){masterPortfolio=portfolio,$scope.viewPortfolio=_.clone(portfolio),$scope.editPortfolio=_.clone(portfolio),_.find($scope.portfolios,function(chkItem){return _.get(chkItem,"parent")===portfolio._id})?$scope.editParents=[_.get(portfolio,"parent")]:$scope.editParents=_.filter($scope.portfolios,function(item){return item._id===portfolioId?!1:_.isNull(item.parent)||_.isUndefined(item.parent)?!0:!_.find($scope.portfolios,function(chkItem){return _.get(chkItem,"parent")===item._id&&_.find($scope.portfolios,function(chkItem2){return _.get(chkItem2,"parent")===chkItem._id})})}),$scope.error=null},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.update=function(){masterPortfolio.name=_.get($scope.editPortfolio,"name"),masterPortfolio.portfolioManager=allowNull($scope.editPortfolio.portfolioManager),masterPortfolio.backupPortfolioManager=allowNull($scope.editPortfolio.backupPortfolioManager),masterPortfolio.parent=editParent(_.get($scope.editPortfolio,"parent")),masterPortfolio.type=allowNull($scope.editPortfolio.type),masterPortfolio.earmarkedFunds=_.get($scope.editPortfolio,"earmarkedFunds"),masterPortfolio.ancestors=ancestorsArray(_.get($scope.editPortfolio,"parent")),masterPortfolio.$update(function(){$scope.portfolioList(),$scope.selectPortfolio(masterPortfolio._id),$scope.selectPortfolioForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(){_.find($scope.portfolios,function(chkItem){return _.get(chkItem,"parent")===masterPortfolio._id})?$scope.error="Only portfolios without children can be deleted":masterPortfolio.$remove(function(response){for(var i in $scope.portfolios)$scope.portfolios[i]===masterPortfolio&&$scope.portfolios.splice(i,1);$scope.portfolioList(),$scope.selectPortfolioForm("view"),$scope.editPortfolio=null},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.selectNewPortfolio=function(){$scope.selectPortfolioForm("new"),$scope.error=null,$scope.newPortfolio={},$scope.newPortfolio.name=null,$scope.newPortfolio.portfolioManager=null,$scope.newPortfolio.backupPortfolioManager=null,$scope.newPortfolio.type=null,$scope.newPortfolio.parent=null,$scope.newPortfolio.earmarkedFunds=null,$scope.newParents=_.filter($scope.portfolios,function(item){return _.isNull(item.parent)||_.isUndefined(item.parent)?!0:!_.find($scope.portfolios,function(chkItem){return _.get(chkItem,"parent")===item._id&&_.find($scope.portfolios,function(chkItem2){return _.get(chkItem2,"parent")===chkItem._id})})})},$scope.create=function(){var portfolio=new Portfolios({name:_.get($scope.newPortfolio,"name"),portfolioManager:_.get($scope.newPortfolio,"portfolioManager._id"),backupPortfolioManager:_.get($scope.newPortfolio,"backupPortfolioManager._id"),type:_.get($scope.newPortfolio,"type._id"),parent:_.get($scope.newPortfolio,"parent._id"),ancestors:ancestorsArray(_.get($scope.newPortfolio,"parent")),earmarkedFunds:_.get($scope.newPortfolio,"earmarkedFunds")});portfolio.$save(function(response){$scope.portfolioList(),$scope.selectPortfolio(response._id),$scope.selectPortfolioForm("view"),$scope.newPortfolio.name=null,$scope.newPortfolio.portfolioManager=null,$scope.newPortfolio.backupPortfolioManager=null,$scope.newPortfolio.type=null,$scope.newPortfolio.parent=null,$scope.newPortfolio.earmarkedFunds=null},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("portfolio-setup").factory("PortfolioTypes",["$resource",function($resource){return $resource("portfolio-types/:portfolioTypeId",{portfolioTypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("portfolio-setup").factory("Portfolios",["$resource",function($resource){return $resource("portfolios/:portfolioId",{portfolioId:"@_id"},{update:{method:"PUT"},createAssignedRole:{method:"POST",url:"portfolios/:portfolioId/stakeholders/:assignedGroupId/assignedRoles"},updateAssignedRole:{method:"PUT",url:"portfolios/:portfolioId/stakeholders/:assignedGroupId/assignedRoles/:assignedRoleId"},deleteAssignedRole:{method:"DELETE",url:"portfolios/:portfolioId/stakeholders/:assignedGroupId/assignedRoles/:assignedRoleId"}})}]),angular.module("portfolio-status-reports").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPortfolioStatusReports",{url:"/portfolio-status-reports",templateUrl:"modules/portfolio-status-reports/views/list-portfolio-status-reports.client.view.html"}).state("listPortfolioStatusReportsWithPortfolioId",{url:"/portfolio-status-reports/list/:portfolioId",templateUrl:"modules/portfolio-status-reports/views/list-portfolio-status-reports.client.view.html"}).state("createPortfolioStatusReport",{url:"/portfolio-status-reports/create",templateUrl:"modules/portfolio-status-reports/views/create-portfolio-status-report.client.view.html"}).state("editPortfolioStatusReport",{url:"/portfolio-status-reports/document/:portfolioStatusReportId/list/:portfolioId",templateUrl:"modules/portfolio-status-reports/views/edit-portfolio-status-report.client.view.html"})}]),angular.module("portfolio-status-reports").controller("PortfolioStatusReportsController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","Portfolios","$q","_","GateProcessTemplates","LogStatusIndicators","PortfolioStatusReports","$modal","StatusReportTypes",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,Portfolios,$q,_,GateProcessTemplates,LogStatusIndicators,PortfolioStatusReports,$modal,StatusReportTypes){$rootScope.staticMenu=!1;var vm=this;vm.isResolving=!1,vm.initError=[],vm.init=function(){vm.user=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForDelivery":!0,"process.assignmentConfirmed":!0},function(projects){vm.projects=projects},function(err){vm.initError.push(err.data.message)}),Portfolios.query(function(portfolios){if(vm.portfolios=portfolios,vm.portfolioTrees=createNodeTrees(portfolios),$stateParams.portfolioId){var requestedPortfolio=_.find(vm.portfolios,_.matchesProperty("_id",$stateParams.portfolioId));requestedPortfolio?vm.selectPortfolio(requestedPortfolio):vm.error="Cannot find Portfolio with id: "+$stateParams.portfolioId}},function(err){vm.initError.push(err.data.message)}),GateProcessTemplates.query(function(gateProcesses){vm.gateProcesses=gateProcesses},function(err){vm.initError.push(err.data.message)}),LogStatusIndicators.query(function(logStatusIndicators){vm.logStatusIndicators=logStatusIndicators},function(err){vm.initError.push(err.data.message)}),StatusReportTypes.query(function(res){vm.statusReportTypes=res},function(err){vm.initError.push(err.data.message)})};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};vm.userHasAuthorization=function(action,user,portfolio){return!0},vm.switchHeaderTitleForm={},vm.selectHeaderTitleForm=function(string,document){"view"===string&&(vm.switchHeaderTitleForm[document._id]="view"),"edit"===string&&(vm.switchHeaderTitleForm[document._id]="edit")},vm.switchHeaderTypeForm={},vm.selectHeaderTypeForm=function(string,document){"view"===string&&(vm.switchHeaderTypeForm[document._id]="view"),"edit"===string&&(vm.switchHeaderTypeForm[document._id]="edit")},vm.switchHeaderDateForm={},vm.selectHeaderDateForm=function(string,document){"view"===string&&(vm.switchHeaderDateForm[document._id]="view"),"edit"===string&&(vm.switchHeaderDateForm[document._id]="edit")},vm.switchOverallStatusForm={},vm.selectOverallStatusForm=function(string,document){"view"===string&&(vm.switchOverallStatusForm[document._id]="view"),"edit"===string&&(vm.switchOverallStatusForm[document._id]="edit")},vm.switchStatusAreaForm={},vm.selectStatusAreaForm=function(string,statusAreaReview){"view"===string&&(vm.switchStatusAreaForm[statusAreaReview._id]="view"),"edit"===string&&(vm.switchStatusAreaForm[statusAreaReview._id]="edit")},vm.sortChangeRequests=function(doc){return new Date(doc.updateDate)},vm.sortAppliedChanges=function(record){return new Date(record.created)},vm.getDaysChange=function(stringDate1,stringDate2){var millisecondsPerDay=864e5;return-(new Date(stringDate1)-new Date(stringDate2))/millisecondsPerDay},vm.showNewDocumentForm=!1,vm.documentDetails="header",vm.activeTab={},vm.selectPortfolio=function(portfolio){vm.error=null,vm.isResolving=!0,PortfolioStatusReports.query({"portfolio._id":portfolio._id},function(res){vm.isResolving=!1,vm.cancelNewDocument(),vm.selectedDocument=null,vm.selectedPortfolio=portfolio,vm.portfolioStatusReports=res},function(err){vm.isResolving=!1,vm.error=err})},vm.newHeaderDateOpened={},vm.openNewHeaderDate=function(document,$event){$event.preventDefault(),$event.stopPropagation(),vm.newHeaderDateOpened[document._id]=!0},vm.newDocument={},vm.createNewDocument=function(portfolio){var newDocument=new PortfolioStatusReports({portfolio:{_id:portfolio._id,name:portfolio.name},type:{_id:vm.newDocument.type&&vm.newDocument.type._id||null,name:vm.newDocument.type&&vm.newDocument.type.name||null},date:vm.newDocument.updateDate,title:vm.newDocument.title,previousReport:{_id:vm.newDocument.previousReport&&vm.newDocument.previousReport._id,title:vm.newDocument.previousReport&&vm.newDocument.previousReport.title,date:vm.newDocument.previousReport&&vm.newDocument.previousReport.date}});vm.error=null,vm.isResolving=!0,newDocument.$save(function(res){vm.isResolving=!1,vm.portfolioStatusReports.push(res),vm.newDocument={},vm.showNewDocumentForm=!1},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelNewDocument=function(){vm.error=null,vm.showNewDocumentForm=!1,vm.newDocument={}},vm.goToDocument=function(document,portfolio){$location.path("portfolio-status-reports/document/"+document._id+"/list/"+portfolio._id)},vm.initDocumentDetails=function(){vm.selectedPortfolioId=$stateParams.portfolioId,PortfolioStatusReports.get({portfolioStatusReportId:$stateParams.portfolioStatusReportId},function(res){vm.selectedDocument=res,vm.selectedDocumentStatusAreas=_.chunk(res.deliveryStatus.portfolioStatusAreas,2),console.log(res)},function(err){vm.error=err.data.message}),StatusReportTypes.query(function(res){vm.statusReportTypes=res},function(err){vm.initError.push(err.data.message)})},vm.goToList=function(selectedPortfolioId){$location.path("portfolio-status-reports/list/"+selectedPortfolioId)},vm.headerDateOpened={},vm.openHeaderDate=function(document,$event){$event.preventDefault(),$event.stopPropagation(),vm.headerDateOpened[document._id]=!0};var originalHeaderTitle={},originalHeaderType={},originalHeaderDate={};vm.editHeaderTitle=function(document){originalHeaderTitle[document._id]={title:document.title},vm.selectHeaderTitleForm("edit",document)},vm.editHeaderType=function(document){originalHeaderType[document._id]={type:document.type},vm.selectHeaderTypeForm("edit",document)},vm.editHeaderDate=function(document){originalHeaderDate[document._id]={date:document.date},vm.selectHeaderDateForm("edit",document)},vm.saveEditHeaderTitle=function(document){vm.error=null,vm.isResolving=!0,PortfolioStatusReports.updateHeader({portfolioStatusReportId:document._id},document,function(res){vm.isResolving=!1,vm.selectHeaderTitleForm("view",document)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.saveEditHeaderType=function(document){vm.error=null,vm.isResolving=!0,PortfolioStatusReports.updateHeader({portfolioStatusReportId:document._id},document,function(res){vm.isResolving=!1,vm.selectHeaderTypeForm("view",document)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.saveEditHeaderDate=function(document){vm.error=null,vm.isResolving=!0,PortfolioStatusReports.updateHeader({portfolioStatusReportId:document._id},document,function(res){vm.isResolving=!1,vm.selectHeaderDateForm("view",document)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditHeaderTitle=function(document){vm.error=null,document.title=originalHeaderTitle[document._id].title,vm.selectHeaderTitleForm("view",document)},vm.cancelEditHeaderType=function(document){vm.error=null,document.type=originalHeaderType[document._id].type,vm.selectHeaderTypeForm("view",document)},vm.cancelEditHeaderDate=function(document){vm.error=null,document.date=originalHeaderDate[document._id].date,vm.selectHeaderDateForm("view",document)},vm.deleteDocument=function(document){vm.error=null,vm.isResolving=!0,PortfolioStatusReports["delete"]({portfolioStatusReportId:document._id},document,function(res){vm.isResolving=!1,vm.portfolioStatusReports=_.without(vm.portfolioStatusReports,document),vm.cancelNewDocument(),vm.selectedDocument=null,$location.path("portfolio-status-reports")},function(err){vm.isResolving=!1,vm.error=err.data.message})};var originalOverallStatus={};vm.editOverallStatus=function(document){originalOverallStatus[document._id]={comment:document.deliveryStatus.overallStatus.comment},vm.selectOverallStatusForm("edit",document)},vm.saveEditOverallStatus=function(document){vm.error=null,vm.isResolving=!0,PortfolioStatusReports.updateOverallStatus({portfolioStatusReportId:document._id},document,function(res){vm.isResolving=!1,vm.selectOverallStatusForm("view",document)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditOverallStatus=function(document){vm.error=null,document.deliveryStatus.overallStatus.comment=originalOverallStatus[document._id].comment,vm.selectOverallStatusForm("view",document)};var originalStatusArea={};vm.editStatusArea=function(statusArea){originalStatusArea[statusArea._id]={comment:statusArea.comment},vm.selectStatusAreaForm("edit",statusArea)},vm.saveEditStatusArea=function(document,statusArea){vm.error=null,vm.isResolving=!0,PortfolioStatusReports.updateStatusArea({portfolioStatusReportId:document._id,portfolioStatusAreaId:statusArea._id},statusArea,function(res){vm.isResolving=!1,vm.selectStatusAreaForm("view",statusArea)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditStatusArea=function(statusArea){vm.error=null,statusArea.comment=originalStatusArea[statusArea._id].comment,vm.selectStatusAreaForm("view",statusArea)}}]),angular.module("portfolio-status-reports").factory("PortfolioStatusReports",["$resource",function($resource){return $resource("portfolio-status-reports/:portfolioStatusReportId",{portfolioStatusReportId:"@_id"},{update:{method:"PUT"},updateHeader:{method:"PUT",url:"portfolio-status-reports/:portfolioStatusReportId/header"},updateOverallStatus:{method:"PUT",url:"portfolio-status-reports/:portfolioStatusReportId/overallStatus"},updateStatusArea:{method:"PUT",url:"portfolio-status-reports/:portfolioStatusReportId/portfolioStatusAreas/:portfolioStatusAreaId"}})}]),angular.module("portfolio-status-updates").config(["$stateProvider",function($stateProvider){$stateProvider.state("portfolio-status-updates",{url:"/portfolio-status-updates",templateUrl:"modules/portfolio-status-updates/views/portfolio-status-updates.client.view.html"})}]),angular.module("portfolio-status-updates").controller("PortfolioStatusUpdatesController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","Portfolios","$q","_","GateProcessTemplates","LogStatusIndicators","PortfolioStatusUpdates",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,Portfolios,$q,_,GateProcessTemplates,LogStatusIndicators,PortfolioStatusUpdates){$rootScope.staticMenu=!1,$scope.isResolving=!1,$scope.initError=[],$scope.init=function(){$scope.user=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForDelivery":!0,"process.assignmentConfirmed":!0},function(projects){$scope.projects=projects},function(err){$scope.initError.push(err.data.message)}),Portfolios.query(function(portfolios){$scope.portfolios=portfolios,$scope.portfolioTrees=createNodeTrees(portfolios)},function(err){$scope.initError.push(err.data.message)}),GateProcessTemplates.query(function(gateProcesses){$scope.gateProcesses=gateProcesses},function(err){$scope.initError.push(err.data.message)}),LogStatusIndicators.query(function(logStatusIndicators){$scope.logStatusIndicators=logStatusIndicators},function(err){$scope.initError.push(err.data.message)})};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};$scope.userHasAuthorization=function(action,user,portfolio){return!0},$scope.switchHeaderForm={},$scope.selectHeaderForm=function(string,document){"view"===string&&($scope.switchHeaderForm[document._id]="view"),"edit"===string&&($scope.switchHeaderForm[document._id]="edit")},$scope.switchBudgetForm={},$scope.selectBudgetForm=function(string,document){"view"===string&&($scope.switchBudgetForm[document._id]="view"),"edit"===string&&($scope.switchBudgetForm[document._id]="edit")},$scope.switchOverallStatusForm={},$scope.selectOverallStatusForm=function(string,document){"view"===string&&($scope.switchOverallStatusForm[document._id]="view"),"edit"===string&&($scope.switchOverallStatusForm[document._id]="edit")},$scope.switchStatusAreaForm={},$scope.selectStatusAreaForm=function(string,statusAreaReview){"view"===string&&($scope.switchStatusAreaForm[statusAreaReview._id]="view"),"edit"===string&&($scope.switchStatusAreaForm[statusAreaReview._id]="edit")},$scope.sortChangeRequests=function(doc){return new Date(doc.updateDate)},$scope.sortAppliedChanges=function(record){return new Date(record.created)},$scope.getDaysChange=function(stringDate1,stringDate2){var millisecondsPerDay=864e5;return-(new Date(stringDate1)-new Date(stringDate2))/millisecondsPerDay},$scope.showNewDocumentForm=!1,$scope.documentDetails="header",$scope.activeTab={},$scope.selectPortfolio=function(portfolio){$scope.cancelNewDocument(),$scope.selectedDocument=null,$scope.selectedPortfolio=portfolio,$scope.error=null,$scope.isResolving=!0,PortfolioStatusUpdates.query({portfolio:portfolio._id},function(res){$scope.isResolving=!1,$scope.portfolioStatusUpdates=res},function(err){$scope.isResolving=!1,$scope.error=err})},$scope.newHeaderDateOpened={},$scope.openNewHeaderDate=function(portfolio,$event){$event.preventDefault(),$event.stopPropagation(),$scope.newHeaderDateOpened[portfolio._id]=!0},$scope.newDocument={},$scope.createNewDocument=function(portfolio){var newDocument=new PortfolioStatusUpdates({portfolio:portfolio._id,updateDate:$scope.newDocument.updateDate,title:$scope.newDocument.title});$scope.error=null,$scope.isResolving=!0,newDocument.$save(function(res){$scope.isResolving=!1,$scope.portfolioStatusUpdates.push(res),$scope.newDocument={},$scope.showNewDocumentForm=!1,$scope.selectDocument(res)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelNewDocument=function(){$scope.error=null,$scope.showNewDocumentForm=!1,$scope.newDocument={}},$scope.selectDocument=function(doc){$scope.selectedDocument=doc},$scope.headerDateOpened={},$scope.openHeaderDate=function(document,$event){$event.preventDefault(),$event.stopPropagation(),$scope.headerDateOpened[document._id]=!0};var originalHeader={};$scope.editHeader=function(statusUpdate){originalHeader[statusUpdate._id]={updateDate:statusUpdate.updateDate,title:statusUpdate.title,description:statusUpdate.description},$scope.selectHeaderForm("edit",statusUpdate)},$scope.saveEditHeader=function(portfolio,statusUpdate){$scope.error=null,$scope.isResolving=!0,PortfolioStatusUpdates.updateHeader({portfolioStatusUpdateId:statusUpdate._id},statusUpdate,function(res){$scope.isResolving=!1,$scope.selectHeaderForm("view",statusUpdate)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditHeader=function(statusUpdate){$scope.error=null,statusUpdate.updateDate=originalHeader[statusUpdate._id].updateDate,statusUpdate.title=originalHeader[statusUpdate._id].title,statusUpdate.description=originalHeader[statusUpdate._id].description,$scope.selectHeaderForm("view",statusUpdate)},$scope.deleteDocument=function(statusUpdate){$scope.error=null,$scope.isResolving=!0,PortfolioStatusUpdates["delete"]({portfolioStatusUpdateId:statusUpdate._id},statusUpdate,function(res){$scope.isResolving=!1,$scope.portfolioStatusUpdates=_.without($scope.portfolioStatusUpdates,statusUpdate),$scope.cancelNewDocument(),$scope.selectedDocument=null},function(err){$scope.isResolving=!1,$scope.error=err.data.message})};var originalOverallStatus={};$scope.editOverallStatus=function(statusUpdate){originalOverallStatus[statusUpdate._id]={newStatus:statusUpdate.portfolioStatus.overallStatusReview.newStatus,newComment:statusUpdate.portfolioStatus.overallStatusReview.newComment},$scope.selectOverallStatusForm("edit",statusUpdate);
},$scope.saveEditOverallStatus=function(statusUpdate){statusUpdate.status._id=statusUpdate.status&&statusUpdate.status._id||null,statusUpdate.status.name=statusUpdate.status&&statusUpdate.status.name||null,statusUpdate.status.color=statusUpdate.status&&statusUpdate.status.color||null,$scope.error=null,$scope.isResolving=!0,PortfolioStatusUpdates.updateOverallDeliveryStatus({portfolioStatusUpdateId:statusUpdate._id},statusUpdate,function(res){$scope.isResolving=!1,$scope.selectOverallStatusForm("view",statusUpdate)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditOverallStatus=function(statusUpdate){$scope.error=null,statusUpdate.portfolioStatus.overallStatusReview.newStatus=originalOverallStatus[statusUpdate._id].newStatus,statusUpdate.portfolioStatus.overallStatusReview.newComment=originalOverallStatus[statusUpdate._id].newComment,$scope.selectOverallStatusForm("view",statusUpdate)};var originalStatusAreaReview={};$scope.editStatusArea=function(statusAreaReview){originalStatusAreaReview[statusAreaReview._id]=_.cloneDeep(statusAreaReview),$scope.selectStatusAreaForm("edit",statusAreaReview)},$scope.saveEditStatusArea=function(statusUpdate,statusAreaReview){statusAreaReview.projectStatusArea.currentRecord.status._id=statusAreaReview.projectStatusArea.currentRecord.status&&statusAreaReview.projectStatusArea.currentRecord.status._id||null,statusAreaReview.projectStatusArea.currentRecord.status.color=statusAreaReview.projectStatusArea.currentRecord.status&&statusAreaReview.projectStatusArea.currentRecord.status.color||null,statusAreaReview.projectStatusArea.currentRecord.status.name=statusAreaReview.projectStatusArea.currentRecord.status&&statusAreaReview.projectStatusArea.currentRecord.status.name||null,$scope.error=null,$scope.isResolving=!0,PortfolioStatusUpdates.updateStatusAreaReview({portfolioStatusUpdateId:statusUpdate._id,statusAreaReviewId:statusAreaReview._id},statusAreaReview,function(res){$scope.isResolving=!1,$scope.selectStatusAreaForm("view",statusAreaReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditStatusArea=function(statusAreaReview){$scope.error=null,statusAreaReview.newStatus=originalStatusAreaReview[statusAreaReview._id].newStatus,statusAreaReview.newComment=originalStatusAreaReview[statusAreaReview._id].newComment,$scope.selectStatusAreaForm("view",statusAreaReview)},$scope.submit=function(statusUpdate){$scope.error=null,$scope.isResolving=!0,PortfolioStatusUpdates.submit({portfolioStatusUpdateId:statusUpdate._id},statusUpdate,function(res){$scope.isResolving=!1,statusUpdate.approval=res.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.approve=function(statusUpdate){$scope.error=null,$scope.isResolving=!0,PortfolioStatusUpdates.approve({portfolioStatusUpdateId:statusUpdate._id},statusUpdate,function(res){$scope.isResolving=!1,statusUpdate.approval=res.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.reject=function(statusUpdate){$scope.error=null,$scope.isResolving=!0,PortfolioStatusUpdates.reject({portfolioStatusUpdateId:statusUpdate._id},statusUpdate,function(res){$scope.isResolving=!1,statusUpdate.approval=res.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.draft=function(statusUpdate){$scope.error=null,$scope.isResolving=!0,PortfolioStatusUpdates.draft({portfolioStatusUpdateId:statusUpdate._id},statusUpdate,function(res){$scope.isResolving=!1,statusUpdate.approval=res.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message})}}]),angular.module("portfolio-status-updates").factory("PortfolioStatusUpdates",["$resource",function($resource){return $resource("portfolio-status-updates/:portfolioStatusUpdateId",{portfolioStatusUpdateId:"@_id"},{updateHeader:{method:"PUT",url:"portfolio-status-updates/:portfolioStatusUpdateId/header"},updateOverallDeliveryStatus:{method:"PUT",url:"portfolio-status-updates/:portfolioStatusUpdateId/overallDeliveryStatus"},updateStatusAreaReview:{method:"PUT",url:"portfolio-status-updates/:portfolioStatusUpdateId/status-area-reviews/:statusAreaReviewId"},submit:{method:"PUT",url:"portfolio-status-updates/:portfolioStatusUpdateId/submit"},approve:{method:"PUT",url:"portfolio-status-updates/:portfolioStatusUpdateId/approve"},reject:{method:"PUT",url:"portfolio-status-updates/:portfolioStatusUpdateId/reject"},draft:{method:"PUT",url:"portfolio-status-updates/:portfolioStatusUpdateId/draft"}})}]),angular.module("priority-assignment").config(["$stateProvider",function($stateProvider){$stateProvider.state("prioritization-overview",{url:"/prioritization-overview",templateUrl:"modules/priority-assignment/views/prioritization-overview.client.view.html"}).state("priority-assignment",{url:"/priority-assignment",templateUrl:"modules/priority-assignment/views/priority-assignment.client.view.html"})}]),angular.module("priority-assignment").controller("PrioritizationOverviewController",["$rootScope","$scope","$stateParams","$location","Authentication","PriorityAssignment","PriorityGroups","Priorities","PriorityValues","Portfolios","StrategyNodes","_","$q","$sce",function($rootScope,$scope,$stateParams,$location,Authentication,PriorityAssignment,PriorityGroups,Priorities,PriorityValues,Portfolios,StrategyNodes,_,$q,$sce){$rootScope.staticMenu=!1,$scope.initError=[],$scope.oneAtATime=!0,$scope.typeOfChart="number";var projectPrioritizationPortfolio=[],projectPrioritizationStrategy=[];$scope.init=function(){Portfolios.query(function(portfolios){$scope.portfolios=portfolios,$scope.portfolioTrees=createNodeTrees(portfolios)},function(err){$scope.initError.push({message:err.data.message})}),StrategyNodes.query(function(res){$scope.strategyNodes=res,$scope.strategyTrees=createNodeTrees(res)},function(err){$scope.initError.push({message:err.data.message})}),PriorityGroups.query(function(res){$scope.priorityGroups=res},function(err){$scope.initError.push(err.data.message)}),Priorities.query(function(res){$scope.priorities=res},function(err){$scope.initError.push(err.data.message)}),PriorityValues.query(function(res){$scope.priorityValues=res},function(err){$scope.initError.push(err.data.message)}),PriorityAssignment.prioritizationOverviewPortfolio(function(res){projectPrioritizationPortfolio=res},function(err){$scope.initError.push(err.data.message)}),PriorityAssignment.prioritizationOverviewStrategy(function(res){projectPrioritizationStrategy=res},function(err){$scope.initError.push(err.data.message)})};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};$scope.tooltipView="error",$scope.createTooltipView=function(projects){var stringArray=_.map(projects,function(project){return $sce.trustAsHtml("<div>"+project.identification.name+'</div><hr style="margin: 0.2%">')});$scope.tooltipView=stringArray.join("")},$scope.orderTable="countPriorityValue",$scope.selectPortfolio=function(portfolio){return"all"===portfolio?($scope.selectedPortfolio={name:"All"},void($scope.projectPrioritizationPortfolioView=_.filter(projectPrioritizationPortfolio,function(item){return item.all===!0}))):"unassigned"===portfolio?($scope.selectedPortfolio={name:"Unassigned"},void($scope.projectPrioritizationPortfolioView=_.filter(projectPrioritizationPortfolio,function(item){return item.all===!1&&!item.portfolio}))):($scope.selectedPortfolio=portfolio,void($scope.projectPrioritizationPortfolioView=_.filter(projectPrioritizationPortfolio,function(item){return item.portfolio&&item.portfolio===portfolio._id})))},$scope.selectStrategyNode=function(strategyNode){return"all"===strategyNode?($scope.selectedStrategyNode={name:"All"},void($scope.projectPrioritizationStrategyView=_.filter(projectPrioritizationStrategy,function(item){return item.all===!0}))):"unassigned"===strategyNode?($scope.selectedStrategyNode={name:"Unassigned"},void($scope.projectPrioritizationStrategyView=_.filter(projectPrioritizationStrategy,function(item){return item.all===!1&&!item.parent}))):($scope.selectedStrategyNode=strategyNode,void($scope.projectPrioritizationStrategyView=_.filter(projectPrioritizationStrategy,function(item){return item.parent&&item.parent===strategyNode._id})))}}]),angular.module("priority-assignment").controller("PriorityAssignmentController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","PriorityGroups","Priorities","PriorityValues","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,PriorityGroups,Priorities,PriorityValues,_,$q){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){$scope.userData=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForPrioritization":!0},function(projects){$scope.projects=projects},function(err){$scope.initError.push(err.data.message)}),PriorityGroups.query(function(groups){$scope.priorityGroups=groups},function(err){$scope.initError.push(err.data.message)}),Priorities.query(function(priorities){$scope.priorities=priorities},function(err){$scope.initError.push(err.data.message)}),PriorityValues.query(function(values){$scope.priorityValues=values},function(err){$scope.initError.push(err.data.message)}),$scope.showPriorityValue={}},$scope.userHasAuthorization=function(action,userData,project){var userIsSuperhero,userIsProjectManager,userIsPortfolioManager;return"edit"===action?(userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsProjectManager=userData._id===project.identification.projectManager||userData._id===project.identification.backupProjectManager,project.portfolio&&(userIsPortfolioManager=userData._id===project.portfolio.portfolioManager||userData._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsProjectManager||userIsPortfolioManager):void 0};$scope.switchProjectForm={},$scope.selectProjectForm=function(string){"default"===string&&($scope.switchProjectForm="default"),"new"===string&&($scope.switchProjectForm="new"),"view"===string&&($scope.switchProjectForm="view"),"edit"===string&&($scope.switchProjectForm="edit")},$scope.switchPriorityForm={},$scope.selectPriorityForm=function(assignedPriority,string){"view"===string&&($scope.switchPriorityForm[assignedPriority._id]="view"),"edit"===string&&($scope.switchPriorityForm[assignedPriority._id]="edit")};var originalPriorityAssignment;$scope.selectProject=function(project){originalPriorityAssignment={},Projects.get({projectId:project._id,retPropertiesString:"user created selection identification prioritization portfolio",deepPopulateArray:["portfolio","prioritization.group","prioritization.priorities.priority"]},function(res){$scope.selectedProject=res},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelViewProject=function(){$scope.selectedProject=null,originalPriorityAssignment=null},$scope.selectPriorityAssignment=function(assignedPriority){originalPriorityAssignment[assignedPriority._id]=_.clone(assignedPriority),$scope.selectPriorityForm(assignedPriority,"edit")},$scope.saveAssignedPriority=function(project,assignedGroup,assignedPriority){Projects.updatePriorityAssignment({projectId:project._id,assignedGroupId:assignedGroup._id,assignedPriorityId:assignedPriority._id},{valueId:assignedPriority.priorityValue},function(res){$scope.selectPriorityForm(assignedPriority,"view")},function(err){$scope.error=err.data.message})},$scope.cancelEditAssignedPriority=function(assignedPriority){assignedPriority.priorityValue=originalPriorityAssignment[assignedPriority._id].priorityValue,$scope.selectPriorityForm(assignedPriority,"view")}}]),angular.module("priority-assignment").factory("PriorityAssignment",["$resource",function($resource){return $resource("priority-assignment",{},{prioritizationOverviewPortfolio:{method:"GET",isArray:!0,url:"priority-assignment/prioritizationOverviewPortfolio"},prioritizationOverviewStrategy:{method:"GET",isArray:!0,url:"priority-assignment/prioritizationOverviewStrategy"}})}]),angular.module("priority-setup").config(["$stateProvider",function($stateProvider){$stateProvider.state("priority-setup",{url:"/priority-setup",templateUrl:"modules/priority-setup/views/priority-setup.client.view.html"})}]),angular.module("priority-setup").controller("PrioritySetupController",["$rootScope","$scope","$stateParams","$location","Authentication","PriorityValues","PriorityGroups","Priorities","$q","_",function($rootScope,$scope,$stateParams,$location,Authentication,PriorityValues,PriorityGroups,Priorities,$q,_){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){Priorities.query(function(priorities){$scope.priorities=priorities},function(err){$scope.initError.push(err.data.message)}),PriorityGroups.query(function(groups){$scope.priorityGroups=groups},function(err){$scope.initError.push(err.data.message)}),PriorityValues.query(function(values){$scope.priorityValues=values},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.dragControlListeners={orderChanged:function(event){for(var i=0;i<$scope.priorityValues.length;i++)$scope.updateValue($scope.priorityValues[i])}},$scope.selectValueForm=function(string){"view"===string&&($scope.switchValueForm="view"),"edit"===string&&($scope.switchValueForm="edit")},$scope.findValues=function(){$scope.initError=[],PriorityValues.query(function(values){$scope.priorityValues=values},function(err){$scope.initError.push(err.data.message)})};var originalValue;$scope.selectValue=function(value){$scope.error=null,$scope.selectValueForm("view"),$scope.priorityValue=value,originalValue=_.clone(value)},$scope.updateValue=function(value){$scope.error=null,value.position=_.indexOf($scope.priorityValues,value)+1,value.$update(function(response){$scope.selectValueForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditValue=function(value){value.name=originalValue.name,value.numericalValue=originalValue.numericalValue,value.description=originalValue.description,$scope.selectValueForm("view")},$scope.removeValue=function(value){$scope.error=null,value.$remove(function(response){$scope.priorityValues=_.without($scope.priorityValues,value);for(var i=0;i<$scope.priorityValues.length;i++)$scope.priorityValues[i].position>value.position&&$scope.updateValue($scope.priorityValues[i]);$scope.priorityValue=null,$scope.selectValueForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createValue=function(){$scope.error=null;var priorityValue=new PriorityValues({name:"New priority value",numericalValue:0,position:$scope.priorityValues.length+1});priorityValue.$save(function(response){$scope.findValues(),$scope.selectValueForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchGroupForm={},$scope.selectGroupForm=function(group,string){"view"===string&&($scope.switchGroupForm[group._id]="view"),"new"===string&&($scope.switchGroupForm[group._id]="new"),"edit"===string&&($scope.switchGroupForm[group._id]="edit")},$scope.switchPriorityForm={},$scope.selectPriorityForm=function(priority,string){"view"===string&&($scope.switchPriorityForm[priority._id]="view"),"edit"===string&&($scope.switchPriorityForm[priority._id]="edit")},$scope.groupList=function(){$scope.initError=[],PriorityGroups.query(function(groups){$scope.priorityGroups=groups},function(err){$scope.initError.push(err.data.message)})},$scope.createGroup=function(){$scope.error=null;var priorityGroup=new PriorityGroups({name:"New priority group",description:"new group description",priorities:[]});priorityGroup.$save(function(response){$scope.groupList()},function(errorResponse){$scope.error=errorResponse.data.message})};var originalEditGroup={};$scope.selectGroup=function(group){originalEditGroup[group._id]=_.clone(group),$scope.error=null,$scope.selectGroupForm(group,"edit")},$scope.updateGroup=function(group){group.$update(function(response){$scope.selectGroupForm(group,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditGroup=function(group){$scope.error=null,group.name=originalEditGroup[group._id].name,group.description=originalEditGroup[group._id].description,$scope.selectGroupForm(group,"view")},$scope.removeGroup=function(group){$scope.error=null,group.$remove(function(response){$scope.groupList()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createPriority=function(group){$scope.error=null;var priority=new Priorities({name:"New priority",description:"New priority description"});priority.$save({groupId:group._id},function(res){group.priorities.push(res)},function(errorResponse){$scope.error=errorResponse.data.message})};var originalEditPriority={};$scope.selectEditPriority=function(group,priority){originalEditPriority[priority._id]=_.clone(priority),$scope.selectPriorityForm(priority,"edit")},$scope.updatePriority=function(group,priority){Priorities.update(priority,function(response){$scope.selectPriorityForm(priority,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditPriority=function(priority){$scope.error=null,priority.name=originalEditPriority[priority._id].name,priority.description=originalEditPriority[priority._id].description,$scope.selectPriorityForm(priority,"view")},$scope.removePriority=function(group,priority){$scope.error=null,Priorities.remove({groupId:group._id},priority,function(res){group.priorities=_.without(group.priorities,priority)},function(err){$scope.error=err.data.message})}}]),angular.module("priority-setup").factory("Priorities",["$resource",function($resource){return $resource("priorities/:priorityId",{priorityId:"@_id"},{update:{method:"PUT"}})}]),angular.module("priority-setup").factory("PriorityGroups",["$resource",function($resource){return $resource("priority-groups/:priorityGroupId",{priorityGroupId:"@_id"},{update:{method:"PUT"}})}]),angular.module("priority-setup").factory("PriorityValues",["$resource",function($resource){return $resource("priority-values/:priorityValueId",{priorityValueId:"@_id"},{update:{method:"PUT"}})}]),angular.module("project-change-requests").run(["Menus",function(Menus){}]),angular.module("project-change-requests").config(["$stateProvider",function($stateProvider){$stateProvider.state("ProjectChangeRequests",{url:"/project-change-requests",templateUrl:"modules/project-change-requests/views/project-change-requests.client.view.html"}).state("project-change-requests-id",{url:"/project-change-requests/:projectChangeRequestId/projects/:projectId/gates/:gateId",templateUrl:"modules/project-change-requests/views/project-change-requests.client.view.html"})}]),angular.module("project-change-requests").controller("ProjectChangeRequestsController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","Portfolios","$q","_","GateProcessTemplates","LogReasons","ChangeRequestStates","LogPriorities","LogStatusIndicators",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,Portfolios,$q,_,GateProcessTemplates,LogReasons,ChangeRequestStates,LogPriorities,LogStatusIndicators){$rootScope.staticMenu=!1,$scope.isResolving=!1,$scope.initError=[],$scope.init=function(){$scope.user=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForDelivery":!0,"process.assignmentConfirmed":!0},function(projects){if($scope.projects=_.filter(projects,function(project){return"unassigned"!==project.process.assignmentType}),$stateParams.projectId){var foundProject=_.find($scope.projects,_.matchesProperty("_id",$stateParams.projectId));foundProject?$scope.selectProject(foundProject):$scope.error="Cannot find project "+$stateParams.projectId}},function(err){$scope.initError.push(err.data.message)}),Portfolios.query(function(portfolios){$scope.portfolios=portfolios},function(err){$scope.initError.push(err.data.message)}),GateProcessTemplates.query(function(gateProcesses){$scope.gateProcesses=gateProcesses},function(err){$scope.initError.push(err.data.message)}),LogReasons.query(function(logReasons){$scope.logReasons=logReasons},function(err){$scope.initError.push(err.data.message)}),ChangeRequestStates.query(function(changeRequestStates){$scope.changeRequestStates=changeRequestStates},function(err){$scope.initError.push(err.data.message)}),LogPriorities.query(function(logPriorities){$scope.logPriorities=logPriorities},function(err){$scope.initError.push(err.data.message)}),LogStatusIndicators.query(function(logStatusIndicators){$scope.logStatuses=logStatusIndicators},function(err){$scope.initError.push(err.data.message)})},$scope.userHasAuthorization=function(action,user,project){var userIsSuperhero,userIsProjectManager,userIsPortfolioManager;return"edit"===action&&user&&project?(userIsSuperhero=!!_.some(user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsProjectManager=user._id===project.identification.projectManager||user._id===project.identification.backupProjectManager,project.portfolio&&(userIsPortfolioManager=user._id===project.portfolio.portfolioManager||user._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsProjectManager||userIsPortfolioManager):"approve"===action&&user&&project?(userIsSuperhero=!!_.some(user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),project.portfolio&&(userIsPortfolioManager=user._id===project.portfolio.portfolioManager||user._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsPortfolioManager):void 0},$scope.switchHeaderForm={},$scope.selectHeaderForm=function(string,document){"view"===string&&($scope.switchHeaderForm[document._id]="view"),"edit"===string&&($scope.switchHeaderForm[document._id]="edit")},$scope.switchBudgetForm={},$scope.selectBudgetForm=function(string,document){"view"===string&&($scope.switchBudgetForm[document._id]="view"),"edit"===string&&($scope.switchBudgetForm[document._id]="edit")},$scope.switchStatusForm={},$scope.selectStatusForm=function(string,document){"view"===string&&($scope.switchStatusForm[document._id]="view"),"edit"===string&&($scope.switchStatusForm[document._id]="edit")},$scope.switchOutcomeReviewForm={},$scope.selectOutcomeReviewForm=function(string,outcomeReview){"view"===string&&($scope.switchOutcomeReviewForm[outcomeReview._id]="view"),"edit"===string&&($scope.switchOutcomeReviewForm[outcomeReview._id]="edit")},$scope.switchBaselineDurationForm={},$scope.selectBaselineDurationForm=function(string,baselineDuration){"view"===string&&($scope.switchBaselineDurationForm[baselineDuration._id]="view"),"edit"===string&&($scope.switchBaselineDurationForm[baselineDuration._id]="edit")},$scope.switchBaselineCostForm={},$scope.selectBaselineCostForm=function(string,baselineCost){"view"===string&&($scope.switchBaselineCostForm[baselineCost._id]="view"),"edit"===string&&($scope.switchBaselineCostForm[baselineCost._id]="edit")},$scope.switchBaselineCompletionForm={},$scope.selectBaselineCompletionForm=function(string,baselineCompletion){"view"===string&&($scope.switchBaselineCompletionForm[baselineCompletion._id]="view"),"edit"===string&&($scope.switchBaselineCompletionForm[baselineCompletion._id]="edit")},$scope.switchActualDurationForm={},$scope.selectActualDurationForm=function(string,actualDuration){"view"===string&&($scope.switchActualDurationForm[actualDuration._id]="view"),"edit"===string&&($scope.switchActualDurationForm[actualDuration._id]="edit")},$scope.switchActualCostForm={},$scope.selectActualCostForm=function(string,actualCost){"view"===string&&($scope.switchActualCostForm[actualCost._id]="view"),"edit"===string&&($scope.switchActualCostForm[actualCost._id]="edit")},$scope.switchActualCompletionForm={},$scope.selectActualCompletionForm=function(string,actualCompletion){"view"===string&&($scope.switchActualCompletionForm[actualCompletion._id]="view"),"edit"===string&&($scope.switchActualCompletionForm[actualCompletion._id]="edit")},$scope.sortChangeRequests=function(doc){return new Date(doc.raisedOnDate)},$scope.sortAppliedChanges=function(record){return new Date(record.created)},$scope.getDaysChange=function(stringDate1,stringDate2){var millisecondsPerDay=864e5;return-(new Date(stringDate1)-new Date(stringDate2))/millisecondsPerDay},$scope.showNewDocumentForm=!1,$scope.documentDetails="header",$scope.activeTab={},$scope.selectProject=function(project){$scope.error=null,$scope.cancelNewDocument(),$scope.selectedGate=null,$scope.selectedDocument=null,$scope.selectedProject=project},$scope.selectGate=function(gate){$scope.error=null,$scope.cancelNewDocument(),$scope.selectedDocument=null,$scope.selectedGate=gate},$scope.newHeaderDateOpened={},$scope.openNewHeaderDate=function(gate,$event){$event.preventDefault(),$event.stopPropagation(),$scope.newHeaderDateOpened[gate._id]=!0},$scope.newDocument={},$scope.createNewDocument=function(project,gate){$scope.error=null;var newDocument={raisedOnDate:$scope.newDocument.raisedOnDate,title:$scope.newDocument.title};Projects.createChangeRequest({projectId:project._id,projectGateId:gate._id},newDocument,function(res){$scope.isResolving=!1,gate.projectChangeRequests.push(res),$scope.newDocument={},$scope.showNewDocumentForm=!1,$scope.selectDocument(res)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelNewDocument=function(){$scope.error=null,$scope.showNewDocumentForm=!1,$scope.newDocument={}},$scope.selectDocument=function(doc){$scope.selectedDocument=doc},$scope.headerDateOpened={},$scope.openHeaderDate=function(document,$event){$event.preventDefault(),$event.stopPropagation(),$scope.headerDateOpened[document._id]=!0};var originalHeader={};$scope.editHeader=function(changeRequest){originalHeader[changeRequest._id]={raisedOnDate:changeRequest.raisedOnDate,title:changeRequest.title,description:changeRequest.description,reason:changeRequest.reason,state:changeRequest.state,priority:changeRequest.priority},$scope.selectHeaderForm("edit",changeRequest)},$scope.saveEditHeader=function(project,gate,changeRequest){$scope.error=null,$scope.isResolving=!0,Projects.updateChangeRequestHeader({projectId:project._id,projectGateId:gate._id,projectChangeRequestId:changeRequest._id},changeRequest,function(res){$scope.isResolving=!1,$scope.selectHeaderForm("view",changeRequest)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditHeader=function(changeRequest){$scope.error=null,changeRequest.raisedOnDate=originalHeader[changeRequest._id].raisedOnDate,changeRequest.title=originalHeader[changeRequest._id].title,changeRequest.description=originalHeader[changeRequest._id].description,changeRequest.reason=originalHeader[changeRequest._id].reason,changeRequest.state=originalHeader[changeRequest._id].state,changeRequest.priority=originalHeader[changeRequest._id].priority,$scope.selectHeaderForm("view",changeRequest)},$scope.deleteDocument=function(project,gate,changeRequest){$scope.error=null,$scope.isResolving=!0,Projects.deleteChangeRequest({projectId:project._id,projectGateId:gate._id,projectChangeRequestId:changeRequest._id},changeRequest,function(res){$scope.isResolving=!1,gate.projectChangeRequests=_.without(gate.projectChangeRequests,changeRequest),$scope.cancelNewDocument(),$scope.selectedDocument=null},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.baselineDateOpened={},$scope.openBaselineDate=function(document,$event){$event.preventDefault(),$event.stopPropagation(),$scope.baselineDateOpened[document._id]=!0},$scope.estimateDateOpened={},$scope.openEstimateDate=function(document,$event){$event.preventDefault(),$event.stopPropagation(),$scope.estimateDateOpened[document._id]=!0},$scope.actualDateOpened={},$scope.openActualDate=function(document,$event){$event.preventDefault(),$event.stopPropagation(),$scope.actualDateOpened[document._id]=!0};var originalStatus={};$scope.editStatus=function(changeRequest){originalStatus[changeRequest._id]={baselineDeliveryDate:changeRequest.changeStatus.currentRecord.baselineDeliveryDate,estimateDeliveryDate:changeRequest.changeStatus.currentRecord.estimateDeliveryDate,actualDeliveryDate:changeRequest.changeStatus.currentRecord.actualDeliveryDate,completed:changeRequest.changeStatus.currentRecord.completed,status:changeRequest.changeStatus.currentRecord.status,comment:changeRequest.changeStatus.currentRecord.comment},$scope.selectStatusForm("edit",changeRequest)},$scope.saveEditStatus=function(project,gate,changeRequest){$scope.error=null,$scope.isResolving=!0,Projects.updateChangeRequestStatus({projectId:project._id,projectGateId:gate._id,projectChangeRequestId:changeRequest._id},changeRequest,function(res){$scope.isResolving=!1,changeRequest.changeStatus=res.changeStatus,$scope.selectStatusForm("view",changeRequest)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditStatus=function(changeRequest){$scope.error=null,changeRequest.changeStatus.currentRecord.baselineDeliveryDate=originalStatus[changeRequest._id].baselineDeliveryDate,changeRequest.changeStatus.currentRecord.estimateDeliveryDate=originalStatus[changeRequest._id].estimateDeliveryDate,changeRequest.changeStatus.currentRecord.actualDeliveryDate=originalStatus[changeRequest._id].actualDeliveryDate,changeRequest.changeStatus.currentRecord.completed=originalStatus[changeRequest._id].completed,changeRequest.changeStatus.currentRecord.status=originalStatus[changeRequest._id].status,changeRequest.changeStatus.currentRecord.comment=originalStatus[changeRequest._id].comment,$scope.selectStatusForm("view",changeRequest)};var originalGateBudget={};$scope.editBudget=function(changeRequest){originalGateBudget[changeRequest._id]={newAmount:changeRequest.budgetReview.newAmount},$scope.selectBudgetForm("edit",changeRequest)},$scope.saveEditBudget=function(project,gate,changeRequest){$scope.error=null,$scope.isResolving=!0,Projects.updateGateBudgetReviewForCR({projectId:project._id,projectGateId:gate._id,projectChangeRequestId:changeRequest._id},changeRequest,function(res){$scope.isResolving=!1,originalGateBudget[changeRequest._id].newAmount=changeRequest.budgetReview.newAmount,$scope.selectBudgetForm("view",changeRequest)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditBudget=function(changeRequest){$scope.error=null,changeRequest.budgetReview.newAmount=originalGateBudget[changeRequest._id].newAmount,$scope.selectBudgetForm("view",changeRequest)},$scope.baselineDurationDateOpened={},$scope.openBaselineDurationDate=function(baselineDurationReview,$event){$event.preventDefault(),$event.stopPropagation(),$scope.baselineDurationDateOpened[baselineDurationReview._id]=!0};var originalBaselineDurationReview={};$scope.editBaselineDuration=function(baselineDurationReview){originalBaselineDurationReview[baselineDurationReview._id]=_.cloneDeep(baselineDurationReview),$scope.selectBaselineDurationForm("edit",baselineDurationReview)},$scope.saveEditBaselineDuration=function(project,gate,changeRequest,baselineDurationReview){$scope.isResolving=!0,$scope.error=null,Projects.updateBaselineDurationReviewForCR({projectId:project._id,projectGateId:gate._id,projectChangeRequestId:changeRequest._id,baselineDurationReviewId:baselineDurationReview._id},baselineDurationReview,function(res){$scope.isResolving=!1,
originalBaselineDurationReview[baselineDurationReview._id].newDate=baselineDurationReview.newDate,$scope.selectBaselineDurationForm("view",baselineDurationReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditBaselineDuration=function(baselineDurationReview){$scope.error=null,baselineDurationReview.newDate=originalBaselineDurationReview[baselineDurationReview._id].newDate,$scope.selectBaselineDurationForm("view",baselineDurationReview)},$scope.actualDurationDateOpened={},$scope.openActualDurationDate=function(actualDurationReview,$event){$event.preventDefault(),$event.stopPropagation(),$scope.actualDurationDateOpened[actualDurationReview._id]=!0};var originalActualDurationReview={};$scope.editActualDuration=function(actualDurationReview){$scope.error=null,originalActualDurationReview[actualDurationReview._id]=_.cloneDeep(actualDurationReview),$scope.selectActualDurationForm("edit",actualDurationReview)},$scope.saveEditActualDuration=function(project,gate,changeRequest,actualDurationReview){$scope.isResolving=!0,$scope.error=null,Projects.updateActualDurationReviewForCR({projectId:project._id,projectGateId:gate._id,projectChangeRequestId:changeRequest._id,actualDurationReviewId:actualDurationReview._id},actualDurationReview,function(res){$scope.isResolving=!1,originalActualDurationReview[actualDurationReview._id].newDate=actualDurationReview.newDate,$scope.selectActualDurationForm("view",actualDurationReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditActualDuration=function(actualDurationReview){$scope.error=null,actualDurationReview.newDate=originalActualDurationReview[actualDurationReview._id].newDate,$scope.selectActualDurationForm("view",actualDurationReview)};var originalBaselineCostReview={};$scope.editBaselineCost=function(baselineCostReview){originalBaselineCostReview[baselineCostReview._id]=_.cloneDeep(baselineCostReview),$scope.selectBaselineCostForm("edit",baselineCostReview)},$scope.saveEditBaselineCost=function(project,gate,changeRequest,baselineCostReview){$scope.error=null,$scope.isResolving=!0,Projects.updateBaselineCostReviewForCR({projectId:project._id,projectGateId:gate._id,projectChangeRequestId:changeRequest._id,baselineCostReviewId:baselineCostReview._id},baselineCostReview,function(res){$scope.isResolving=!1,originalBaselineCostReview[baselineCostReview._id].newCost=baselineCostReview.newCost,$scope.selectBaselineCostForm("view",baselineCostReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditBaselineCost=function(baselineCostReview){$scope.error=null,baselineCostReview.newCost=originalBaselineCostReview[baselineCostReview._id].newCost,$scope.selectBaselineCostForm("view",baselineCostReview)};var originalActualCostReview={};$scope.editActualCost=function(actualCostReview){originalActualCostReview[actualCostReview._id]=_.cloneDeep(actualCostReview),$scope.selectActualCostForm("edit",actualCostReview)},$scope.saveEditActualCost=function(project,gate,changeRequest,actualCostReview){$scope.error=null,$scope.isResolving=!0,Projects.updateActualCostReviewForCR({projectId:project._id,projectGateId:gate._id,projectChangeRequestId:changeRequest._id,actualCostReviewId:actualCostReview._id},actualCostReview,function(res){$scope.isResolving=!1,originalActualCostReview[actualCostReview._id].newCost=actualCostReview.newCost,$scope.selectActualCostForm("view",actualCostReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditActualCost=function(actualCostReview){$scope.error=!0,actualCostReview.newCost=originalActualCostReview[actualCostReview._id].newCost,$scope.selectActualCostForm("view",actualCostReview)};var originalBaselineCompletionReview={};$scope.editBaselineCompletion=function(baselineCompletionReview){originalBaselineCompletionReview[baselineCompletionReview._id]=_.cloneDeep(baselineCompletionReview),$scope.selectBaselineCompletionForm("edit",baselineCompletionReview)},$scope.saveEditBaselineCompletion=function(project,gate,changeRequest,baselineCompletionReview){$scope.error=null,$scope.isResolving=!0,Projects.updateBaselineCompletionReviewForCR({projectId:project._id,projectGateId:gate._id,projectChangeRequestId:changeRequest._id,baselineCompletionReviewId:baselineCompletionReview._id},baselineCompletionReview,function(res){$scope.isResolving=!1,originalBaselineCompletionReview[baselineCompletionReview._id].newCompletion=baselineCompletionReview.newCompletion,$scope.selectBaselineCompletionForm("view",baselineCompletionReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditBaselineCompletion=function(baselineCompletionReview){$scope.error=null,baselineCompletionReview.newCompletion=originalBaselineCompletionReview[baselineCompletionReview._id].newCompletion,$scope.selectBaselineCompletionForm("view",baselineCompletionReview)};var originalActualCompletionReview={};$scope.editActualCompletion=function(actualCompletionReview){originalActualCompletionReview[actualCompletionReview._id]=_.cloneDeep(actualCompletionReview),$scope.selectActualCompletionForm("edit",actualCompletionReview)},$scope.saveEditActualCompletion=function(project,gate,changeRequest,actualCompletionReview){$scope.error=null,$scope.isResolving=!0,Projects.updateActualCompletionReviewForCR({projectId:project._id,projectGateId:gate._id,projectChangeRequestId:changeRequest._id,actualCompletionReviewId:actualCompletionReview._id},actualCompletionReview,function(res){$scope.isResolving=!1,originalActualCompletionReview[actualCompletionReview._id].newCompletion=actualCompletionReview.newCompletion,$scope.selectActualCompletionForm("view",actualCompletionReview)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditActualCompletion=function(actualCompletionReview){$scope.error=null,actualCompletionReview.newCompletion=originalActualCompletionReview[actualCompletionReview._id].newCompletion,$scope.selectActualCompletionForm("view",actualCompletionReview)},$scope.submitMissingFields={};var setSubmitMissingFields=function(changeRequest,gate){var missingFields=[];return changeRequest.budgetReview.newAmount||missingFields.push("Budget amount"),_.each(changeRequest.performances.duration.baselineDurationReviews,function(performanceReview){performanceReview.newDate||missingFields.push("Baseline date for "+performanceReview.baselineDuration.targetGate.name)}),_.each(changeRequest.performances.duration.actualDurationReviews,function(performanceReview){!performanceReview.newDate&&gate.gateState.currentRecord.completed&&missingFields.push("Actual date for "+performanceReview.baselineDuration.targetGate.name)}),_.each(changeRequest.performances.cost.baselineCostReviews,function(performanceReview){performanceReview.newCost||missingFields.push("Baseline cost for "+performanceReview.baselineCost.targetGate.name)}),_.each(changeRequest.performances.cost.actualCostReviews,function(performanceReview){!performanceReview.newCost&&gate.gateState.currentRecord.completed&&missingFields.push("Actual cost for "+performanceReview.baselineCost.targetGate.name)}),_.each(changeRequest.performances.completion.baselineCompletionReviews,function(performanceReview){performanceReview.newCompletion||missingFields.push("Baseline completion for "+performanceReview.baselineCompletion.targetGate.name)}),_.each(changeRequest.performances.completion.actualCompletionReviews,function(performanceReview){!performanceReview.newCompletion&&gate.gateState.currentRecord.completed&&missingFields.push("Actual completion for "+performanceReview.baselineCompletion.targetGate.name)}),missingFields};$scope.dateConsistencyErrors={};var checkDateConsistency=function(editedChangeRequest,editedGate,project){var gates=project.process.gates,dateConsistencyErrors=[],thisGate_BaselineDurationReview_NewDate=_.find(editedChangeRequest.performances.duration.baselineDurationReviews,function(performanceReview){return performanceReview.baselineDuration.targetGate._id===editedGate._id}).newDate;thisGate_BaselineDurationReview_NewDate=thisGate_BaselineDurationReview_NewDate&&new Date(thisGate_BaselineDurationReview_NewDate);var thisGate_ActualDurationReview_NewDate=_.find(editedChangeRequest.performances.duration.actualDurationReviews,function(performanceReview){return performanceReview.actualDuration.targetGate._id===editedGate._id}).newDate;return thisGate_ActualDurationReview_NewDate=thisGate_ActualDurationReview_NewDate&&new Date(thisGate_ActualDurationReview_NewDate),_.each(gates,function(gate){if(gate.position<editedGate.position&&editedGate._id!==project.process.startGate){var previousGate_BaselineDuration_CurrentDate=_.find(gate.performances.duration.baselineDurations,function(performance){return performance.targetGate._id===gate._id}).currentRecord.gateDate;previousGate_BaselineDuration_CurrentDate=previousGate_BaselineDuration_CurrentDate&&new Date(previousGate_BaselineDuration_CurrentDate);var previousGate_ActualDuration_CurrentDate=_.find(gate.performances.duration.actualDurations,function(performance){return performance.targetGate._id===gate._id}).currentRecord.gateDate;previousGate_ActualDuration_CurrentDate=previousGate_ActualDuration_CurrentDate&&new Date(previousGate_ActualDuration_CurrentDate),previousGate_BaselineDuration_CurrentDate&&thisGate_BaselineDurationReview_NewDate&&previousGate_BaselineDuration_CurrentDate>thisGate_BaselineDurationReview_NewDate&&dateConsistencyErrors.push(editedGate.name+" Baseline date "+thisGate_BaselineDurationReview_NewDate.toDateString()+" cannot be earlier than previous gate "+gate.name+" "+previousGate_BaselineDuration_CurrentDate.toDateString()),previousGate_ActualDuration_CurrentDate&&thisGate_ActualDurationReview_NewDate&&previousGate_ActualDuration_CurrentDate>thisGate_ActualDurationReview_NewDate&&dateConsistencyErrors.push(editedGate.name+" Actual date "+thisGate_ActualDurationReview_NewDate.toDateString()+" cannot be earlier than previous gate "+gate.name+" "+previousGate_ActualDuration_CurrentDate.toDateString())}if(gate.position>editedGate.position&&editedGate._id!==project.process.endGate){var nextGate_BaselineDuration_CurrentDate=_.find(gate.performances.duration.baselineDurations,function(performance){return performance.targetGate._id===gate._id}).currentRecord.gateDate;nextGate_BaselineDuration_CurrentDate=nextGate_BaselineDuration_CurrentDate&&new Date(nextGate_BaselineDuration_CurrentDate);var nextGate_ActualDuration_CurrentDate=_.find(gate.performances.duration.actualDurations,function(performance){return performance.targetGate._id===gate._id}).currentRecord.gateDate;nextGate_ActualDuration_CurrentDate=nextGate_ActualDuration_CurrentDate&&new Date(nextGate_ActualDuration_CurrentDate),nextGate_BaselineDuration_CurrentDate&&thisGate_BaselineDurationReview_NewDate&&thisGate_BaselineDurationReview_NewDate>nextGate_BaselineDuration_CurrentDate&&dateConsistencyErrors.push(editedGate.name+" Baseline date "+thisGate_BaselineDurationReview_NewDate.toDateString()+" cannot be later than next gate "+gate.name+" "+nextGate_BaselineDuration_CurrentDate.toDateString()),nextGate_ActualDuration_CurrentDate&&thisGate_ActualDurationReview_NewDate&&thisGate_ActualDurationReview_NewDate>nextGate_ActualDuration_CurrentDate&&dateConsistencyErrors.push(editedGate.name+" Actual date "+thisGate_ActualDurationReview_NewDate.toDateString()+" cannot be later than next gate "+gate.name+" "+nextGate_ActualDuration_CurrentDate.toDateString())}}),dateConsistencyErrors};$scope.submit=function(project,gate,changeRequest){$scope.submitMissingFields[changeRequest._id]=setSubmitMissingFields(changeRequest,gate),$scope.dateConsistencyErrors[changeRequest._id]=checkDateConsistency(changeRequest,gate,project),$scope.submitMissingFields[changeRequest._id].length>0||$scope.dateConsistencyErrors[changeRequest._id].length>0||($scope.error=null,$scope.isResolving=!0,Projects.submitChangeRequest({projectId:project._id,projectGateId:gate._id,projectChangeRequestId:changeRequest._id},changeRequest,function(res){$scope.isResolving=!1,changeRequest.approval=res.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message}))},$scope.approve=function(project,gate,changeRequest){$scope.submitMissingFields[changeRequest._id]=setSubmitMissingFields(changeRequest,gate),$scope.dateConsistencyErrors[changeRequest._id]=checkDateConsistency(changeRequest,gate,project),$scope.submitMissingFields[changeRequest._id].length>0||$scope.dateConsistencyErrors[changeRequest._id].length>0||($scope.error=null,$scope.isResolving=!0,Projects.approveChangeRequest({projectId:project._id,projectGateId:gate._id,projectChangeRequestId:changeRequest._id},changeRequest,function(res){$scope.isResolving=!1,changeRequest.approval=res.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message}))},$scope.reject=function(project,gate,changeRequest){$scope.error=null,$scope.isResolving=!0,Projects.rejectChangeRequest({projectId:project._id,projectGateId:gate._id,projectChangeRequestId:changeRequest._id},changeRequest,function(res){$scope.isResolving=!1,changeRequest.approval=res.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.draft=function(project,gate,changeRequest){$scope.error=null,$scope.isResolving=!0,Projects.draftChangeRequest({projectId:project._id,projectGateId:gate._id,projectChangeRequestId:changeRequest._id},changeRequest,function(res){$scope.isResolving=!1,changeRequest.approval=res.approval},function(err){$scope.isResolving=!1,$scope.error=err.data.message})}}]),angular.module("project-identification").config(["$stateProvider",function($stateProvider){$stateProvider.state("project-identification",{url:"/project-identification",templateUrl:"modules/project-identification/views/project-identification.client.view.html"}).state("project-identification-id",{url:"/projects/:projectId",templateUrl:"modules/project-identification/views/project-identification.client.view.html"})}]),angular.module("project-identification").controller("ProjectIdentificationController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","Portfolios","GateProcessTemplates","Subusers","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,Portfolios,GateProcessTemplates,Subusers,_,$q){$rootScope.staticMenu=!1,$scope.initErrors=[],$scope.init=function(){$scope.userData=Authentication.user,Subusers.query(function(users){$scope.users=users,$scope.projectManagers=_.filter(users,function(user){return _.find(user.roles,function(role){return"projectManager"===role})})},function(err){$scope.initErrors.push(err.data.message)}),Projects.query({"selection.active":!0},function(projects){if($scope.projects=projects,$stateParams.projectId){var requestedProject=_.find($scope.projects,_.matchesProperty("_id",$stateParams.projectId));requestedProject?$scope.selectProject(requestedProject):$scope.error="Project not found"}},function(err){$scope.initErrors.push(err.data.message)}),Portfolios.query(function(res){$scope.portfolios=res},function(err){$scope.initErrors.push(err.data.message)}),GateProcessTemplates.query(function(res){$scope.gateProcesses=res},function(err){$scope.initErrors.push(err.data.message)})},$scope.userHasAuthorization=function(action,userData,project){var userIsSuperhero,userIsProjectManager,userIsPortfolioManager;return"edit"===action?(userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsProjectManager=userData._id===project.identification.projectManager||userData._id===project.identification.backupProjectManager,project.portfolio&&(userIsPortfolioManager=userData._id===project.portfolio.portfolioManager||userData._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsProjectManager||userIsPortfolioManager):"new"===action?(userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsPortfolioManager=!!_.some(userData.roles,function(role){return"portfolioManager"===role}),userIsSuperhero||userIsPortfolioManager):void 0},$scope.openStartDatePickerNew=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.startDatePickerOpenedNew=!0},$scope.openEndDatePickerNew=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.endDatePickerOpenedNew=!0},$scope.openStartDatePickerEdit=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.startDatePickerOpenedEdit=!0},$scope.openEndDatePickerEdit=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.endDatePickerOpenedEdit=!0};$scope.switchProjectForm={},$scope.selectProjectForm=function(string){"default"===string&&($scope.switchProjectForm="default"),"new"===string&&($scope.switchProjectForm="new"),"view"===string&&($scope.switchProjectForm="view"),"edit"===string&&($scope.switchProjectForm="edit")};var allowNull=function(obj){return obj?obj._id:null};$scope.newProject={},$scope.createProject=function(){var newProject=new Projects({parent:null,portfolio:null,identification:{idReference:$scope.newProject.idReference,name:$scope.newProject.name,description:$scope.newProject.description,reqStartDate:$scope.newProject.reqStartDate,reqEndDate:$scope.newProject.reqEndDate,earmarkedFunds:$scope.newProject.earmarkedFunds,projectManager:allowNull($scope.newProject.projectManager),backupProjectManager:allowNull($scope.newProject.backupProjectManager)},categorization:[],prioritization:[],selection:{active:!0},costs:[],benefits:[],qualitativeAnalysis:[],riskAnalysis:[],stakeholders:[],process:null});newProject.$save(function(res){$scope.projects.push(newProject),$scope.newProject={},$scope.selectProject(newProject)},function(err){$scope.error=err.data.message})},$scope.cancelNewProject=function(){$scope.newProject={},$scope.selectProjectForm("default")};var originalProject={};$scope.selectProject=function(project){$scope.error=null,originalProject[project._id]=_.cloneDeep(project),$scope.selectedProject=project,$scope.selectProjectForm("view")},$scope.cancelViewProject=function(){originalProject={},$scope.selectedProject=null,$scope.selectProjectForm("default")},$scope.saveEditProject=function(project){var projectCopy=_.cloneDeep(project);projectCopy.process=allowNull(project.process),projectCopy.portfolio=allowNull(project.portfolio),Projects.update(projectCopy,function(res){$scope.selectProject(project)},function(err){$scope.error=err.data.message})},$scope.cancelEditProject=function(project){project.identification=originalProject[project._id].identification,$scope.selectProject(project)},$scope.deleteProject=function(project){Projects.remove({},{_id:project._id},function(res){$scope.projects=_.without($scope.projects,project),$scope.selectedProject=null,$scope.selectProjectForm("default")},function(err){$scope.error=err.data.message})}}]),angular.module("project-identification").factory("Projects",["$resource",function($resource){return $resource("projects/:projectId",{projectId:"@_id"},{update:{method:"PUT"},updateStrategyAssignment:{method:"PUT",url:"projects/:projectId/strategyAssignment"},updatePortfolioAssignment:{method:"PUT",url:"projects/:projectId/portfolioAssignment"},updateCategoryAssignment:{method:"PUT",url:"projects/:projectId/categoryAssignment/:assignedGroupId/:assignedCategoryId"},updatePriorityAssignment:{method:"PUT",url:"projects/:projectId/priorityAssignment/:assignedGroupId/:assignedPriorityId"},updateImpactAssignment:{method:"PUT",url:"projects/:projectId/impactAssignment/:assignedGroupId/:assignedImpactId"},updateRiskAssignment:{method:"PUT",url:"projects/:projectId/riskAssignment/:assignedCategoryId/:assignedRiskId"},createAssignedRole:{method:"POST",url:"projects/:projectId/stakeholders/:assignedGroupId/assignedRoles"},updateAssignedRole:{method:"PUT",url:"projects/:projectId/stakeholders/:assignedGroupId/assignedRoles/:assignedRoleId"},deleteAssignedRole:{method:"DELETE",url:"projects/:projectId/stakeholders/:assignedGroupId/assignedRoles/:assignedRoleId"},confirmAssignment:{method:"PUT",url:"projects/:projectId/confirmAssignment"},customAssignment:{method:"PUT",url:"projects/:projectId/customAssignment"},standardAssignment:{method:"PUT",url:"projects/:projectId/standardAssignment"},removeAssignment:{method:"PUT",url:"projects/:projectId/removeAssignment"},updateProcess:{method:"PUT",url:"projects/:projectId/updateProcess"},createGate:{method:"PUT",url:"projects/:projectId/createGate"},updateGateHeader:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/updateHeader"},updateGatePosition:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/updatePosition"},deleteGate:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/delete"},createOutcome:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/createOutcome"},updateOutcome:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-outcomes/:projectOutcomeId/update"},deleteOutcome:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-outcomes/:projectOutcomeId/delete"},submitProcess:{method:"PUT",url:"projects/:projectId/submitProcess"},approveProcess:{method:"PUT",url:"projects/:projectId/approveProcess"},rejectProcess:{method:"PUT",url:"projects/:projectId/rejectProcess"},draftProcess:{method:"PUT",url:"projects/:projectId/draftProcess"},createGateReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/createGateReview"},deleteGateReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/delete"},updateGateReviewHeader:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/header"},updateGateStateReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/state"},updateGateBudgetReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/budget"},updateOutcomeScoreReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/outcome-score-reviews/:outcomeScoreReviewId"},updateActualCompletionReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/actual-completion-reviews/:actualCompletionReviewId"},updateActualCostReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/actual-cost-reviews/:actualCostReviewId"},updateActualDurationReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/actual-duration-reviews/:actualDurationReviewId"},updateEstimateCompletionReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/estimate-completion-reviews/:estimateCompletionReviewId"},updateEstimateCostReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/estimate-cost-reviews/:estimateCostReviewId"},updateEstimateDurationReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/estimate-duration-reviews/:estimateDurationReviewId"},updateBaselineCompletionReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/baseline-completion-reviews/:baselineCompletionReviewId"},updateBaselineCostReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/baseline-cost-reviews/:baselineCostReviewId"},updateBaselineDurationReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/baseline-duration-reviews/:baselineDurationReviewId"},submitGateReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/submit"},approveGateReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/approve"},rejectGateReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/reject"},draftGateReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/gate-reviews/:gateReviewId/draft"},createChangeRequest:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/createChangeRequest"},deleteChangeRequest:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-change-requests/:projectChangeRequestId/delete"},updateChangeRequestHeader:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-change-requests/:projectChangeRequestId/header"},updateChangeRequestStatus:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-change-requests/:projectChangeRequestId/status"},updateGateBudgetReviewForCR:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-change-requests/:projectChangeRequestId/budget"},updateActualCompletionReviewForCR:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-change-requests/:projectChangeRequestId/actual-completion-reviews/:actualCompletionReviewId"},updateActualCostReviewForCR:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-change-requests/:projectChangeRequestId/actual-cost-reviews/:actualCostReviewId"},updateActualDurationReviewForCR:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-change-requests/:projectChangeRequestId/actual-duration-reviews/:actualDurationReviewId"},updateBaselineCompletionReviewForCR:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-change-requests/:projectChangeRequestId/baseline-completion-reviews/:baselineCompletionReviewId"},updateBaselineCostReviewForCR:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-change-requests/:projectChangeRequestId/baseline-cost-reviews/:baselineCostReviewId"},updateBaselineDurationReviewForCR:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-change-requests/:projectChangeRequestId/baseline-duration-reviews/:baselineDurationReviewId"},submitChangeRequest:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-change-requests/:projectChangeRequestId/submit"},approveChangeRequest:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-change-requests/:projectChangeRequestId/approve"},rejectChangeRequest:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-change-requests/:projectChangeRequestId/reject"},draftChangeRequest:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-change-requests/:projectChangeRequestId/draft"},createStatusUpdate:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/createStatusUpdate"},deleteStatusUpdate:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-status-updates/:projectStatusUpdateId/delete"},updateStatusUpdateHeader:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-status-updates/:projectStatusUpdateId/header"},updateOverallDeliveryStatus:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-status-updates/:projectStatusUpdateId/overallDeliveryStatus"},updateStatusAreaReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-status-updates/:projectStatusUpdateId/status-area-reviews/:statusAreaReviewId"},updateOutcomeStatusReview:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-status-updates/:projectStatusUpdateId/outcome-status-reviews/:outcomeStatusReviewId"},updateEstimateCompletionReviewForSU:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-status-updates/:projectStatusUpdateId/estimate-completion-reviews/:estimateCompletionReviewId"},updateEstimateCostReviewForSU:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-status-updates/:projectStatusUpdateId/estimate-cost-reviews/:estimateCostReviewId"},updateEstimateDurationReviewForSU:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-status-updates/:projectStatusUpdateId/estimate-duration-reviews/:estimateDurationReviewId"},submitStatusUpdate:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-status-updates/:projectStatusUpdateId/submit"},approveStatusUpdate:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-status-updates/:projectStatusUpdateId/approve"},rejectStatusUpdate:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-status-updates/:projectStatusUpdateId/reject"},draftStatusUpdate:{method:"PUT",url:"projects/:projectId/project-gates/:projectGateId/project-status-updates/:projectStatusUpdateId/draft"}})}]),angular.module("project-issues").run(["Menus",function(Menus){}]),angular.module("project-issues").config(["$stateProvider",function($stateProvider){$stateProvider.state("project-issues",{url:"/project-issues",templateUrl:"modules/project-issues/views/project-issues.client.view.html"})}]),angular.module("project-issues").controller("ProjectIssuesController",["$rootScope","$scope","$stateParams","$location","$q","$modal","$log","_","Authentication","Portfolios","Projects","ProjectIssues","GateProcessTemplates","LogReasons","IssueStates","LogPriorities","LogStatusIndicators",function($rootScope,$scope,$stateParams,$location,$q,$modal,$log,_,Authentication,Portfolios,Projects,ProjectIssues,GateProcessTemplates,LogReasons,IssueStates,LogPriorities,LogStatusIndicators){$rootScope.staticMenu=!1,$scope.isResolving=!1,$scope.initErrors=[];var logReasons=[],issueStates=[],logPriorities=[],logStatuses=[];$scope.init=function(){$scope.user=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForDelivery":!0},function(res){$scope.projects=res},function(err){$scope.initErrors.push(err.data.message)}),Portfolios.query(function(portfolios){$scope.portfolios=portfolios},function(err){$scope.initErrors.push(err.data.message)}),GateProcessTemplates.query(function(gateProcesses){$scope.gateProcesses=gateProcesses},function(err){$scope.initErrors.push(err.data.message)}),LogReasons.query(function(res){logReasons=res,$scope.logReasons=res},function(err){$scope.initErrors.push(err.data.message)}),IssueStates.query(function(res){issueStates=res,$scope.issueStates=res},function(err){$scope.initErrors.push(err.data.message)}),LogPriorities.query(function(res){logPriorities=res,$scope.logPriorities=res},function(err){$scope.initErrors.push(err.data.message)}),LogStatusIndicators.query(function(res){logStatuses=res,$scope.logStatuses=res},function(err){$scope.initErrors.push(err.data.message)})},$scope.userHasAuthorization=function(action,user,project){var userIsSuperhero,userIsProjectManager,userIsPortfolioManager;return"edit"===action&&user&&project?(userIsSuperhero=!!_.some(user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsProjectManager=user._id===project.identification.projectManager||user._id===project.identification.backupProjectManager,project.portfolio&&(userIsPortfolioManager=user._id===project.portfolio.portfolioManager||user._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsProjectManager||userIsPortfolioManager):void 0};var allowNull=function(obj){return obj?obj._id:null};$scope.sortProjectIssues=function(projectIssue){return new Date(projectIssue.raisedOnDate)},$scope.completionFilterArray=[{name:"Completed",flag:!0},{name:"Not completed",flag:!1}],$scope.selectProject=function(project){$scope.cancelNewProjectIssue(),$scope.selectedProject=null,$scope.projectIssues=null,$scope.selectedProjectIssue=null,$scope.selectedProject=project,$scope.error=null,$scope.isResolving=!0,ProjectIssues.query({project:project._id},function(res){$scope.isResolving=!1,$scope.projectIssues=res;
},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelViewProject=function(){$scope.error=null,$scope.selectedProject=null,$scope.projectIssues=null},$scope.newProjectIssueRaisedOnDateOpened={},$scope.openNewProjectIssueRaisedOnDate=function(project,$event){$event.preventDefault(),$event.stopPropagation(),$scope.newProjectIssueRaisedOnDateOpened[project._id]=!0},$scope.newProjectIssue={},$scope.createNewProjectIssue=function(user,project){var newProjectIssue=new ProjectIssues({project:project._id,raisedOnDate:$scope.newProjectIssue.raisedOnDate,title:$scope.newProjectIssue.title});$scope.error=null,$scope.isResolving=!0,newProjectIssue.$save(function(res){$scope.isResolving=!1,res.project=_.cloneDeep(project),$scope.projectIssues.push(res),$scope.newProjectIssue={},$scope.selectProjectIssue(user,_.find($scope.projectIssues,_.matchesProperty("_id",res._id)),project),$scope.showNewProjectIssueForm=!1},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelNewProjectIssue=function(){$scope.error=null,$scope.newProjectIssue={},$scope.showNewProjectIssueForm=!1};var modalUpdateIssue=function(size,user,issue,project,logReasons,issueStates,logPriorities,logStatuses){$modal.open({templateUrl:"modules/project-issues/views/edit-project-issue.client.view.html",controller:function($scope,$modalInstance,user,issue,project,logReasons,issueStates,logPriorities,logStatuses){$scope.user=user,$scope.originalProjectIssue=_.cloneDeep(issue),$scope.selectedProjectIssue=issue,$scope.selectedProject=project,$scope.logReasons=logReasons,$scope.issueStates=issueStates,$scope.logPriorities=logPriorities,$scope.logStatuses=logStatuses,$scope.cancelModal=function(){$modalInstance.dismiss()}},size:size,resolve:{user:function(){return user},issue:function(){return issue},project:function(){return project},logReasons:function(){return logReasons},issueStates:function(){return issueStates},logPriorities:function(){return logPriorities},logStatuses:function(){return logStatuses}},backdrop:"static",keyboard:!1})};$scope.selectProjectIssue=function(user,issue,project){modalUpdateIssue("lg",user,issue,project,logReasons,issueStates,logPriorities,logStatuses)},$scope.projectIssueDetails="header",$scope.selectHeaderForm=function(string){"view"===string&&($scope.switchHeaderForm="view"),"edit"===string&&($scope.switchHeaderForm="edit")},$scope.selectStatusForm=function(string){"view"===string&&($scope.switchStatusForm="view"),"edit"===string&&($scope.switchStatusForm="edit")},$scope.openHeaderDate=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.headerDateOpened=!0},$scope.editHeader=function(){$scope.selectHeaderForm("edit")},$scope.saveEditHeader=function(projectIssue,originalProjectIssue){var copyProjectIssue=_.cloneDeep(projectIssue);copyProjectIssue.project=_.get(copyProjectIssue.project,"_id"),copyProjectIssue.reason=allowNull(copyProjectIssue.reason),copyProjectIssue.priority=allowNull(copyProjectIssue.priority),copyProjectIssue.state=allowNull(copyProjectIssue.state),copyProjectIssue.statusReview.currentRecord.status=allowNull(copyProjectIssue.statusReview.currentRecord.status),$scope.error=null,$scope.isResolving=!0,ProjectIssues.updateHeader({projectIssueId:copyProjectIssue._id},copyProjectIssue,function(res){$scope.isResolving=!1,originalProjectIssue.raisedOnDate=projectIssue.raisedOnDate,originalProjectIssue.title=projectIssue.title,originalProjectIssue.description=projectIssue.description,originalProjectIssue.state=projectIssue.state,originalProjectIssue.reason=projectIssue.reason,originalProjectIssue.priority=projectIssue.priority,$scope.selectHeaderForm("view")},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditHeader=function(projectIssue,originalProjectIssue){$scope.error=null,projectIssue.raisedOnDate=originalProjectIssue.raisedOnDate,projectIssue.title=originalProjectIssue.title,projectIssue.description=originalProjectIssue.description,projectIssue.state=originalProjectIssue.state,projectIssue.reason=originalProjectIssue.reason,projectIssue.priority=originalProjectIssue.priority,$scope.selectHeaderForm("view")},$scope.deleteProjectIssue=function(projectIssue){$scope.error=null,$scope.isResolving=!0,ProjectIssues.remove({projectIssueId:projectIssue._id},projectIssue,function(res){$scope.isResolving=!1,$scope.projectIssues=_.without($scope.projectIssues,projectIssue)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.openBaselineDeliveryDate=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.baselineDeliveryDateOpened=!0},$scope.openEstimateDeliveryDate=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.estimateDeliveryDateOpened=!0},$scope.openActualDeliveryDate=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.actualDeliveryDateOpened=!0},$scope.editStatus=function(){$scope.selectStatusForm("edit")},$scope.saveEditStatus=function(projectIssue,originalProjectIssue){var copyProjectIssue=_.cloneDeep(projectIssue);copyProjectIssue.project=_.get(copyProjectIssue.project,"_id"),copyProjectIssue.reason=allowNull(copyProjectIssue.reason),copyProjectIssue.priority=allowNull(copyProjectIssue.priority),copyProjectIssue.state=allowNull(copyProjectIssue.state),copyProjectIssue.statusReview.currentRecord.status=allowNull(copyProjectIssue.statusReview.currentRecord.status),$scope.error=null,$scope.isResolving=!0,ProjectIssues.updateStatus({projectIssueId:copyProjectIssue._id},copyProjectIssue,function(res){$scope.isResolving=!1,originalProjectIssue.statusReview.currentRecord.baselineDeliveryDate=projectIssue.statusReview.currentRecord.baselineDeliveryDate,originalProjectIssue.statusReview.currentRecord.estimateDeliveryDate=projectIssue.statusReview.currentRecord.estimateDeliveryDate,originalProjectIssue.statusReview.currentRecord.actualDeliveryDate=projectIssue.statusReview.currentRecord.actualDeliveryDate,originalProjectIssue.statusReview.currentRecord.status=projectIssue.statusReview.currentRecord.status,originalProjectIssue.statusReview.currentRecord.completed=projectIssue.statusReview.currentRecord.completed,originalProjectIssue.statusReview.currentRecord.statusComment=projectIssue.statusReview.currentRecord.statusComment,$scope.selectStatusForm("view")},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditStatus=function(projectIssue,originalProjectIssue){$scope.error=null,projectIssue.statusReview.currentRecord.baselineDeliveryDate=originalProjectIssue.statusReview.currentRecord.baselineDeliveryDate,projectIssue.statusReview.currentRecord.estimateDeliveryDate=originalProjectIssue.statusReview.currentRecord.estimateDeliveryDate,projectIssue.statusReview.currentRecord.actualDeliveryDate=originalProjectIssue.statusReview.currentRecord.actualDeliveryDate,projectIssue.statusReview.currentRecord.status=originalProjectIssue.statusReview.currentRecord.status,projectIssue.statusReview.currentRecord.completed=originalProjectIssue.statusReview.currentRecord.completed,projectIssue.statusReview.currentRecord.statusComment=originalProjectIssue.statusReview.currentRecord.statusComment,$scope.selectStatusForm("view")}}]),angular.module("project-issues").factory("ProjectIssues",["$resource",function($resource){return $resource("project-issues/:projectIssueId",{projectIssueId:"@_id"},{update:{method:"PUT"},updateHeader:{method:"PUT",url:"project-issues/:projectIssueId/header"},updateStatus:{method:"PUT",url:"project-issues/:projectIssueId/status"}})}]),angular.module("project-milestones").run(["Menus",function(Menus){}]),angular.module("project-milestones").config(["$stateProvider",function($stateProvider){$stateProvider.state("project-milestones",{url:"/project-milestones",templateUrl:"modules/project-milestones/views/project-milestones.client.view.html"})}]),angular.module("project-milestones").controller("ProjectMilestoneController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","Portfolios","$q","_","GateProcessTemplates","ProjectMilestones","ProjectMilestoneTypes","MilestoneStates","LogStatusIndicators",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,Portfolios,$q,_,GateProcessTemplates,ProjectMilestones,ProjectMilestoneTypes,MilestoneStates,LogStatusIndicators){$rootScope.staticMenu=!1,$scope.isResolving=!1,$scope.initErrors=[],$scope.init=function(){$scope.user=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForDelivery":!0},function(res){$scope.projects=res},function(err){$scope.initErrors.push(err.data.message)}),Portfolios.query(function(portfolios){$scope.portfolios=portfolios},function(err){$scope.initErrors.push(err.data.message)}),GateProcessTemplates.query(function(gateProcesses){$scope.gateProcesses=gateProcesses},function(err){$scope.initErrors.push(err.data.message)}),ProjectMilestoneTypes.query(function(projectMilestoneTypes){$scope.projectMilestoneTypes=projectMilestoneTypes},function(err){$scope.initErrors.push(err.data.message)}),MilestoneStates.query(function(milestoneStates){$scope.milestoneStates=milestoneStates},function(err){$scope.initErrors.push(err.data.message)}),LogStatusIndicators.query(function(logStatusIndicators){$scope.logStatuses=logStatusIndicators},function(err){$scope.initErrors.push(err.data.message)})},$scope.userHasAuthorization=function(action,user,project){var userIsSuperhero,userIsProjectManager,userIsPortfolioManager;return"edit"===action&&user&&project?(userIsSuperhero=!!_.some(user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsProjectManager=user._id===project.identification.projectManager||user._id===project.identification.backupProjectManager,project.portfolio&&(userIsPortfolioManager=user._id===project.portfolio.portfolioManager||user._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsProjectManager||userIsPortfolioManager):void 0},$scope.switchProjectForm="",$scope.selectProjectForm=function(string){"default"===string&&($scope.switchProjectForm="default"),"new"===string&&($scope.switchProjectForm="new"),"view"===string&&($scope.switchProjectForm="view"),"edit"===string&&($scope.switchProjectForm="edit")},$scope.switchHeaderForm={},$scope.selectHeaderForm=function(string,projectMilestone){"view"===string&&($scope.switchHeaderForm[projectMilestone._id]="view"),"edit"===string&&($scope.switchHeaderForm[projectMilestone._id]="edit")},$scope.switchStatusForm={},$scope.selectStatusForm=function(string,projectMilestone){"view"===string&&($scope.switchStatusForm[projectMilestone._id]="view"),"edit"===string&&($scope.switchStatusForm[projectMilestone._id]="edit")};$scope.sortProjectMilestones=function(projectMilestone){return new Date(projectMilestone.statusReview.currentRecord.estimateDeliveryDate)},$scope.sortAppliedChanges=function(appliedChange){return new Date(appliedChange.created)},$scope.projectMilestoneDetails="header",$scope.activeTab={},$scope.selectProject=function(project){$scope.projectMilestones=null,$scope.selectedGate=null,$scope.selectedProjectMilestone=null,$scope.cancelNewProjectMilestone(),$scope.selectedProject=project,$scope.error=null,$scope.isResolving=!0,ProjectMilestones.query({project:project._id},function(res){$scope.isResolving=!1,$scope.projectMilestones=res},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.selectGate=function(gate){$scope.error=null,$scope.selectedProjectMilestone=null,$scope.cancelNewProjectMilestone(),$scope.selectedGate=gate},$scope.newProjectMilestone={},$scope.createNewProjectMilestone=function(project,gate){var newProjectMilestone=new ProjectMilestones({project:project._id,gate:{_id:gate._id,name:gate.name,standardGate:gate.standardGate},type:$scope.newProjectMilestone.type,name:$scope.newProjectMilestone.name});$scope.error=null,$scope.isResolving=!0,newProjectMilestone.$save(function(res){$scope.isResolving=!1,$scope.newProjectMilestone={},$scope.projectMilestones.push(res),$scope.selectProjectMilestone(res),$scope.showNewProjectMilestoneForm=!1},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelNewProjectMilestone=function(){$scope.error=null,$scope.newProjectMilestone={},$scope.showNewProjectMilestoneForm=!1},$scope.selectProjectMilestone=function(projectMilestone){$scope.selectedProjectMilestone=projectMilestone};var originalProjectMilestoneHeader={};$scope.editHeader=function(projectMilestone){originalProjectMilestoneHeader[projectMilestone._id]={name:projectMilestone.name,description:projectMilestone.description,state:projectMilestone.state,type:projectMilestone.type},$scope.selectHeaderForm("edit",projectMilestone)},$scope.saveEditHeader=function(projectMilestone){$scope.error=null,$scope.isResolving=!0,ProjectMilestones.updateHeader({projectMilestoneId:projectMilestone._id},projectMilestone,function(res){$scope.isResolving=!1,$scope.selectHeaderForm("view",projectMilestone)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditHeader=function(projectMilestone){$scope.error=null,projectMilestone.name=originalProjectMilestoneHeader[projectMilestone._id].name,projectMilestone.description=originalProjectMilestoneHeader[projectMilestone._id].description,projectMilestone.state=originalProjectMilestoneHeader[projectMilestone._id].state,projectMilestone.type=originalProjectMilestoneHeader[projectMilestone._id].type,$scope.selectHeaderForm("view",projectMilestone)},$scope.deleteProjectMilestone=function(projectMilestone){$scope.error=null,$scope.isResolving=!0,ProjectMilestones.remove({projectMilestoneId:projectMilestone._id},projectMilestone,function(res){$scope.isResolving=!1,$scope.projectMilestones=_.without($scope.projectMilestones,projectMilestone),$scope.cancelNewProjectMilestone(),$scope.selectedProjectMilestone=null},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.baselineDeliveryDateOpened={},$scope.openBaselineDeliveryDate=function(projectMilestone,$event){$event.preventDefault(),$event.stopPropagation(),$scope.baselineDeliveryDateOpened[projectMilestone._id]=!0},$scope.estimateDeliveryDateOpened={},$scope.openEstimateDeliveryDate=function(projectMilestone,$event){$event.preventDefault(),$event.stopPropagation(),$scope.estimateDeliveryDateOpened[projectMilestone._id]=!0},$scope.actualDeliveryDateOpened={},$scope.openActualDeliveryDate=function(projectMilestone,$event){$event.preventDefault(),$event.stopPropagation(),$scope.actualDeliveryDateOpened[projectMilestone._id]=!0};var originalProjectMilestoneStatus={};$scope.editStatus=function(projectMilestone){originalProjectMilestoneStatus={baselineDeliveryDate:projectMilestone.statusReview.currentRecord.baselineDeliveryDate,estimateDeliveryDate:projectMilestone.statusReview.currentRecord.estimateDeliveryDate,actualDeliveryDate:projectMilestone.statusReview.currentRecord.actualDeliveryDate,status:projectMilestone.statusReview.currentRecord.status,completed:projectMilestone.statusReview.currentRecord.completed,statusComment:projectMilestone.statusReview.currentRecord.statusComment},$scope.selectStatusForm("edit",projectMilestone)},$scope.saveEditStatus=function(projectMilestone){$scope.error=null,$scope.isResolving=!0,ProjectMilestones.updateStatus({projectMilestoneId:projectMilestone._id},projectMilestone,function(res){$scope.isResolving=!1,projectMilestone.statusReview=res.statusReview,$scope.selectStatusForm("view",projectMilestone)},function(err){$scope.isResolving=!1,$scope.error=err.data.message})},$scope.cancelEditStatus=function(projectMilestone){$scope.error=null,projectMilestone.statusReview.currentRecord.baselineDeliveryDate=originalProjectMilestoneStatus[projectMilestone._id].baselineDeliveryDate,projectMilestone.statusReview.currentRecord.estimateDeliveryDate=originalProjectMilestoneStatus[projectMilestone._id].estimateDeliveryDate,projectMilestone.statusReview.currentRecord.actualDeliveryDate=originalProjectMilestoneStatus[projectMilestone._id].actualDeliveryDate,projectMilestone.statusReview.currentRecord.status=originalProjectMilestoneStatus[projectMilestone._id].status,projectMilestone.statusReview.currentRecord.completed=originalProjectMilestoneStatus[projectMilestone._id].completed,projectMilestone.statusReview.currentRecord.statusComment=originalProjectMilestoneStatus[projectMilestone._id].statusComment,$scope.selectStatusForm("view",projectMilestone)}}]),angular.module("project-milestones").factory("ProjectMilestones",["$resource",function($resource){return $resource("project-milestones/:projectMilestoneId",{projectMilestoneId:"@_id"},{update:{method:"PUT"},updateHeader:{method:"PUT",url:"project-milestones/:projectMilestoneId/header"},updateStatus:{method:"PUT",url:"project-milestones/:projectMilestoneId/status"}})}]),angular.module("project-review-setup").config(["$stateProvider",function($stateProvider){$stateProvider.state("project-review-setup",{url:"/project-review-setup",templateUrl:"modules/project-review-setup/views/project-review-setup.client.view.html"})}]),angular.module("project-review-setup").controller("ProjectReviewSetupController",["$rootScope","$scope","$stateParams","$location","Authentication","ProjectReviewScores","ProjectReviewTypes","PortfolioReviewTypes","$q","_",function($rootScope,$scope,$stateParams,$location,Authentication,ProjectReviewScores,ProjectReviewTypes,PortfolioReviewTypes,$q,_){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){ProjectReviewScores.query(function(scores){$scope.reviewScores=scores},function(err){$scope.initError.push(err.data.message)}),ProjectReviewTypes.query(function(res){$scope.projectReviewTypes=res},function(err){$scope.initError.push(err.data.message)}),PortfolioReviewTypes.query(function(res){$scope.portfolioReviewTypes=res},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.selectScoreForm=function(string){"view"===string&&($scope.switchScoreForm="view"),"edit"===string&&($scope.switchScoreForm="edit")},$scope.findScores=function(){$scope.initError=[],ProjectReviewScores.query(function(scores){$scope.reviewScores=scores},function(err){$scope.initError.push(err.data.message)})};var originalScore;$scope.selectScore=function(score){$scope.error=null,$scope.selectScoreForm("view"),$scope.reviewScore=score,originalScore=_.clone(score)},$scope.updateScore=function(score){$scope.error=null,score.$update(function(response){$scope.reviewScores=_.sortBy($scope.reviewScores,"numericalValue"),$scope.selectScoreForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditScore=function(score){score.name=originalScore.name,score.numericalValue=originalScore.numericalValue,score.description=originalScore.description,$scope.selectScoreForm("view")},$scope.removeScore=function(score){$scope.error=null,score.$remove(function(response){$scope.reviewScore=null,$scope.findScores(),$scope.selectScoreForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createScore=function(){$scope.error=null;var reviewScore=new ProjectReviewScores({name:"New review score",numericalValue:0});reviewScore.$save(function(response){$scope.findScores(),$scope.selectScoreForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchPortfolioTypeForm={},$scope.selectPortfolioTypeForm=function(type,string){"view"===string&&($scope.switchPortfolioTypeForm[type._id]="view"),"new"===string&&($scope.switchPortfolioTypeForm[type._id]="new"),"edit"===string&&($scope.switchPortfolioTypeForm[type._id]="edit")},$scope.findPortfolioTypes=function(){$scope.initError=[],PortfolioReviewTypes.query(function(types){$scope.portfolioReviewTypes=_.clone(types)},function(err){$scope.initError.push(err.data.message)})},$scope.selectPortfolioType=function(type){$scope.selectPortfolioTypeForm(type,"edit")},$scope.updatePortfolioType=function(type){type.$update(function(response){$scope.findPortfolioTypes(),$scope.selectPortfolioTypeForm(type,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditPortfolioType=function(type){$scope.findPortfolioTypes(),$scope.selectPortfolioTypeForm(type,"view")},$scope.removePortfolioType=function(type){type.$remove(function(response){$scope.findPortfolioTypes()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createPortfolioType=function(){var portfolioType=new PortfolioReviewTypes({name:"New portfolio review type"});portfolioType.$save(function(response){$scope.findPortfolioTypes(),$scope.selectPortfolioTypeForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchProjectTypeForm={},$scope.selectProjectTypeForm=function(type,string){"view"===string&&($scope.switchProjectTypeForm[type._id]="view"),"new"===string&&($scope.switchProjectTypeForm[type._id]="new"),"edit"===string&&($scope.switchProjectTypeForm[type._id]="edit")},$scope.findProjectTypes=function(){$scope.initError=[],ProjectReviewTypes.query(function(types){$scope.projectReviewTypes=_.clone(types)},function(err){$scope.initError.push(err.data.message)})},$scope.selectProjectType=function(type){$scope.selectProjectTypeForm(type,"edit")},$scope.updateProjectType=function(type){type.$update(function(response){$scope.findProjectTypes(),$scope.selectProjectTypeForm(type,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditProjectType=function(type){$scope.findProjectTypes(),$scope.selectProjectTypeForm(type,"view")},$scope.removeProjectType=function(type){type.$remove(function(response){$scope.findProjectTypes()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createProjectType=function(){var projectType=new ProjectReviewTypes({name:"New project review type"});projectType.$save(function(response){$scope.findProjectTypes(),$scope.selectProjectTypeForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("project-review-setup").factory("PortfolioReviewTypes",["$resource",function($resource){return $resource("portfolio-review-types/:portfolioReviewTypeId",{portfolioReviewTypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("project-review-setup").factory("ProjectReviewScores",["$resource",function($resource){return $resource("project-review-scores/:projectReviewScoreId",{projectReviewScoreId:"@_id"},{update:{method:"PUT"}})}]),angular.module("project-review-setup").factory("ProjectReviewTypes",["$resource",function($resource){return $resource("project-review-types/:projectReviewTypeId",{projectReviewTypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("project-review-templates").config(["$stateProvider",function($stateProvider){$stateProvider.state("project-review-templates",{url:"/project-review-templates",templateUrl:"modules/project-review-templates/views/project-review-templates.client.view.html"})}]),angular.module("project-review-templates").controller("ProjectReviewTemplatesController",["$rootScope","$scope","$stateParams","$location","Authentication","ProjectReviewTemplates","ProjectReviewTypes","PeopleProjectGroups","$q","_",function($rootScope,$scope,$stateParams,$location,Authentication,ProjectReviewTemplates,ProjectReviewTypes,PeopleProjectGroups,$q,_){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){ProjectReviewTemplates.query(function(res){$scope.templates=res},function(err){$scope.initError.push(err.data.message)}),ProjectReviewTypes.query(function(res){$scope.templateTypes=res},function(err){$scope.initError.push(err.data.message)}),PeopleProjectGroups.query(function(res){$scope.stakeholderGroups=res},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.switchTemplateForm={},$scope.selectTemplateForm=function(template,string){"view"===string&&($scope.switchTemplateForm[template._id]="view"),"edit"===string&&($scope.switchTemplateForm[template._id]="edit")},$scope.switchGroupForm={},$scope.selectGroupForm=function(group,string){"view"===string&&($scope.switchGroupForm[group._id]="view"),"new"===string&&($scope.switchGroupForm[group._id]="new"),"edit"===string&&($scope.switchGroupForm[group._id]="edit")},$scope.switchItemForm={},$scope.selectItemForm=function(item,string){"view"===string&&($scope.switchItemForm[item._id]="view"),"edit"===string&&($scope.switchItemForm[item._id]="edit")},$scope.templateList=function(){ProjectReviewTemplates.query(function(templates){$scope.templates=templates})},$scope.getTotalTemplateWeights=function(template){return template?_.reduce(template.groups,function(memo,group){return memo+group.weight},0):void 0},$scope.getTotalItemWeights=function(group){return group?_.reduce(group.items,function(memo,impact){return memo+impact.weight},0):void 0},$scope.newTemplate={},$scope.showNewTemplateForm=!1,$scope.saveNewTemplate=function(newTemplate){$scope.error=null;var template=new ProjectReviewTemplates({name:newTemplate.name,type:newTemplate.type,groups:[]});template.$save(function(res){$scope.error=null,$scope.newTemplate={},$scope.showNewTemplateForm=!1,$scope.templateList()},function(err){$scope.error=err.data.message})},$scope.cancelNewTemplate=function(){$scope.error=null,$scope.newTemplate={},$scope.showNewTemplateForm=!1};var originalEditTemplate={};$scope.selectTemplate=function(template){originalEditTemplate=_.clone(template),$scope.selectedTemplate=template},$scope.updateTemplate=function(template){ProjectReviewTemplates.update({_id:template._id,name:template.name,type:template.type,description:template.description},function(template){$scope.error=null,$scope.selectTemplateForm(template,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditTemplate=function(template){$scope.error=null,$scope.selectedTemplate.name=originalEditTemplate.name,$scope.selectedTemplate.description=originalEditTemplate.description,$scope.selectedTemplate.type=originalEditTemplate.type,$scope.selectTemplateForm(template,"view")},$scope.createGroup=function(template){var newGroup={name:"New group",weight:0,peopleGroups:[],items:[]};ProjectReviewTemplates.createGroup({projectReviewTemplateId:template._id},newGroup,function(res){$scope.error=null,template.groups.push(res)},function(err){console.log(err.data.message),$scope.error=err.data.message})};var originalEditGroup={};$scope.selectedStakeholderGroup={},$scope.selectGroup=function(group){$scope.selectedStakeholderGroup[group._id]=null,originalEditGroup[group._id]=_.clone(group),$scope.error=null,$scope.selectGroupForm(group,"edit")},$scope.updateGroup=function(template,group){ProjectReviewTemplates.updateGroup({projectReviewTemplateId:template._id,groupId:group._id},group,function(res){$scope.error=null,$scope.selectGroupForm(res,"view")},function(err){$scope.error=err.data.message})},$scope.cancelEditGroup=function(group){$scope.error=null,group.name=originalEditGroup[group._id].name,group.description=originalEditGroup[group._id].description,group.weight=originalEditGroup[group._id].weight,$scope.selectGroupForm(group,"view")},$scope.getAllowedStakeholderGroups=function(reviewGroup){return _.filter($scope.stakeholderGroups,function(stakeholderGroup){return!_.find(reviewGroup.peopleGroups,function(sGroup){return sGroup._id===stakeholderGroup._id})})},$scope.stringForAllowedStakeholderGroups="No selectable groups",$scope.addStakeholderGroup=function(template,group,stakeholderGroup){$scope.selectedStakeholderGroup[group._id]=null,ProjectReviewTemplates.addStakeholderGroup({projectReviewTemplateId:template._id,groupId:group._id,peopleGroupId:stakeholderGroup._id},stakeholderGroup,function(res){$scope.error=null,group.peopleGroups.push(stakeholderGroup)},function(err){$scope.error=err.data.message})},$scope.removeStakeholderGroup=function(template,group,stakeholderGroup){$scope.selectedStakeholderGroup[group._id]=null,ProjectReviewTemplates.removeStakeholderGroup({projectReviewTemplateId:template._id,groupId:group._id,peopleGroupId:stakeholderGroup._id},stakeholderGroup,function(res){$scope.error=null,group.peopleGroups=_.without(group.peopleGroups,stakeholderGroup)},function(err){$scope.error=err.data.message})},$scope.createItem=function(template,group){$scope.error=null;var newItem={name:"New review item",weight:0,peopleReviews:[]};ProjectReviewTemplates.createItem({projectReviewTemplateId:template._id,groupId:group._id},newItem,function(res){group.items.push(res)},function(err){$scope.error=err.data.message})};var originalEditItem={};$scope.selectEditItem=function(group,item){originalEditItem[item._id]=_.clone(item),$scope.selectItemForm(item,"edit")},$scope.updateItem=function(template,group,item){ProjectReviewTemplates.updateItem({projectReviewTemplateId:template._id,groupId:group._id,itemId:item._id},item,function(res){$scope.selectItemForm(item,"view")},function(err){$scope.error=err.data.message})},$scope.cancelEditItem=function(item){$scope.error=null,item.name=originalEditItem[item._id].name,item.description=originalEditItem[item._id].description,item.weight=originalEditItem[item._id].weight,$scope.selectItemForm(item,"view")},$scope.removeTemplate=function(template){$scope.error=null,template.$remove(function(response){$scope.selectedTemplate=null,$scope.templateList()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.removeGroup=function(template,group){$scope.error=null,ProjectReviewTemplates.deleteGroup({projectReviewTemplateId:template._id,groupId:group._id},group,function(res){template.groups=_.without(template.groups,group)},function(err){$scope.error=err.data.message})},$scope.removeItem=function(template,group,item){$scope.error=null,ProjectReviewTemplates.deleteItem({projectReviewTemplateId:template._id,groupId:group._id,itemId:item._id},item,function(res){group.items=_.without(group.items,item)},function(err){$scope.error=err.data.message})}}]),angular.module("project-review-templates").factory("ProjectReviewTemplates",["$resource",function($resource){return $resource("project-review-templates/:projectReviewTemplateId",{projectReviewTemplateId:"@_id"},{update:{method:"PUT"},createGroup:{method:"PUT",url:"project-review-templates/:projectReviewTemplateId/groups"},updateGroup:{method:"PUT",url:"project-review-templates/:projectReviewTemplateId/groups/:groupId/update"},deleteGroup:{method:"PUT",url:"project-review-templates/:projectReviewTemplateId/groups/:groupId/delete"},addStakeholderGroup:{method:"PUT",url:"project-review-templates/:projectReviewTemplateId/groups/:groupId/peopleGroups/:peopleGroupId/add"},removeStakeholderGroup:{method:"PUT",url:"project-review-templates/:projectReviewTemplateId/groups/:groupId/peopleGroups/:peopleGroupId/remove"},createItem:{method:"PUT",url:"project-review-templates/:projectReviewTemplateId/groups/:groupId/items"},updateItem:{method:"PUT",url:"project-review-templates/:projectReviewTemplateId/groups/:groupId/items/:itemId/update"},deleteItem:{method:"PUT",url:"project-review-templates/:projectReviewTemplateId/groups/:groupId/items/:itemId/delete"}})}]),angular.module("project-reviews").run(["Menus",function(Menus){}]),angular.module("project-reviews").config(["$stateProvider",function($stateProvider){$stateProvider.state("project-reviews",{url:"/project-reviews",templateUrl:"modules/project-reviews/views/project-reviews.client.view.html"}).state("project-reviews-id",{url:"/project-reviews/:projectReviewId/projects/:projectId",templateUrl:"modules/project-reviews/views/project-reviews.client.view.html"
})}]),angular.module("project-reviews").controller("ProjectReviewsController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","Portfolios","$q","_","ProjectReviewTemplates","ProjectReviewScores","ProjectReviewTypes","ProjectReviews","PeopleProjectGroups","GateProcessTemplates",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,Portfolios,$q,_,ProjectReviewTemplates,ProjectReviewScores,ProjectReviewTypes,ProjectReviews,PeopleProjectGroups,GateProcessTemplates){$rootScope.staticMenu=!1,$scope.isResolving=!1,$scope.initError=[],$scope.init=function(){$scope.userData=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForEvaluation":!0},function(res){if($scope.projects=res,$stateParams.projectId){var foundProject=_.find(res,_.matchesProperty("_id",$stateParams.projectId));foundProject?$scope.selectProject(foundProject):($scope.error="Cannot find project"+$stateParams.projectId,$stateParams.projectReviewId=null)}},function(err){$scope.initError.push({message:err.data.message})}),Portfolios.query(function(portfolios){$scope.portfolios=portfolios},function(err){$scope.initError.push({message:err.data.message})}),GateProcessTemplates.query(function(res){$scope.gateProcesses=res},function(err){$scope.initError.push({message:err.data.message})}),ProjectReviewTemplates.query(function(res){$scope.projectReviewTemplates=res},function(err){$scope.initError.push({message:err.data.message})}),ProjectReviewScores.query(function(res){$scope.projectReviewScores=res},function(err){$scope.initError.push({message:err.data.message})}),ProjectReviewTypes.query(function(res){$scope.projectReviewTypes=res},function(err){$scope.initError.push({message:err.data.message})}),PeopleProjectGroups.query(function(res){$scope.peopleProjectGroups=res},function(err){$scope.initError.push({message:err.data.message})})},$scope.userHasManagementAuthorization=function(action,userData,project){if(action&&userData&&project){var userIsSuperhero,userIsProjectManager,userIsPortfolioManager;if("edit"===action)return userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsProjectManager=userData._id===project.identification.projectManager||userData._id===project.identification.backupProjectManager,project.portfolio&&(userIsPortfolioManager=userData._id===project.portfolio.portfolioManager||userData._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsProjectManager||userIsPortfolioManager}},$scope.userHasReviewAuthorization=function(action,userData,peopleReview){if(action&&userData&&peopleReview){var userIsSuperhero,userIsReviewer;if("edit"===action)return userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),peopleReview.person&&(userIsReviewer=userData._id===peopleReview.person._id),userIsSuperhero||userIsReviewer}},$scope.switchProjectForm="",$scope.selectProjectForm=function(string){"default"===string&&($scope.switchProjectForm="default"),"new"===string&&($scope.switchProjectForm="new"),"view"===string&&($scope.switchProjectForm="view"),"edit"===string&&($scope.switchProjectForm="edit")},$scope.switchHeaderForm={},$scope.selectHeaderForm=function(string,projectReview){"view"===string&&($scope.switchHeaderForm[projectReview._id]="view"),"edit"===string&&($scope.switchHeaderForm[projectReview._id]="edit")},$scope.switchPeopleReviewForm={},$scope.selectPeopleReviewForm=function(string,peopleReview){"view"===string&&($scope.switchPeopleReviewForm[peopleReview._id]="view"),"edit"===string&&($scope.switchPeopleReviewForm[peopleReview._id]="edit")},$scope.switchWorkflowForm={},$scope.selectWorkflowForm=function(string,projectReview){"view"===string&&($scope.switchWorkflowForm[projectReview._id]="view"),"edit"===string&&($scope.switchWorkflowForm[projectReview._id]="edit")};$scope.sortAppliedChanges=function(record){return new Date(record.created)},$scope.projectReviewDetails="header";var originalProjectReview={};$scope.selectProject=function(project){$scope.error=null,$scope.selectedProject=null,$scope.projectReviews=null,$scope.selectedProjectReview=null,originalProjectReview={},$scope.selectedProject=project,ProjectReviews.query({project:project._id},function(res){if($scope.projectReviews=res,$stateParams.projectReviewId){var foundProjectReview=_.find($scope.projectReviews,_.matchesProperty("_id",$stateParams.projectReviewId));foundProjectReview?$scope.selectProjectReview(foundProjectReview):$scope.error="Cannot find project review"+$stateParams.projectReviewId}},function(err){$scope.error=err.data.message})},$scope.cancelViewProject=function(){$scope.error=null,$scope.selectedProject=null,$scope.projectReviews=null},$scope.newStartDateOpened={},$scope.openNewStartDate=function(project,$event){$event.preventDefault(),$event.stopPropagation(),$scope.newStartDateOpened[project._id]=!0},$scope.newEndDateOpened={},$scope.openNewEndDate=function(project,$event){$event.preventDefault(),$event.stopPropagation(),$scope.newEndDateOpened[project._id]=!0},$scope.newProjectReview={},$scope.allowedProjectReviewTemplates=function(){return _.filter($scope.projectReviewTemplates,_.matchesProperty("type",$scope.newProjectReview.type))},$scope.createNewProjectReview=function(project){$scope.error=null;var newProjectReview=new ProjectReviews({project:project._id,name:$scope.newProjectReview.name,startDate:$scope.newProjectReview.startDate,endDate:$scope.newProjectReview.startDate,template:$scope.newProjectReview.template});newProjectReview.$save(function(res){$scope.newProjectReview={},$scope.projectReviews.push(res),$scope.selectProjectReview(res)},function(err){$scope.error=err.data.message})},$scope.cancelNewProjectReview=function(){$scope.error=null,$scope.newProjectReview={}},$scope.selectProjectReview=function(projectReview){$scope.error=null,$scope.selectedProjectReview=projectReview,originalProjectReview[projectReview._id]=_.cloneDeep(projectReview)},$scope.editStartDateOpened={},$scope.openEditStartDate=function(review,$event){$event.preventDefault(),$event.stopPropagation(),$scope.editStartDateOpened[review._id]=!0},$scope.editEndDateOpened={},$scope.openEditEndDate=function(review,$event){$event.preventDefault(),$event.stopPropagation(),$scope.editEndDateOpened[review._id]=!0},$scope.editHeader=function(projectReview){originalProjectReview[projectReview._id]=_.cloneDeep(projectReview),$scope.selectHeaderForm("edit",projectReview)},$scope.saveEditHeader=function(projectReview){var copyProjectReview=_.cloneDeep(projectReview);ProjectReviews.updateHeader({projectReviewId:copyProjectReview._id},copyProjectReview,function(res){$scope.selectHeaderForm("view",projectReview)},function(err){$scope.error=err.data.message})},$scope.cancelEditHeader=function(projectReview){$scope.error=null,projectReview.name=originalProjectReview[projectReview._id].name,projectReview.startDate=originalProjectReview[projectReview._id].startDate,projectReview.endDate=originalProjectReview[projectReview._id].endDate,projectReview.description=originalProjectReview[projectReview._id].description,$scope.selectHeaderForm("view",projectReview)},$scope.deleteProjectReview=function(projectReview){ProjectReviews.remove({projectReviewId:projectReview._id},projectReview,function(res){$scope.projectReviews=_.without($scope.projectReviews,projectReview),$scope.cancelNewProjectReview(),$scope.selectedProjectReview=null,originalProjectReview={}},function(err){$scope.error=err.data.message})},$scope.oneAtATime=!0;var originalPeopleReview={};$scope.editPeopleReview=function(peopleReview){$scope.error=null,$scope.selectPeopleReviewForm("edit",peopleReview),originalPeopleReview[peopleReview._id]=_.cloneDeep(peopleReview)},$scope.saveEditPeopleReview=function(projectReview,reviewGroup,reviewItem,peopleReview){var copyPeopleReview=_.cloneDeep(peopleReview);copyPeopleReview.person=copyPeopleReview.person._id,ProjectReviews.updatePeopleReview({projectReviewId:projectReview._id,groupId:reviewGroup._id,itemId:reviewItem._id,peopleReviewId:peopleReview._id},copyPeopleReview,function(res){$scope.selectPeopleReviewForm("view",peopleReview)},function(err){$scope.error=err.data.message})},$scope.cancelEditPeopleReview=function(peopleReview){peopleReview.score=originalPeopleReview[peopleReview._id].score,peopleReview.comment=originalPeopleReview[peopleReview._id].comment,$scope.error=null,$scope.selectPeopleReviewForm("view",peopleReview)},$scope.submitPeopleReview=function(projectReview,reviewGroup,reviewItem,peopleReview){$scope.error=null;var copyPeopleReview=_.cloneDeep(peopleReview);copyPeopleReview.person=copyPeopleReview.person._id,ProjectReviews.submitPeopleReview({projectReviewId:projectReview._id,groupId:reviewGroup._id,itemId:reviewItem._id,peopleReviewId:peopleReview._id},copyPeopleReview,function(res){peopleReview.submitted=res.submitted,$scope.selectPeopleReviewForm("view",peopleReview)},function(err){$scope.error=err.data.message})},$scope.submit=function(projectReview){$scope.error=null,ProjectReviews.submit({projectReviewId:projectReview._id},projectReview,function(res){projectReview.approval=res.approval},function(err){$scope.error=err.data.message})},$scope.complete=function(projectReview){$scope.error=null,ProjectReviews.complete({projectReviewId:projectReview._id},projectReview,function(res){projectReview.approval=res.approval},function(err){$scope.error=err.data.message})},$scope.draft=function(projectReview){$scope.error=null,ProjectReviews.draft({projectReviewId:projectReview._id},projectReview,function(res){projectReview.approval=res.approval},function(err){$scope.error=err.data.message})}}]),angular.module("project-reviews").factory("ProjectReviews",["$resource",function($resource){return $resource("project-reviews/:projectReviewId",{projectReviewId:"@_id"},{update:{method:"PUT"},updateHeader:{method:"PUT",url:"project-reviews/:projectReviewId/header"},updatePeopleReview:{method:"PUT",url:"project-reviews/:projectReviewId/groups/:groupId/items/:itemId/peopleReviews/:peopleReviewId/update"},submitPeopleReview:{method:"PUT",url:"project-reviews/:projectReviewId/groups/:groupId/items/:itemId/peopleReviews/:peopleReviewId/submit"},submit:{method:"PUT",url:"project-reviews/:projectReviewId/submit"},complete:{method:"PUT",url:"project-reviews/:projectReviewId/complete"},draft:{method:"PUT",url:"project-reviews/:projectReviewId/draft"}})}]),angular.module("project-selection").config(["$stateProvider",function($stateProvider){$stateProvider.state("project-selection",{url:"/project-selection",templateUrl:"modules/project-selection/views/project-selection.client.view.html"})}]),angular.module("project-selection").controller("ProjectSelectionController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","Portfolios","StrategyNodes","CategoryGroups","PriorityGroups","PriorityValues","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,Portfolios,StrategyNodes,CategoryGroups,PriorityGroups,PriorityValues,_,$q){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){$scope.userData=Authentication.user,Projects.query(function(projects){$scope.projects=projects},function(err){$scope.initError.push(err.data.message)}),Portfolios.query(function(portfolios){$scope.portfolios=portfolios},function(err){$scope.initError.push(err.data.message)}),StrategyNodes.query(function(res){$scope.strategyNodes=res},function(err){$scope.initError.push(err.data.message)}),CategoryGroups.query(function(res){$scope.categoryGroups=res},function(err){$scope.initError.push(err.data.message)}),PriorityGroups.query(function(res){$scope.priorityGroups=res},function(err){$scope.initError.push(err.data.message)}),PriorityValues.query(function(res){$scope.priorityValues=res},function(err){$scope.initError.push(err.data.message)})},$scope.userHasAuthorization=function(action,userData,project){var userIsSuperhero,userIsProjectManager,userIsPortfolioManager;return"edit"===action?(userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsProjectManager=userData._id===project.identification.projectManager||userData._id===project.identification.backupProjectManager,project.portfolio&&(userIsPortfolioManager=userData._id===project.portfolio.portfolioManager||userData._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsProjectManager||userIsPortfolioManager):void 0},$scope.showFilters=!1,$scope.filterCategorization={},$scope.filterPrioritization={},$scope.showEditProjectForm={};var originalProject={};$scope.selectProject=function(project){originalProject[project._id]=_.cloneDeep(project),$scope.showEditProjectForm[project._id]=!0},$scope.saveEditProject=function(project){Projects.update({_id:project._id,selection:project.selection},function(res){$scope.showEditProjectForm[project._id]=!1},function(err){$scope.error=err.data.message})},$scope.cancelEditProject=function(project){project.selection=originalProject[project._id].selection,$scope.showEditProjectForm[project._id]=!1}}]),angular.module("project-status-updates").config(["$stateProvider",function($stateProvider){$stateProvider.state("project-status-updates",{url:"/project-status-updates",templateUrl:"modules/project-status-updates/views/project-status-updates.client.view.html"}).state("project-status-updates-id",{url:"/project-status-updates/:projectStatusUpdateId/projects/:projectId/gates/:gateId",templateUrl:"modules/project-status-updates/views/project-status-updates.client.view.html"})}]),angular.module("project-status-updates").controller("ProjectStatusUpdatesController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","Portfolios","$q","_","$modal","GateProcessTemplates","LogStatusIndicators",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,Portfolios,$q,_,$modal,GateProcessTemplates,LogStatusIndicators){$rootScope.staticMenu=!1;var vm=this;vm.isResolving=!1,vm.initError=[],vm.init=function(){vm.user=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForDelivery":!0,"process.assignmentConfirmed":!0},function(projects){if(vm.projects=_.filter(projects,function(project){return"unassigned"!==project.process.assignmentType}),$stateParams.projectId){var foundProject=_.find(vm.projects,_.matchesProperty("_id",$stateParams.projectId));foundProject?vm.selectProject(foundProject):vm.error="Cannot find project "+$stateParams.projectId}},function(err){vm.initError.push(err.data.message)}),Portfolios.query(function(portfolios){vm.portfolios=portfolios},function(err){vm.initError.push(err.data.message)}),GateProcessTemplates.query(function(gateProcesses){vm.gateProcesses=gateProcesses},function(err){vm.initError.push(err.data.message)}),LogStatusIndicators.query(function(logStatusIndicators){vm.logStatusIndicators=logStatusIndicators},function(err){vm.initError.push(err.data.message)})},vm.userHasAuthorization=function(action,user,project){var userIsSuperhero,userIsProjectManager,userIsPortfolioManager;return"edit"===action&&user&&project?(userIsSuperhero=!!_.some(user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsProjectManager=user._id===project.identification.projectManager||user._id===project.identification.backupProjectManager,project.portfolio&&(userIsPortfolioManager=user._id===project.portfolio.portfolioManager||user._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsProjectManager||userIsPortfolioManager):"approve"===action&&user&&project?(userIsSuperhero=!!_.some(user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),project.portfolio&&(userIsPortfolioManager=user._id===project.portfolio.portfolioManager||user._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsPortfolioManager):void 0},vm.switchHeaderForm={},vm.selectHeaderForm=function(string,document){"view"===string&&(vm.switchHeaderForm[document._id]="view"),"edit"===string&&(vm.switchHeaderForm[document._id]="edit")},vm.switchOverallStatusForm={},vm.selectOverallStatusForm=function(string,document){"view"===string&&(vm.switchOverallStatusForm[document._id]="view"),"edit"===string&&(vm.switchOverallStatusForm[document._id]="edit")},vm.switchStatusAreaForm={},vm.selectStatusAreaForm=function(string,statusAreaReview){"view"===string&&(vm.switchStatusAreaForm[statusAreaReview._id]="view"),"edit"===string&&(vm.switchStatusAreaForm[statusAreaReview._id]="edit")},vm.switchOutcomeReviewForm={},vm.selectOutcomeReviewForm=function(string,outcomeReview){"view"===string&&(vm.switchOutcomeReviewForm[outcomeReview._id]="view"),"edit"===string&&(vm.switchOutcomeReviewForm[outcomeReview._id]="edit")},vm.switchEstimateDurationForm={},vm.selectEstimateDurationForm=function(string,estimateDuration){"view"===string&&(vm.switchEstimateDurationForm[estimateDuration._id]="view"),"edit"===string&&(vm.switchEstimateDurationForm[estimateDuration._id]="edit")},vm.switchEstimateCostForm={},vm.selectEstimateCostForm=function(string,estimateCost){"view"===string&&(vm.switchEstimateCostForm[estimateCost._id]="view"),"edit"===string&&(vm.switchEstimateCostForm[estimateCost._id]="edit")},vm.switchEstimateCompletionForm={},vm.selectEstimateCompletionForm=function(string,estimateCompletion){"view"===string&&(vm.switchEstimateCompletionForm[estimateCompletion._id]="view"),"edit"===string&&(vm.switchEstimateCompletionForm[estimateCompletion._id]="edit")},vm.sortChangeRequests=function(doc){return new Date(doc.updateDate)},vm.sortAppliedChanges=function(record){return new Date(record.created)},vm.getDaysChange=function(stringDate1,stringDate2){var millisecondsPerDay=864e5;return-(new Date(stringDate1)-new Date(stringDate2))/millisecondsPerDay},vm.showNewDocumentForm=!1,vm.documentDetails="header",vm.activeTab={},vm.selectProject=function(project){vm.error=null,vm.cancelNewDocument(),vm.selectedGate=null,vm.selectedDocument=null,vm.selectedProject=project},vm.selectGate=function(gate){vm.error=null,vm.cancelNewDocument(),vm.selectedDocument=null,vm.selectedGate=gate},vm.newHeaderDateOpened={},vm.openNewHeaderDate=function(gate,$event){$event.preventDefault(),$event.stopPropagation(),vm.newHeaderDateOpened[gate._id]=!0},vm.newDocument={},vm.createNewDocument=function(project,gate){vm.error=null;var newDocument={updateDate:vm.newDocument.updateDate,title:vm.newDocument.title};Projects.createStatusUpdate({projectId:project._id,projectGateId:gate._id},newDocument,function(res){vm.isResolving=!1,gate.projectStatusUpdates.push(res),vm.newDocument={},vm.showNewDocumentForm=!1,vm.selectDocument(res)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelNewDocument=function(){vm.error=null,vm.showNewDocumentForm=!1,vm.newDocument={}},vm.selectDocument=function(doc){vm.selectedDocument=doc},vm.headerDateOpened={},vm.openHeaderDate=function(document,$event){$event.preventDefault(),$event.stopPropagation(),vm.headerDateOpened[document._id]=!0};var originalHeader={};vm.editHeader=function(statusUpdate){originalHeader[statusUpdate._id]={updateDate:statusUpdate.updateDate,title:statusUpdate.title,description:statusUpdate.description},vm.selectHeaderForm("edit",statusUpdate)},vm.saveEditHeader=function(project,gate,statusUpdate){vm.error=null,vm.isResolving=!0,Projects.updateStatusUpdateHeader({projectId:project._id,projectGateId:gate._id,projectStatusUpdateId:statusUpdate._id},statusUpdate,function(res){vm.isResolving=!1,vm.selectHeaderForm("view",statusUpdate)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditHeader=function(statusUpdate){vm.error=null,statusUpdate.updateDate=originalHeader[statusUpdate._id].updateDate,statusUpdate.title=originalHeader[statusUpdate._id].title,statusUpdate.description=originalHeader[statusUpdate._id].description,vm.selectHeaderForm("view",statusUpdate)},vm.deleteDocument=function(project,gate,statusUpdate){vm.error=null,vm.isResolving=!0,Projects.deleteStatusUpdate({projectId:project._id,projectGateId:gate._id,projectStatusUpdateId:statusUpdate._id},statusUpdate,function(res){vm.isResolving=!1,gate.projectStatusUpdates=_.without(gate.projectStatusUpdates,statusUpdate),vm.cancelNewDocument(),vm.selectedDocument=null},function(err){vm.isResolving=!1,vm.error=err.data.message})};var originalOverallStatus={};vm.editOverallStatus=function(statusUpdate){originalOverallStatus[statusUpdate._id]={newStatus:statusUpdate.deliveryStatus.overallStatusReview.newStatus,newComment:statusUpdate.deliveryStatus.overallStatusReview.newComment},vm.selectOverallStatusForm("edit",statusUpdate)},vm.saveEditOverallStatus=function(project,gate,statusUpdate){vm.error=null,vm.isResolving=!0,Projects.updateOverallDeliveryStatus({projectId:project._id,projectGateId:gate._id,projectStatusUpdateId:statusUpdate._id},statusUpdate,function(res){vm.isResolving=!1,vm.selectOverallStatusForm("view",statusUpdate)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditOverallStatus=function(statusUpdate){vm.error=null,statusUpdate.deliveryStatus.overallStatusReview.newStatus=originalOverallStatus[statusUpdate._id].newStatus,statusUpdate.deliveryStatus.overallStatusReview.newComment=originalOverallStatus[statusUpdate._id].newComment,vm.selectOverallStatusForm("view",statusUpdate)};var originalStatusAreaReview={};vm.editStatusArea=function(statusAreaReview){originalStatusAreaReview[statusAreaReview._id]=_.cloneDeep(statusAreaReview),vm.selectStatusAreaForm("edit",statusAreaReview)},vm.saveEditStatusArea=function(project,gate,statusUpdate,statusAreaReview){vm.error=null,vm.isResolving=!0,Projects.updateStatusAreaReview({projectId:project._id,projectGateId:gate._id,projectStatusUpdateId:statusUpdate._id,statusAreaReviewId:statusAreaReview._id},statusAreaReview,function(res){vm.isResolving=!1,vm.selectStatusAreaForm("view",statusAreaReview)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditStatusArea=function(statusAreaReview){vm.error=null,statusAreaReview.newStatus=originalStatusAreaReview[statusAreaReview._id].newStatus,statusAreaReview.newComment=originalStatusAreaReview[statusAreaReview._id].newComment,vm.selectStatusAreaForm("view",statusAreaReview)};var originalOutcomeReview={};vm.editOutcomeReview=function(outcomeReview){originalOutcomeReview[outcomeReview._id]=_.cloneDeep(outcomeReview),vm.selectOutcomeReviewForm("edit",outcomeReview)},vm.saveEditOutcomeReview=function(project,gate,statusUpdate,outcomeReview){vm.error=null,vm.isResolving=!0,Projects.updateOutcomeStatusReview({projectId:project._id,projectGateId:gate._id,projectStatusUpdateId:statusUpdate._id,outcomeStatusReviewId:outcomeReview._id},outcomeReview,function(res){vm.isResolving=!1,vm.error=null,originalOutcomeReview[outcomeReview._id].newStatus=outcomeReview.newStatus,originalOutcomeReview[outcomeReview._id].newComment=outcomeReview.newComment,vm.selectOutcomeReviewForm("view",outcomeReview)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditOutcomeReview=function(outcomeReview){vm.error=null,outcomeReview.newStatus=originalOutcomeReview[outcomeReview._id].newStatus,outcomeReview.newComment=originalOutcomeReview[outcomeReview._id].newComment,vm.selectOutcomeReviewForm("view",outcomeReview)},vm.estimateDurationDateOpened={},vm.openEstimateDurationDate=function(estimateDurationReview,$event){$event.preventDefault(),$event.stopPropagation(),vm.estimateDurationDateOpened[estimateDurationReview._id]=!0};var originalEstimateDurationReview={};vm.editEstimateDuration=function(estimateDurationReview){vm.error=null,originalEstimateDurationReview[estimateDurationReview._id]=_.cloneDeep(estimateDurationReview),vm.selectEstimateDurationForm("edit",estimateDurationReview)},vm.saveEditEstimateDuration=function(project,gate,statusUpdate,estimateDurationReview){vm.isResolving=!0,vm.error=null,Projects.updateEstimateDurationReviewForSU({projectId:project._id,projectGateId:gate._id,projectStatusUpdateId:statusUpdate._id,estimateDurationReviewId:estimateDurationReview._id},estimateDurationReview,function(res){vm.isResolving=!1,originalEstimateDurationReview[estimateDurationReview._id].newDate=estimateDurationReview.newDate,vm.selectEstimateDurationForm("view",estimateDurationReview)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditEstimateDuration=function(estimateDurationReview){vm.error=null,estimateDurationReview.newDate=originalEstimateDurationReview[estimateDurationReview._id].newDate,vm.selectEstimateDurationForm("view",estimateDurationReview)};var originalEstimateCostReview={};vm.editEstimateCost=function(estimateCostReview){originalEstimateCostReview[estimateCostReview._id]=_.cloneDeep(estimateCostReview),vm.selectEstimateCostForm("edit",estimateCostReview)},vm.saveEditEstimateCost=function(project,gate,statusUpdate,estimateCostReview){vm.error=null,vm.isResolving=!0,Projects.updateEstimateCostReviewForSU({projectId:project._id,projectGateId:gate._id,projectStatusUpdateId:statusUpdate._id,estimateCostReviewId:estimateCostReview._id},estimateCostReview,function(res){vm.isResolving=!1,originalEstimateCostReview[estimateCostReview._id].newCost=estimateCostReview.newCost,vm.selectEstimateCostForm("view",estimateCostReview)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditEstimateCost=function(estimateCostReview){vm.error=null,estimateCostReview.newCost=originalEstimateCostReview[estimateCostReview._id].newCost,vm.selectEstimateCostForm("view",estimateCostReview)};var originalEstimateCompletionReview={};vm.editEstimateCompletion=function(estimateCompletionReview){originalEstimateCompletionReview[estimateCompletionReview._id]=_.cloneDeep(estimateCompletionReview),vm.selectEstimateCompletionForm("edit",estimateCompletionReview)},vm.saveEditEstimateCompletion=function(project,gate,statusUpdate,estimateCompletionReview){vm.error=null,vm.isResolving=!0,Projects.updateEstimateCompletionReviewForSU({projectId:project._id,projectGateId:gate._id,projectStatusUpdateId:statusUpdate._id,estimateCompletionReviewId:estimateCompletionReview._id},estimateCompletionReview,function(res){vm.isResolving=!1,originalEstimateCompletionReview[estimateCompletionReview._id].newCompletion=estimateCompletionReview.newCompletion,vm.selectEstimateCompletionForm("view",estimateCompletionReview)},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.cancelEditEstimateCompletion=function(estimateCompletionReview){vm.error=null,estimateCompletionReview.newCompletion=originalEstimateCompletionReview[estimateCompletionReview._id].newCompletion,vm.selectEstimateCompletionForm("view",estimateCompletionReview)},vm.submitMissingFields={};var setSubmitMissingFields=function(statusUpdate){var missingFields=[];return _.each(statusUpdate.performances.duration.estimateDurationReviews,function(performanceReview){performanceReview.newDate||missingFields.push("Estimate date for "+performanceReview.estimateDuration.targetGate.name)}),_.each(statusUpdate.performances.cost.estimateCostReviews,function(performanceReview){performanceReview.newCost||missingFields.push("Estimate cost for "+performanceReview.estimateCost.targetGate.name)}),_.each(statusUpdate.performances.completion.estimateCompletionReviews,function(performanceReview){performanceReview.newCompletion||missingFields.push("Estimate completion for "+performanceReview.estimateCompletion.targetGate.name)}),missingFields};vm.dateConsistencyErrors={};var checkDateConsistency=function(editedStatusUpdate,editedGate,project){var gates=project.process.gates,dateConsistencyErrors=[],thisGate_EstimateDurationReview_NewDate=_.find(editedStatusUpdate.performances.duration.estimateDurationReviews,function(performanceReview){return performanceReview.estimateDuration.targetGate._id===editedGate._id}).newDate;return thisGate_EstimateDurationReview_NewDate=thisGate_EstimateDurationReview_NewDate&&new Date(thisGate_EstimateDurationReview_NewDate),_.each(gates,function(gate){if(gate.position<editedGate.position&&editedGate._id!==project.process.startGate){var previousGate_EstimateDuration_CurrentDate=_.find(gate.performances.duration.estimateDurations,function(performance){return performance.targetGate._id===gate._id}).currentRecord.gateDate;previousGate_EstimateDuration_CurrentDate=previousGate_EstimateDuration_CurrentDate&&new Date(previousGate_EstimateDuration_CurrentDate),previousGate_EstimateDuration_CurrentDate&&thisGate_EstimateDurationReview_NewDate&&previousGate_EstimateDuration_CurrentDate>thisGate_EstimateDurationReview_NewDate&&dateConsistencyErrors.push(editedGate.name+" Estimate date "+thisGate_EstimateDurationReview_NewDate.toDateString()+" cannot be earlier than previous gate "+gate.name+" "+previousGate_EstimateDuration_CurrentDate.toDateString())}if(gate.position>editedGate.position&&editedGate._id!==project.process.endGate){var nextGate_EstimateDuration_CurrentDate=_.find(gate.performances.duration.estimateDurations,function(performance){return performance.targetGate._id===gate._id}).currentRecord.gateDate;nextGate_EstimateDuration_CurrentDate=nextGate_EstimateDuration_CurrentDate&&new Date(nextGate_EstimateDuration_CurrentDate),nextGate_EstimateDuration_CurrentDate&&thisGate_EstimateDurationReview_NewDate&&thisGate_EstimateDurationReview_NewDate>nextGate_EstimateDuration_CurrentDate&&dateConsistencyErrors.push(editedGate.name+" Estimate date "+thisGate_EstimateDurationReview_NewDate.toDateString()+" cannot be later than next gate "+gate.name+" "+nextGate_EstimateDuration_CurrentDate.toDateString())}}),dateConsistencyErrors};vm.submit=function(project,gate,statusUpdate){vm.submitMissingFields[statusUpdate._id]=setSubmitMissingFields(statusUpdate),vm.dateConsistencyErrors[statusUpdate._id]=checkDateConsistency(statusUpdate,gate,project),vm.submitMissingFields[statusUpdate._id].length>0||vm.dateConsistencyErrors[statusUpdate._id].length>0||(vm.error=null,vm.isResolving=!0,Projects.submitStatusUpdate({projectId:project._id,projectGateId:gate._id,projectStatusUpdateId:statusUpdate._id},statusUpdate,function(res){vm.isResolving=!1,statusUpdate.approval=res.approval},function(err){vm.isResolving=!1,vm.error=err.data.message}))},vm.approve=function(project,gate,statusUpdate){vm.submitMissingFields[statusUpdate._id]=setSubmitMissingFields(statusUpdate),vm.dateConsistencyErrors[statusUpdate._id]=checkDateConsistency(statusUpdate,gate,project),vm.submitMissingFields[statusUpdate._id].length>0||vm.dateConsistencyErrors[statusUpdate._id].length>0||(vm.error=null,vm.isResolving=!0,Projects.approveStatusUpdate({projectId:project._id,projectGateId:gate._id,projectStatusUpdateId:statusUpdate._id},statusUpdate,function(res){vm.isResolving=!1,statusUpdate.approval=res.approval},function(err){vm.isResolving=!1,vm.error=err.data.message}))},vm.reject=function(project,gate,statusUpdate){vm.error=null,vm.isResolving=!0,Projects.rejectStatusUpdate({projectId:project._id,projectGateId:gate._id,projectStatusUpdateId:statusUpdate._id},statusUpdate,function(res){vm.isResolving=!1,statusUpdate.approval=res.approval},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.draft=function(project,gate,statusUpdate){vm.error=null,vm.isResolving=!0,Projects.draftStatusUpdate({projectId:project._id,projectGateId:gate._id,projectStatusUpdateId:statusUpdate._id},statusUpdate,function(res){vm.isResolving=!1,statusUpdate.approval=res.approval},function(err){vm.isResolving=!1,vm.error=err.data.message})},vm.projectReportDetails="financial";var modalProjectReport=function(size,project){$modal.open({templateUrl:"modules/project-status-updates/views/project-status-report.client.view.html",controller:function($scope,$modalInstance,project){$scope.project=project,$scope.cancelModal=function(){$modalInstance.dismiss()}},size:size,resolve:{project:function(){return project}},backdrop:"static",keyboard:!1})};vm.selectProjectReport=function(project){
modalProjectReport("lg",project)}}]),angular.module("qualitative-analysis-setup").config(["$stateProvider",function($stateProvider){$stateProvider.state("qualitative-analysis-setup",{url:"/qualitative-analysis-setup",templateUrl:"modules/qualitative-analysis-setup/views/qualitative-analysis-setup.client.view.html"})}]),angular.module("qualitative-analysis-setup").controller("QualitativeAnalysisSetupController",["$rootScope","$scope","$stateParams","$location","Authentication","QualitativeImpactScores","QualitativeImpactGroups","QualitativeImpacts","$q","_",function($rootScope,$scope,$stateParams,$location,Authentication,QualitativeImpactScores,QualitativeImpactGroups,QualitativeImpacts,$q,_){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){QualitativeImpacts.query(function(impacts){$scope.impacts=impacts},function(err){$scope.initError.push(err.data.message)}),QualitativeImpactGroups.query(function(groups){$scope.impactGroups=groups},function(err){$scope.initError.push(err.data.message)}),QualitativeImpactScores.query(function(scores){$scope.impactScores=scores},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.selectScoreForm=function(string){"view"===string&&($scope.switchScoreForm="view"),"edit"===string&&($scope.switchScoreForm="edit")},$scope.findScores=function(){$scope.initError=[],QualitativeImpactScores.query(function(scores){$scope.impactScores=scores},function(err){$scope.initError.push(err.data.message)})};var originalScore;$scope.selectScore=function(score){$scope.error=null,$scope.selectScoreForm("view"),$scope.impactScore=score,originalScore=_.clone(score)},$scope.updateScore=function(score){$scope.error=null,score.$update(function(response){$scope.impactScores=_.sortBy($scope.impactScores,"numericalValue"),$scope.selectScoreForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditScore=function(score){score.name=originalScore.name,score.numericalValue=originalScore.numericalValue,score.description=originalScore.description,$scope.selectScoreForm("view")},$scope.removeScore=function(score){$scope.error=null,score.$remove(function(response){$scope.impactScore=null,$scope.findScores(),$scope.selectScoreForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createScore=function(){$scope.error=null;var impactScore=new QualitativeImpactScores({name:"New impact score",numericalValue:0});impactScore.$save(function(response){$scope.findScores(),$scope.selectScoreForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.getTotalGroupWeights=function(groups){return groups?_.reduce(groups,function(memo,group){return memo+group.weight},0):void 0},$scope.getTotalImpactWeights=function(group){return group?_.reduce(group.impacts,function(memo,impact){return memo+impact.weight},0):void 0},$scope.switchGroupForm={},$scope.selectGroupForm=function(group,string){"view"===string&&($scope.switchGroupForm[group._id]="view"),"new"===string&&($scope.switchGroupForm[group._id]="new"),"edit"===string&&($scope.switchGroupForm[group._id]="edit")},$scope.switchImpactForm={},$scope.selectImpactForm=function(impact,string){"view"===string&&($scope.switchImpactForm[impact._id]="view"),"edit"===string&&($scope.switchImpactForm[impact._id]="edit")},$scope.groupList=function(){$scope.initError=[],QualitativeImpactGroups.query(function(groups){$scope.impactGroups=groups},function(err){$scope.initError.push(err.data.message)})},$scope.createGroup=function(){$scope.error=null;var impactGroup=new QualitativeImpactGroups({name:"New impact group",description:"new group description",weight:0,impacts:[]});impactGroup.$save(function(response){$scope.groupList()},function(errorResponse){$scope.error=errorResponse.data.message})};var originalEditGroup={};$scope.selectGroup=function(group){originalEditGroup[group._id]=_.clone(group),$scope.error=null,$scope.selectGroupForm(group,"edit")},$scope.updateGroup=function(group){group.$update(function(response){$scope.selectGroupForm(group,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditGroup=function(group){$scope.error=null,group.name=originalEditGroup[group._id].name,group.weight=originalEditGroup[group._id].weight,group.description=originalEditGroup[group._id].description,$scope.selectGroupForm(group,"view")},$scope.removeGroup=function(group){$scope.error=null,group.$remove(function(response){$scope.groupList()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createImpact=function(group){$scope.error=null;var impact=new QualitativeImpacts({name:"New impact",weight:0,description:""});impact.$save({groupId:group._id},function(res){group.impacts.push(res)},function(errorResponse){$scope.error=errorResponse.data.message})};var originalEditImpact={};$scope.selectEditImpact=function(group,impact){originalEditImpact[impact._id]=_.clone(impact),$scope.selectImpactForm(impact,"edit")},$scope.updateImpact=function(group,impact){QualitativeImpacts.update(impact,function(response){$scope.selectImpactForm(impact,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditImpact=function(impact){$scope.error=null,impact.name=originalEditImpact[impact._id].name,impact.weight=originalEditImpact[impact._id].weight,impact.description=originalEditImpact[impact._id].description,$scope.selectImpactForm(impact,"view")},$scope.removeImpact=function(group,impact){$scope.error=null,QualitativeImpacts.remove({groupId:group._id},impact,function(res){group.impacts=_.without(group.impacts,impact)},function(err){$scope.error=err.data.message})}}]),angular.module("qualitative-analysis-setup").factory("QualitativeImpactGroups",["$resource",function($resource){return $resource("qualitative-impact-groups/:qualitativeImpactGroupId",{qualitativeImpactGroupId:"@_id"},{update:{method:"PUT"}})}]),angular.module("qualitative-analysis-setup").factory("QualitativeImpactScores",["$resource",function($resource){return $resource("qualitative-impact-scores/:qualitativeImpactScoreId",{qualitativeImpactScoreId:"@_id"},{update:{method:"PUT"}})}]),angular.module("qualitative-analysis-setup").factory("QualitativeImpacts",["$resource",function($resource){return $resource("qualitative-impacts/:qualitativeImpactId",{qualitativeImpactId:"@_id"},{update:{method:"PUT"}})}]),angular.module("qualitative-analysis").config(["$stateProvider",function($stateProvider){$stateProvider.state("qualitative-analysis",{url:"/qualitative-analysis",templateUrl:"modules/qualitative-analysis/views/qualitative-analysis.client.view.html"})}]),angular.module("qualitative-analysis").controller("QualitativeAnalysisController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","QualitativeImpactGroups","QualitativeImpacts","QualitativeImpactScores","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,QualitativeImpactGroups,QualitativeImpacts,QualitativeImpactScores,_,$q){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){$scope.userData=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForEvaluation":!0},function(projects){$scope.projects=projects},function(err){$scope.initError.push(err.data.message)}),QualitativeImpactGroups.query(function(impactGroups){$scope.impactGroups=impactGroups},function(err){$scope.initError.push(err.data.message)}),QualitativeImpacts.query(function(impacts){$scope.impacts=impacts},function(err){$scope.initError.push(err.data.message)}),QualitativeImpactScores.query(function(scores){$scope.scores=scores},function(err){$scope.initError.push(err.data.message)}),$scope.showScore={}},$scope.userHasAuthorization=function(action,userData,project){if(action&&userData&&project){var userIsSuperhero,userIsProjectManager,userIsPortfolioManager;if("edit"===action)return userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsProjectManager=userData._id===project.identification.projectManager||userData._id===project.identification.backupProjectManager,project.portfolio&&(userIsPortfolioManager=userData._id===project.portfolio.portfolioManager||userData._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsProjectManager||userIsPortfolioManager}};$scope.switchProjectForm={},$scope.selectProjectForm=function(string){"default"===string&&($scope.switchProjectForm="default"),"new"===string&&($scope.switchProjectForm="new"),"view"===string&&($scope.switchProjectForm="view"),"edit"===string&&($scope.switchProjectForm="edit")},$scope.switchImpactForm={},$scope.selectImpactForm=function(assignedImpact,string){"view"===string&&($scope.switchImpactForm[assignedImpact._id]="view"),"edit"===string&&($scope.switchImpactForm[assignedImpact._id]="edit")};var originalImpactAssignment;$scope.selectProject=function(project){originalImpactAssignment={},Projects.get({projectId:project._id,retPropertiesString:"user created selection identification portfolio qualitativeAnalysis",deepPopulateArray:["portfolio","qualitativeAnalysis.group","qualitativeAnalysis.impacts.impact"]},function(res){$scope.selectedProject=res},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelViewProject=function(){$scope.selectedProject=null,originalImpactAssignment=null},$scope.selectImpactAssignment=function(assignedImpact){originalImpactAssignment[assignedImpact._id]=_.clone(assignedImpact),$scope.selectImpactForm(assignedImpact,"edit")},$scope.saveAssignedImpact=function(project,assignedGroup,assignedImpact){Projects.updateImpactAssignment({projectId:project._id,assignedGroupId:assignedGroup._id,assignedImpactId:assignedImpact._id},{scoreId:assignedImpact.score},function(res){$scope.selectImpactForm(assignedImpact,"view")},function(err){$scope.error=err.data.message})},$scope.cancelEditAssignedImpact=function(assignedImpact){assignedImpact.score=originalImpactAssignment[assignedImpact._id].score,$scope.selectImpactForm(assignedImpact,"view")}}]),angular.module("review-summaries").run(["Menus",function(Menus){}]),angular.module("review-summaries").config(["$stateProvider",function($stateProvider){$stateProvider.state("review-summaries",{url:"/review-summaries",templateUrl:"modules/review-summaries/views/portfolio-review-summary.client.view.html"})}]),angular.module("review-summaries").controller("ReviewSummariesController",["$rootScope","$scope","$stateParams","$location","Authentication","ReviewSummaries","Projects","Portfolios","GateProcessTemplates","_","$q","$modal",function($rootScope,$scope,$stateParams,$location,Authentication,ReviewSummaries,Projects,Portfolios,GateProcessTemplates,_,$q,$modal){$rootScope.staticMenu=!1;var vm=this;vm.initError=[];var portfolioProfiles=[],projectProfiles=[];vm.init=function(){Projects.query({"selection.selectedForEvaluation":!0},function(projects){vm.projects=projects},function(err){vm.initError.push(err.data.message)}),Portfolios.query(function(portfolios){vm.portfolios=portfolios,vm.portfolioTrees=createNodeTrees(portfolios)},function(err){vm.initError.push(err.data.message)}),GateProcessTemplates.query(function(gateProcesses){vm.gateProcesses=gateProcesses},function(err){vm.initError.push(err.data.message)}),ReviewSummaries.portfolioReviews(function(res){portfolioProfiles=res},function(err){vm.initError.push(err.data.message)}),ReviewSummaries.projectReviews(function(res){projectProfiles=res},function(err){vm.initError.push(err.data.message)})};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};vm.selectPortfolio=function(portfolio){return vm.selectedPortfolioReviews=!1,"unassigned"===portfolio?(vm.treeSelectionFlag="unassigned",vm.selectedReviewProfile=null,vm.selectedPortfolio={name:"Unassigned"},vm.projectProfilesView=_.find(projectProfiles,function(profile){return _.isNull(profile.portfolioId)}),vm.portfolioProfilesView=null,void(vm.selectedProjectProfile=null)):(vm.selectedReviewProfile=null,vm.treeSelectionFlag="portfolio",vm.selectedPortfolio=portfolio,vm.selectedProjectProfile=null,vm.projectProfilesView=_.find(projectProfiles,function(profile){return profile.portfolioId&&profile.portfolioId===portfolio._id}),void(vm.portfolioProfilesView=_.find(portfolioProfiles,function(profile){return profile.portfolio&&profile.portfolio._id===portfolio._id})))},vm.orderByProperty="qualitativeScore",vm.orderByDirection=!0,vm.orderByRanking=function(property,direction){vm.orderByProperty=property,vm.orderByDirection=direction},vm.filterProjectName="",vm.selectProjectProfile=function(profile){vm.selectedProjectProfile=profile,vm.selectedPortfolioReviews=!1},vm.viewPortfolioReviews=function(portfolio){vm.selectedPortfolioReviews=!0,vm.selectedProjectProfile=null},vm.reviewProfileDetails="financial";var modalReviewProfile=function(size,profile){$modal.open({templateUrl:"modules/review-summaries/views/project-profile.client.view.html",controller:function($scope,$modalInstance,profile){$scope.profile=profile,$scope.oneAtATime=!0,$scope.cancelModal=function(){$modalInstance.dismiss()}},size:size,resolve:{profile:function(){return profile}},backdrop:"static",keyboard:!1})};vm.selectReviewProfile=function(profile){modalReviewProfile("lg",profile)}}]),angular.module("review-summaries").factory("ReviewSummaries",["$resource",function($resource){return $resource("review-summaries",{},{projectReviews:{method:"GET",isArray:!0,url:"review-summaries/projectReviews"},portfolioReviews:{method:"GET",isArray:!0,url:"review-summaries/portfolioReviews"}})}]),angular.module("risk-analysis-setup").config(["$stateProvider",function($stateProvider){$stateProvider.state("risk-analysis-setup",{url:"/risk-analysis-setup",templateUrl:"modules/risk-analysis-setup/views/risk-analysis-setup.client.view.html"})}]),angular.module("risk-analysis-setup").controller("RiskAnalysisSetupController",["$rootScope","$scope","$stateParams","$location","Authentication","RiskCategories","RiskImpacts","RiskProbabilities","RiskSeverities","RiskSeverityAssignments","Risks","$q","_",function($rootScope,$scope,$stateParams,$location,Authentication,RiskCategories,RiskImpacts,RiskProbabilities,RiskSeverities,RiskSeverityAssignments,Risks,$q,_){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){RiskCategories.query(function(categories){$scope.riskCategories=categories},function(err){$scope.initError.push(err.data.message)}),RiskImpacts.query(function(impacts){$scope.impacts=impacts},function(err){$scope.initError.push(err.data.message)}),RiskProbabilities.query(function(probabilities){$scope.probabilities=probabilities},function(err){$scope.initError.push(err.data.message)}),RiskSeverities.query(function(severities){$scope.severities=severities},function(err){$scope.initError.push(err.data.message)}),RiskSeverityAssignments.query(function(severityAssignments){$scope.severityMatrix=createSeverityMatrix(severityAssignments)},function(err){$scope.initError.push(err.data.message)}),Risks.query(function(risks){$scope.risks=risks},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})});var createSeverityMatrix=function(severityAssignments){return _.chain(severityAssignments).groupBy("impact._id").map(function(value,key){return{impact:value[0].impact,probabilities:value}}).value()};$scope.switchRiskCategoryForm={},$scope.selectRiskCategoryForm=function(category,string){"view"===string&&($scope.switchRiskCategoryForm[category._id]="view"),"new"===string&&($scope.switchRiskCategoryForm[category._id]="new"),"edit"===string&&($scope.switchRiskCategoryForm[category._id]="edit")},$scope.switchRiskForm={},$scope.selectRiskForm=function(risk,string){"view"===string&&($scope.switchRiskForm[risk._id]="view"),"edit"===string&&($scope.switchRiskForm[risk._id]="edit")},$scope.riskCategoryList=function(){$scope.initError=[],RiskCategories.query(function(categories){$scope.riskCategories=categories},function(err){$scope.initError.push(err.data.message)})},$scope.createRiskCategory=function(){$scope.error=null;var riskCategory=new RiskCategories({name:"New risk category",description:"new category description",risks:[]});riskCategory.$save(function(response){$scope.riskCategoryList()},function(errorResponse){$scope.error=errorResponse.data.message})};var originalEditRiskCategory={};$scope.selectRiskCategory=function(category){originalEditRiskCategory[category._id]=_.clone(category),$scope.error=null,$scope.selectRiskCategoryForm(category,"edit")},$scope.updateRiskCategory=function(category){category.$update(function(response){$scope.selectRiskCategoryForm(category,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditRiskCategory=function(category){$scope.error=null,category.name=originalEditRiskCategory[category._id].name,category.description=originalEditRiskCategory[category._id].description,$scope.selectRiskCategoryForm(category,"view")},$scope.removeRiskCategory=function(category){$scope.error=null,category.$remove(function(response){$scope.riskCategoryList()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createRisk=function(category){$scope.error=null;var risk=new Risks({name:"New risk",description:""});risk.$save({groupId:category._id},function(res){category.risks.push(res)},function(errorResponse){$scope.error=errorResponse.data.message})};var originalEditRisk={};$scope.selectEditRisk=function(category,risk){originalEditRisk[risk._id]=_.clone(risk),$scope.selectRiskForm(risk,"edit")},$scope.updateRisk=function(category,risk){Risks.update(risk,function(response){$scope.selectRiskForm(risk,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditRisk=function(risk){$scope.error=null,risk.name=originalEditRisk[risk._id].name,risk.description=originalEditRisk[risk._id].description,$scope.selectRiskForm(risk,"view")},$scope.removeRisk=function(category,risk){$scope.error=null,Risks.remove({groupId:category._id},risk,function(res){category.risks=_.without(category.risks,risk)},function(err){$scope.error=err.data.message})},$scope.switchImpactForm={},$scope.selectImpactForm=function(impact,string){"view"===string&&($scope.switchImpactForm[impact._id]="view"),"new"===string&&($scope.switchImpactForm[impact._id]="new"),"edit"===string&&($scope.switchImpactForm[impact._id]="edit")},$scope.impactList=function(){$scope.initError=[],RiskImpacts.query(function(impacts){$scope.impacts=impacts},function(err){$scope.initError.push(err.data.message)})},$scope.createImpact=function(){$scope.error=null;var impact=new RiskImpacts({name:"New impact",description:"",impactValue:0});impact.$save(function(response){$scope.impactList(),$scope.assignmentsList()},function(errorResponse){$scope.error=errorResponse.data.message})};var originalEditImpact={};$scope.selectImpact=function(impact){originalEditImpact[impact._id]=_.clone(impact),$scope.error=null,$scope.selectImpactForm(impact,"edit")},$scope.updateImpact=function(impact){impact.$update(function(response){$scope.assignmentsList(),$scope.selectImpactForm(impact,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditImpact=function(impact){$scope.error=null,impact.name=originalEditImpact[impact._id].name,impact.description=originalEditImpact[impact._id].description,impact.impactValue=originalEditImpact[impact._id].impactValue,$scope.selectImpactForm(impact,"view")},$scope.removeImpact=function(impact){$scope.error=null,impact.$remove(function(response){$scope.impactList(),$scope.assignmentsList()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchProbabilityForm={},$scope.selectProbabilityForm=function(probability,string){"view"===string&&($scope.switchProbabilityForm[probability._id]="view"),"new"===string&&($scope.switchProbabilityForm[probability._id]="new"),"edit"===string&&($scope.switchProbabilityForm[probability._id]="edit")},$scope.probabilityList=function(){$scope.initError=[],RiskProbabilities.query(function(probabilities){$scope.probabilities=probabilities},function(err){$scope.initError.push(err.data.message)})},$scope.createProbability=function(){$scope.error=null;var probability=new RiskProbabilities({name:"New probability",description:"",probabilityValue:0});probability.$save(function(response){$scope.probabilityList(),$scope.assignmentsList()},function(errorResponse){$scope.error=errorResponse.data.message})};var originalEditProbability={};$scope.selectProbability=function(probability){originalEditProbability[probability._id]=_.clone(probability),$scope.error=null,$scope.selectProbabilityForm(probability,"edit")},$scope.updateProbability=function(probability){probability.$update(function(response){$scope.assignmentsList(),$scope.selectProbabilityForm(probability,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditProbability=function(probability){$scope.error=null,probability.name=originalEditProbability[probability._id].name,probability.description=originalEditProbability[probability._id].description,probability.probabilityValue=originalEditProbability[probability._id].probabilityValue,$scope.selectProbabilityForm(probability,"view")},$scope.removeProbability=function(probability){$scope.error=null,probability.$remove(function(response){$scope.probabilityList(),$scope.assignmentsList()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.dragControlListeners={orderChanged:function(event){for(var i=0;i<$scope.severities.length;i++)$scope.updateSeverity($scope.severities[i])}},$scope.selectSeverityForm=function(string){"view"===string&&($scope.switchSeverityForm="view"),"edit"===string&&($scope.switchSeverityForm="edit")},$scope.findSeverities=function(){$scope.initError=[],RiskSeverities.query(function(severities){$scope.severities=severities},function(err){$scope.initError.push(err.data.message)})};var originalSeverity;$scope.selectSeverity=function(severity){$scope.error=null,$scope.selectSeverityForm("view"),$scope.severity=severity,originalSeverity=_.clone(severity)},$scope.updateSeverity=function(severity){$scope.error=null,severity.position=_.indexOf($scope.severities,severity)+1,severity.$update(function(response){$scope.selectSeverityForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditSeverity=function(severity){severity.name=originalSeverity.name,severity.severityValue=originalSeverity.severityValue,severity.description=originalSeverity.description,$scope.selectSeverityForm("view")},$scope.removeSeverity=function(severity){$scope.error=null,severity.$remove(function(response){$scope.severities=_.without($scope.severities,severity);for(var i=0;i<$scope.severities.length;i++)$scope.severities[i].position>severity.position&&$scope.updateSeverity($scope.severities[i]);$scope.severity=null,$scope.selectSeverityForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createSeverity=function(){$scope.error=null;var severity=new RiskSeverities({name:"New severity",severityValue:0,position:$scope.severities.length+1});severity.$save(function(response){$scope.findSeverities(),$scope.selectSeverityForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.switchAssignmentForm={},$scope.selectAssignmentForm=function(assignment,string){"view"===string&&($scope.switchAssignmentForm[assignment._id]="view"),"new"===string&&($scope.switchAssignmentForm[assignment._id]="new"),"edit"===string&&($scope.switchAssignmentForm[assignment._id]="edit")},$scope.assignmentsList=function(){$scope.initError=[],RiskSeverityAssignments.query(function(assignments){$scope.severityMatrix=createSeverityMatrix(assignments)},function(errorResponse){$scope.error=errorResponse.data.message})};var originalSeverityAssignment={};$scope.selectAssignment=function(assignment){$scope.error=null,originalSeverityAssignment[assignment._id]=_.cloneDeep(assignment),$scope.selectAssignmentForm(assignment,"edit")},$scope.updateAssignment=function(assignment){var allowNull=function(obj){return obj?obj._id:null},copySeverityAssignment=_.cloneDeep(assignment);copySeverityAssignment.impact=copySeverityAssignment.impact._id,copySeverityAssignment.probability=copySeverityAssignment.probability._id,copySeverityAssignment.severity=allowNull(copySeverityAssignment.severity),RiskSeverityAssignments.update(copySeverityAssignment,function(res){$scope.selectAssignmentForm(assignment,"view")},function(err){$scope.error=err.data.message})},$scope.cancelEditAssignment=function(assignment){$scope.error=null,assignment.severity=originalSeverityAssignment[assignment._id].severity,$scope.selectAssignmentForm(assignment,"view")}}]),angular.module("risk-analysis-setup").factory("RiskCategories",["$resource",function($resource){return $resource("risk-categories/:riskCategoryId",{riskCategoryId:"@_id"},{update:{method:"PUT"}})}]),angular.module("risk-analysis-setup").factory("RiskImpacts",["$resource",function($resource){return $resource("risk-impacts/:riskImpactId",{riskImpactId:"@_id"},{update:{method:"PUT"}})}]),angular.module("risk-analysis-setup").factory("RiskProbabilities",["$resource",function($resource){return $resource("risk-probabilities/:riskProbabilityId",{riskProbabilityId:"@_id"},{update:{method:"PUT"}})}]),angular.module("risk-analysis-setup").factory("RiskSeverities",["$resource",function($resource){return $resource("risk-severities/:riskSeverityId",{riskSeverityId:"@_id"},{update:{method:"PUT"}})}]),angular.module("risk-analysis-setup").factory("RiskSeverityAssignments",["$resource",function($resource){return $resource("risk-severity-assignments/:riskSeverityAssignmentId",{riskSeverityAssignmentId:"@_id"},{update:{method:"PUT"}})}]),angular.module("risk-analysis-setup").factory("Risks",["$resource",function($resource){return $resource("risks/:riskId",{riskId:"@_id"},{update:{method:"PUT"}})}]),angular.module("risk-analysis").config(["$stateProvider",function($stateProvider){$stateProvider.state("risk-analysis",{url:"/risk-analysis",templateUrl:"modules/risk-analysis/views/risk-analysis.client.view.html"})}]),angular.module("risk-analysis").controller("RiskAnalysisController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","RiskCategories","Risks","RiskProbabilities","RiskImpacts","RiskSeverityAssignments","RiskSeverities","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,RiskCategories,Risks,RiskProbabilities,RiskImpacts,RiskSeverityAssignments,RiskSeverities,_,$q){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){$scope.userData=Authentication.user,Projects.query({"selection.active":!0,"selection.selectedForEvaluation":!0},function(projects){$scope.projects=projects},function(err){$scope.initError.push(err.data.message)}),RiskCategories.query(function(categories){$scope.riskCategories=categories},function(err){$scope.initError.push(err.data.message)}),Risks.query(function(risks){$scope.risks=risks},function(err){$scope.initError.push(err.data.message)}),RiskProbabilities.query(function(probabilities){$scope.probabilities=probabilities},function(err){$scope.initError.push(err.data.message)}),RiskImpacts.query(function(impacts){$scope.impacts=impacts},function(err){$scope.initError.push(err.data.message)}),RiskSeverities.query(function(severities){$scope.severities=severities},function(err){$scope.initError.push(err.data.message)}),RiskSeverityAssignments.query(function(severityAssignments){$scope.severityAssignments=severityAssignments},function(err){$scope.initError.push(err.data.message)}),$scope.showRiskAssignment={}},$scope.userHasAuthorization=function(action,userData,project){if(action&&userData&&project){var userIsSuperhero,userIsProjectManager,userIsPortfolioManager;if("edit"===action)return userIsSuperhero=!!_.some(userData.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role}),userIsProjectManager=userData._id===project.identification.projectManager||userData._id===project.identification.backupProjectManager,project.portfolio&&(userIsPortfolioManager=userData._id===project.portfolio.portfolioManager||userData._id===project.portfolio.backupPortfolioManager),userIsSuperhero||userIsProjectManager||userIsPortfolioManager}};$scope.switchProjectForm={},$scope.selectProjectForm=function(string){"default"===string&&($scope.switchProjectForm="default"),"new"===string&&($scope.switchProjectForm="new"),"view"===string&&($scope.switchProjectForm="view"),"edit"===string&&($scope.switchProjectForm="edit")},$scope.switchRiskForm={},$scope.selectRiskForm=function(assignedRisk,string){"view"===string&&($scope.switchRiskForm[assignedRisk._id]="view"),"edit"===string&&($scope.switchRiskForm[assignedRisk._id]="edit")};var originalRiskAssignment;$scope.selectProject=function(project){originalRiskAssignment={},Projects.get({projectId:project._id,retPropertiesString:"user created selection identification portfolio riskAnalysis",deepPopulateArray:["portfolio","riskAnalysis.category","riskAnalysis.risks.risk"]},function(res){$scope.selectedProject=res},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelViewProject=function(){$scope.selectedProject=null,originalRiskAssignment=null},$scope.selectRiskAssignment=function(assignedRisk){originalRiskAssignment[assignedRisk._id]=_.clone(assignedRisk),$scope.selectRiskForm(assignedRisk,"edit")},$scope.findSeverityAssignment=function(assignedRisk){return _.find($scope.severityAssignments,function(assignment){return assignment.probability._id===assignedRisk.probability&&assignment.impact._id===assignedRisk.impact})},$scope.saveAssignedRisk=function(project,assignedCategory,assignedRisk){Projects.updateRiskAssignment({projectId:project._id,assignedCategoryId:assignedCategory._id,assignedRiskId:assignedRisk._id},{impactId:assignedRisk.impact,probabilityId:assignedRisk.probability},function(res){$scope.selectRiskForm(assignedRisk,"view")},function(err){$scope.error=err.data.message})},$scope.cancelEditAssignedRisk=function(assignedRisk){assignedRisk.impact=originalRiskAssignment[assignedRisk._id].impact,assignedRisk.probability=originalRiskAssignment[assignedRisk._id].probability,$scope.selectRiskForm(assignedRisk,"view")}}]),angular.module("roadmaps").run(["Menus",function(Menus){}]),angular.module("roadmaps").config(["$stateProvider",function($stateProvider){$stateProvider.state("definition-roadmap",{url:"/roadmaps",templateUrl:"modules/roadmaps/views/roadmaps.client.view.html"})}]),angular.module("roadmaps").controller("RoadmapsController",["$rootScope","$scope","$stateParams","$location","Authentication","Projects","Portfolios","GateProcessTemplates","Roadmaps","_","$q","$modal",function($rootScope,$scope,$stateParams,$location,Authentication,Projects,Portfolios,GateProcessTemplates,Roadmaps,_,$q,$modal){$rootScope.staticMenu=!1;var vm=this;vm.initError=[];var roadmaps=[];vm.portfoliosSelectedForRoadmap={},vm.init=function(){vm.selectedRoadmapType="definition",Portfolios.query(function(portfolios){
vm.portfolios=portfolios,vm.portfolioTrees=createNodeTrees(portfolios),_.each(portfolios,function(portfolio){vm.portfoliosSelectedForRoadmap[portfolio._id]=!1}),vm.portfoliosSelectedForRoadmap.all=!1,vm.portfoliosSelectedForRoadmap.unassigned=!1},function(err){vm.initError.push(err.data.message)}),GateProcessTemplates.query(function(gateProcesses){vm.gateProcesses=gateProcesses},function(err){vm.initError.push(err.data.message)}),Roadmaps.getDefinitionRoadmap(function(res){roadmaps=res,console.log(res)},function(err){vm.initError.push(err.data.message)})};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};vm.definitionRoadmaps=[],vm.isPortfolioSelectionEmpty=function(){var flag=!0;return _.each(vm.portfoliosSelectedForRoadmap,function(v,k){v&&(flag=!1)}),flag},vm.selectPortfolio=function(portfolio){"unassigned"===portfolio?vm.portfoliosSelectedForRoadmap.unassigned?vm.portfoliosSelectedForRoadmap.unassigned=!1:vm.portfoliosSelectedForRoadmap.unassigned=!0:"all"===portfolio?vm.portfoliosSelectedForRoadmap.all?(vm.portfoliosSelectedForRoadmap.all=!1,_.forEach(vm.portfoliosSelectedForRoadmap,function(v,k){vm.portfoliosSelectedForRoadmap[k]=!1})):(vm.portfoliosSelectedForRoadmap.all=!0,_.each(vm.portfoliosSelectedForRoadmap,function(v,k){vm.portfoliosSelectedForRoadmap[k]=!0})):vm.portfoliosSelectedForRoadmap[portfolio._id]?vm.portfoliosSelectedForRoadmap[portfolio._id]=!1:vm.portfoliosSelectedForRoadmap[portfolio._id]=!0};var createDefinitionRoadmap=function(){var arrayOfPortfolioIds=_.keys(_.pick(vm.portfoliosSelectedForRoadmap,function(v,k){return v}));vm.definitionRoadmaps=_.filter(roadmaps,function(project){return _.some(arrayOfPortfolioIds,function(portfolioId){return"unassigned"===portfolioId&&null===project.portfolio?!0:project.portfolio===portfolioId})})};$scope.$watch(function($scope){return vm.portfoliosSelectedForRoadmap},function(newValue,oldValue){newValue!==oldValue&&createDefinitionRoadmap()},!0),vm.getPortfolioSelectionStatus=function(portfolio){return"all"===portfolio?vm.portfoliosSelectedForRoadmap.all:"unassigned"===portfolio?vm.portfoliosSelectedForRoadmap.unassigned:vm.portfoliosSelectedForRoadmap[portfolio._id]},vm.onlyDefinitionProjects=function(projects){return _.filter(projects,function(project){return project.identification.reqStartDate&&project.identification.reqEndDate})},vm.onlyDeliveryProjects=function(projects){return _.filter(projects,function(project){return project.gateData.start&&project.gateData.end})};var modalProjectProfile=function(size,project){$modal.open({templateUrl:"modules/roadmaps/views/project-details.client.view.html",controller:function($scope,$modalInstance,project){$scope.selectedProject=project,$scope.cancelModal=function(){$modalInstance.dismiss()}},size:size,resolve:{project:function(){return project}},backdrop:"static",keyboard:!1})};vm.selectProjectProfile=function(project){modalProjectProfile("lg",project)}}]),angular.module("roadmaps").factory("Roadmaps",["$resource",function($resource){return $resource("roadmaps",{},{getDefinitionRoadmap:{method:"GET",isArray:!0,url:"roadmaps/definition"}})}]),angular.module("status-report-setup").config(["$stateProvider",function($stateProvider){$stateProvider.state("status-report-setup",{url:"/status-report-setup",templateUrl:"modules/status-report-setup/views/status-report-setup.client.view.html"})}]),angular.module("status-report-setup").controller("StatusReportSetupController",["$rootScope","$scope","$stateParams","$location","Authentication","LogStatusIndicators","LogStatusAreas","_","$q","StatusReportTypes",function($rootScope,$scope,$stateParams,$location,Authentication,LogStatusIndicators,LogStatusAreas,_,$q,StatusReportTypes){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){LogStatusIndicators.query(function(logStatusIndicators){$scope.logStatusIndicators=logStatusIndicators},function(err){$scope.initError.push(err.data.message)}),LogStatusAreas.query(function(logStatusAreas){$scope.logStatusAreas=logStatusAreas},function(err){$scope.initError.push(err.data.message)}),StatusReportTypes.query(function(res){$scope.statusReportTypes=res},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.colors=[{colorName:"Silver",colorString:"silver"},{colorName:"Gray",colorString:"gray"},{colorName:"White",colorString:"white"},{colorName:"Red",colorString:"red"},{colorName:"Purple",colorString:"purple"},{colorName:"Fuchsia",colorString:"fuchsia"},{colorName:"Green",colorString:"green"},{colorName:"Olive",colorString:"olive"},{colorName:"Yellow",colorString:"yellow"},{colorName:"Navy",colorString:"navy"},{colorName:"Teal",colorString:"teal"},{colorName:"Aqua",colorString:"aqua"},{colorName:"Orange",colorString:"orange"}],$scope.switchStatusIndicatorForm={},$scope.selectStatusIndicatorForm=function(status,string){"view"===string&&($scope.switchStatusIndicatorForm[status._id]="view"),"new"===string&&($scope.switchStatusIndicatorForm[status._id]="new"),"edit"===string&&($scope.switchStatusIndicatorForm[status._id]="edit")},$scope.findStatusIndicators=function(){$scope.initError=[],LogStatusIndicators.query(function(statuses){$scope.logStatusIndicators=statuses},function(err){$scope.initError.push(err.data.message)})};var originalStatusIndicator={};$scope.selectStatusIndicator=function(statusIndicator){$scope.error=null,originalStatusIndicator[statusIndicator._id]=_.clone(statusIndicator),$scope.selectStatusIndicatorForm(statusIndicator,"edit")},$scope.updateStatusIndicator=function(statusIndicator){$scope.error=null,statusIndicator.$update(function(res){$scope.findStatusIndicators(),$scope.selectStatusIndicatorForm(statusIndicator,"view")},function(err){$scope.error=err.data.message})},$scope.cancelEditStatusIndicator=function(statusIndicator){statusIndicator.name=originalStatusIndicator[statusIndicator._id].name,statusIndicator.description=originalStatusIndicator[statusIndicator._id].description,$scope.selectStatusIndicatorForm(statusIndicator,"view")},$scope.removeStatusIndicator=function(statusIndicator){$scope.error=null,statusIndicator.$remove(function(res){$scope.findStatusIndicators()},function(err){$scope.error=err.data.message})},$scope.createStatusIndicator=function(){$scope.error=null;var statusIndicator=new LogStatusIndicators({name:"New status indicator"});statusIndicator.$save(function(res){$scope.findStatusIndicators(),$scope.selectStatusIndicatorForm(res,"view")},function(err){$scope.error=err.data.message})},$scope.applicableToList=[{name:"Project",text:"project"},{name:"Portfolio",text:"portfolio"},{name:"Project + Portfolio",text:"both"}],$scope.switchStatusAreaForm={},$scope.selectStatusAreaForm=function(status,string){"view"===string&&($scope.switchStatusAreaForm[status._id]="view"),"new"===string&&($scope.switchStatusAreaForm[status._id]="new"),"edit"===string&&($scope.switchStatusAreaForm[status._id]="edit")},$scope.findStatusAreas=function(){$scope.initError=[],LogStatusAreas.query(function(statuses){$scope.logStatusAreas=statuses},function(err){$scope.initError.push(err.data.message)})};var originalStatusArea={};$scope.selectStatusArea=function(statusArea){$scope.error=null,originalStatusArea[statusArea._id]=_.clone(statusArea),$scope.selectStatusAreaForm(statusArea,"edit")},$scope.updateStatusArea=function(statusArea){$scope.error=null,statusArea.$update(function(res){$scope.findStatusAreas(),$scope.selectStatusAreaForm(statusArea,"view")},function(err){$scope.error=err.data.message})},$scope.cancelEditStatusArea=function(statusArea){statusArea.name=originalStatusArea[statusArea._id].name,statusArea.description=originalStatusArea[statusArea._id].description,statusArea.applicableTo=originalStatusArea[statusArea._id].applicableTo,$scope.selectStatusAreaForm(statusArea,"view")},$scope.removeStatusArea=function(statusArea){$scope.error=null,statusArea.$remove(function(res){$scope.findStatusAreas()},function(err){$scope.error=err.data.message})},$scope.createStatusArea=function(){$scope.error=null;var statusArea=new LogStatusAreas({name:"New status area",applicableTo:"both"});statusArea.$save(function(res){$scope.findStatusAreas(),$scope.selectStatusAreaForm(res,"view")},function(err){$scope.error=err.data.message})},$scope.switchStatusTypeForm={},$scope.selectStatusTypeForm=function(status,string){"view"===string&&($scope.switchStatusTypeForm[status._id]="view"),"new"===string&&($scope.switchStatusTypeForm[status._id]="new"),"edit"===string&&($scope.switchStatusTypeForm[status._id]="edit")},$scope.findStatusTypes=function(){$scope.initError=[],StatusReportTypes.query(function(statuses){$scope.statusReportTypes=statuses},function(err){$scope.initError.push(err.data.message)})};var originalStatusType={};$scope.selectStatusType=function(statusType){$scope.error=null,originalStatusType[statusType._id]=_.clone(statusType),$scope.selectStatusTypeForm(statusType,"edit")},$scope.updateStatusType=function(statusType){$scope.error=null,statusType.$update(function(res){$scope.findStatusTypes(),$scope.selectStatusTypeForm(statusType,"view")},function(err){$scope.error=err.data.message})},$scope.cancelEditStatusType=function(statusType){statusType.name=originalStatusType[statusType._id].name,statusType.description=originalStatusType[statusType._id].description,$scope.selectStatusTypeForm(statusType,"view")},$scope.removeStatusType=function(statusType){$scope.error=null,statusType.$remove(function(res){$scope.findStatusTypes()},function(err){$scope.error=err.data.message})},$scope.createStatusType=function(){$scope.error=null;var statusType=new StatusReportTypes({name:"New report type"});statusType.$save(function(res){$scope.findStatusTypes(),$scope.selectStatusTypeForm(res,"view")},function(err){$scope.error=err.data.message})}}]),angular.module("status-report-setup").factory("LogStatusAreas",["$resource",function($resource){return $resource("log-status-areas/:logStatusAreaId",{logStatusAreaId:"@_id"},{update:{method:"PUT"}})}]),angular.module("status-report-setup").factory("LogStatusIndicators",["$resource",function($resource){return $resource("log-status-indicators/:logStatusIndicatorId",{logStatusIndicatorId:"@_id"},{update:{method:"PUT"}})}]),angular.module("status-report-setup").factory("StatusReportTypes",["$resource",function($resource){return $resource("status-report-types/:statusReportTypeId",{statusReportTypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("status-summaries").run(["Menus",function(Menus){}]),angular.module("status-summaries").config(["$stateProvider",function($stateProvider){$stateProvider.state("portfolio-status-summary",{url:"/portfolio-status-summary",templateUrl:"modules/status-summaries/views/portfolio-summary.client.view.html"})}]),angular.module("status-summaries").controller("StatusSummaryController",["$rootScope","$scope","$stateParams","$location","Authentication","StatusSummaries","LogStatusAreas","Projects","Portfolios","GateProcessTemplates","_","$q","$modal",function($rootScope,$scope,$stateParams,$location,Authentication,StatusSummaries,LogStatusAreas,Projects,Portfolios,GateProcessTemplates,_,$q,$modal){$rootScope.staticMenu=!1;var vm=this;vm.initError=[];var projects=[];vm.init=function(){Portfolios.query(function(portfolios){vm.portfolios=portfolios,vm.portfolioTrees=createNodeTrees(portfolios)},function(err){vm.initError.push(err.data.message)}),Projects.query({"selection.active":!0,"selection.selectedForDelivery":!0,"process.assignmentConfirmed":!0},function(res){projects=res,console.log(res)},function(err){vm.initError.push(err.data.message)}),LogStatusAreas.query(function(res){vm.logStatusAreas=res},function(err){vm.initError.push(err.data.message)})};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};vm.selectPortfolio=function(portfolio){return"all"===portfolio?(vm.treeSelectionFlag="all",vm.selectedProjectProfile=null,vm.selectedPortfolio={name:"All"},void(vm.projects=projects)):"unassigned"===portfolio?(vm.treeSelectionFlag="unassigned",vm.selectedProjectProfile=null,vm.selectedPortfolio={name:"Unassigned"},void(vm.projects=_.filter(projects,function(project){return _.isNull(project.portfolio)}))):(vm.selectedProjectProfile=null,vm.treeSelectionFlag="portfolio",vm.selectedPortfolio=portfolio,void(vm.projects=_.filter(projects,function(project){return project.portfolio&&project.portfolio._id===portfolio._id})))},vm.orderByProperty="qualitativeScore",vm.orderByDirection=!0,vm.orderByRanking=function(property,direction){vm.orderByProperty=property,vm.orderByDirection=direction},vm.projectProfileDetails="financial";var modalProjectProfile=function(size,project){$modal.open({templateUrl:"modules/status-summaries/views/project-profile.client.view.html",controller:function($scope,$modalInstance,project){$scope.project=project,$scope.cancelModal=function(){$modalInstance.dismiss()}},size:size,resolve:{project:function(){return project}},backdrop:"static",keyboard:!1})};vm.selectProjectProfile=function(project){modalProjectProfile("lg",project)}}]),angular.module("status-summaries").factory("StatusSummaries",["$resource",function($resource){return $resource("status-summaries",{},{portfolioSummary:{method:"GET",isArray:!0,url:"status-summaries/portfolioSummary"}})}]),angular.module("strategy-alignment").config(["$stateProvider",function($stateProvider){$stateProvider.state("strategy-alignment",{url:"/strategy-alignment",templateUrl:"modules/strategy-alignment/views/strategy-alignment.client.view.html"})}]),angular.module("strategy-alignment").controller("StrategyAlignmentController",["$rootScope","$scope","$stateParams","$location","Authentication","StrategyNodes","Projects","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,StrategyNodes,Projects,_,$q){$rootScope.staticMenu=!1,$scope.isResolving=!1,$scope.initError=[],$scope.init=function(){$q.all([StrategyNodes.query().$promise,Projects.query({"selection.active":!0}).$promise]).then(function(data){var strategyNodes=data[0],projects=data[1];$scope.strategyNodes=strategyNodes,$scope.strategyTrees=createNodeTrees(strategyNodes),$scope.projects=projects,$scope.selectedAssignments={},$scope.selectedAssignments.assignedProjects={},$scope.selectedAssignments.unassignedProjects=[],createProjectAssignments(projects,strategyNodes,$scope.selectedAssignments)})};var createProjectAssignments=function(projects,strategyNodes,selectedAssignments){_.forEach(strategyNodes,function(node){selectedAssignments.assignedProjects[node._id]=[]}),_.map(projects,function(project){_.isNull(project.parent)||_.isUndefined(project.parent)?selectedAssignments.unassignedProjects.push(project):_.forEach(strategyNodes,function(node){project.parent===node._id&&selectedAssignments.assignedProjects[node._id].push(project)})})},d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role||"portfolioManager"===role})});var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees};$scope.selectNode=function(node){$scope.error=null,$scope.selectedNode=node},$scope.dragControlListenersAssigned={itemMoved:function(eventObj){var movedProjectFromAssigned=eventObj.source.itemScope.project,originalParent=movedProjectFromAssigned.parent;movedProjectFromAssigned.parent=null,$scope.error=null,$scope.isResolving=!0,Projects.updateStrategyAssignment(movedProjectFromAssigned,function(res){$scope.isResolving=!1},function(err){$scope.isResolving=!1,$scope.error=err.data.message,movedProjectFromAssigned.parent=originalParent,eventObj.dest.sortableScope.removeItem(eventObj.dest.index),eventObj.source.itemScope.sortableScope.insertItem(eventObj.source.index,movedProjectFromAssigned)})}},$scope.dragControlListenersUnassigned={itemMoved:function(eventObj){var movedProjectFromUnassigned=eventObj.source.itemScope.project;movedProjectFromUnassigned.parent=$scope.selectedNode._id,$scope.error=null,$scope.isResolving=!0,Projects.updateStrategyAssignment(movedProjectFromUnassigned,function(res){$scope.isResolving=!1},function(err){$scope.isResolving=!1,$scope.error=err.data.message,movedProjectFromUnassigned.parent=null,eventObj.dest.sortableScope.removeItem(eventObj.dest.index),eventObj.source.itemScope.sortableScope.insertItem(eventObj.source.index,movedProjectFromUnassigned)})}}}]),angular.module("strategy-node-setup").config(["$stateProvider",function($stateProvider){$stateProvider.state("strategy-node-setup",{url:"/strategy-node-setup",templateUrl:"modules/strategy-node-setup/views/strategy-node-setup.client.view.html"})}]),angular.module("strategy-node-setup").controller("StrategyNodeSetupController",["$rootScope","$scope","$stateParams","$location","Authentication","StrategyNodes","StrategyNodeTypes","Subusers","_","$q",function($rootScope,$scope,$stateParams,$location,Authentication,StrategyNodes,StrategyNodeTypes,Subusers,_,$q){$rootScope.staticMenu=!1,$scope.initError=[],$scope.init=function(){StrategyNodes.query(function(strategyNodes){$scope.strategyNodes=strategyNodes,$scope.strategyTrees=createNodeTrees(strategyNodes)},function(err){$scope.initError.push(err.data.message)}),StrategyNodeTypes.query(function(strategyNodeTypes){$scope.strategyNodeTypes=strategyNodeTypes},function(err){$scope.initError.push(err.data.message)})};var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);$scope.userHasAuthorization=_.some(obj.user.roles,function(role){return"superAdmin"===role||"admin"===role||"pmo"===role})}),$scope.switchTypeForm={},$scope.selectTypeForm=function(type,string){"view"===string&&($scope.switchTypeForm[type._id]="view"),"new"===string&&($scope.switchTypeForm[type._id]="new"),"edit"===string&&($scope.switchTypeForm[type._id]="edit")},$scope.findTypes=function(){$scope.initError=[],StrategyNodeTypes.query(function(types){$scope.strategyNodeTypes=types},function(err){$scope.initError.push(err.data.message)})},$scope.selectType=function(type){$scope.selectTypeForm(type,"edit")},$scope.updateType=function(type){type.$update(function(response){$scope.findTypes(),$scope.selectTypeForm(type,"view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelEditType=function(type){$scope.findTypes(),$scope.selectTypeForm(type,"view")},$scope.removeType=function(type){type.$remove(function(response){$scope.findTypes()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.createType=function(){var strategyNodeType=new StrategyNodeTypes({name:"New strategy node type"});strategyNodeType.$save(function(response){$scope.name="",$scope.findTypes(),$scope.selectTypeForm(response._id,"view")},function(errorResponse){$scope.error=errorResponse.data.message})};var createNodeTrees=function(strategicNodes){var nodeTrees=[];strategicNodes.forEach(function(node){null===node.parent&&nodeTrees.push({node:node,nodeTrees:[]})});var recursionOnNodeTrees=function(nodeTrees){nodeTrees.forEach(function(node){strategicNodes.forEach(function(strategicNode){null!==strategicNode.parent&&node.node._id===strategicNode.parent&&node.nodeTrees.push({node:strategicNode,nodeTrees:[]})}),recursionOnNodeTrees(node.nodeTrees)})};return recursionOnNodeTrees(nodeTrees),nodeTrees},ancestorsArray=function(parent){if(parent){var retArray=[];return retArray.push(parent._id),_.map(parent.ancestors,function(ancestor){retArray.push(ancestor)}),retArray}return[]};$scope.strategyNodeList=function(){$scope.initError=[],StrategyNodes.query(function(strategyNodes){$scope.strategyNodes=strategyNodes,$scope.strategyTrees=createNodeTrees(strategyNodes)},function(err){$scope.initError.push(err.data.message)})},$scope.switchStrategyNodeForm="view",$scope.selectStrategyNodeForm=function(string){"view"===string&&($scope.switchStrategyNodeForm="view"),"new"===string&&($scope.switchStrategyNodeForm="new"),"edit"===string&&($scope.switchStrategyNodeForm="edit")};var masterStrategyNode={};$scope.selectStrategyNode=function(strategyNodeId){$scope.editParents=[],$scope.selectStrategyNodeForm("view"),StrategyNodes.get({strategyNodeId:strategyNodeId},function(strategyNode){masterStrategyNode=strategyNode,$scope.editStrategyNode=_.clone(strategyNode),_.find($scope.strategyNodes,function(chkItem){return _.get(chkItem,"parent")===strategyNode._id})?$scope.editParents=[_.get(strategyNode,"parent")]:$scope.editParents=_.filter($scope.strategyNodes,function(item){return item._id===strategyNodeId?!1:_.isNull(item.parent)||_.isUndefined(item.parent)?!0:!_.find($scope.strategyNodes,function(chkItem){return _.get(chkItem,"parent")===item._id&&_.find($scope.strategyNodes,function(chkItem2){return _.get(chkItem2,"parent")===chkItem._id})})}),$scope.error=null},function(errorResponse){$scope.error=errorResponse.data.message})};var editParent=function(parent){return parent?_.get($scope.editStrategyNode,"parent._id"):null},editType=function(type){return type?_.get($scope.editStrategyNode,"type._id"):null};$scope.update=function(){masterStrategyNode.name=_.get($scope.editStrategyNode,"name"),masterStrategyNode.parent=editParent(_.get($scope.editStrategyNode,"parent")),masterStrategyNode.type=editType(_.get($scope.editStrategyNode,"type")),masterStrategyNode.ancestors=ancestorsArray(_.get($scope.editStrategyNode,"parent")),masterStrategyNode.$update(function(){$scope.strategyNodeList(),$scope.selectStrategyNode(masterStrategyNode._id),$scope.selectStrategyNodeForm("view")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(){_.find($scope.strategyNodes,function(chkItem){return _.get(chkItem,"parent")===masterStrategyNode._id})?$scope.error="Only strategy nodes without children can be deleted":masterStrategyNode.$remove(function(response){for(var i in $scope.strategyNodes)$scope.strategyNodes[i]===masterStrategyNode&&$scope.strategyNodes.splice(i,1);$scope.strategyNodeList(),$scope.selectStrategyNodeForm("view"),$scope.editStrategyNode=null},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.selectNewStrategyNode=function(){$scope.selectStrategyNodeForm("new"),$scope.error=null,$scope.newStrategyNode={},$scope.newStrategyNode.name=null,$scope.newStrategyNode.type=null,$scope.newStrategyNode.parent=null,$scope.newParents=_.filter($scope.strategyNodes,function(item){return _.isNull(item.parent)||_.isUndefined(item.parent)?!0:!_.find($scope.strategyNodes,function(chkItem){return _.get(chkItem,"parent")===item._id&&_.find($scope.strategyNodes,function(chkItem2){return _.get(chkItem2,"parent")===chkItem._id})})})},$scope.create=function(){var strategyNode=new StrategyNodes({name:_.get($scope.newStrategyNode,"name"),type:_.get($scope.newStrategyNode,"type._id"),parent:_.get($scope.newStrategyNode,"parent._id"),ancestors:ancestorsArray(_.get($scope.newStrategyNode,"parent"))});strategyNode.$save(function(response){$scope.strategyNodeList(),$scope.selectStrategyNode(response._id),$scope.selectStrategyNodeForm("view"),$scope.newStrategyNode.name=null,$scope.newStrategyNode.type=null,$scope.newStrategyNode.parent=null},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("strategy-node-setup").factory("StrategyNodeTypes",["$resource",function($resource){return $resource("strategy-node-types/:strategyNodeTypeId",{strategyNodeTypeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("strategy-node-setup").factory("StrategyNodes",["$resource",function($resource){return $resource("strategy-nodes/:strategyNodeId",{strategyNodeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("subusers").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin","Subusers","menuTitle"),Menus.addSubMenuItem("topbar","admin","List Subusers","subusers"),Menus.addSubMenuItem("topbar","admin","New Subuser","subusers/create")}]),angular.module("subusers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSubusers",{url:"/subusers",templateUrl:"modules/subusers/views/list-subusers.client.view.html"}).state("createSubuser",{url:"/subusers/create",templateUrl:"modules/subusers/views/create-subuser.client.view.html"}).state("editSubuser",{url:"/subusers/:subuserId",templateUrl:"modules/subusers/views/edit-subuser.client.view.html"})}]),angular.module("subusers").controller("SubusersController",["$rootScope","$http","$scope","$stateParams","$location","Authentication","Subusers","$q","_",function($rootScope,$http,$scope,$stateParams,$location,Authentication,Subusers,$q,_){$rootScope.staticMenu=!1;var d=$q.defer();d.resolve(Authentication),d.promise.then(function(data){var obj=_.clone(data);_.map(_.get(obj,"user.roles"),function(role){obj[role]=!0}),$scope.authentication=obj}),$scope.roles=[{roleString:"admin",roleTitle:"Administrator",selected:!1},{roleString:"pmo",roleTitle:"PMO",selected:!1},{roleString:"projectManager",roleTitle:"Project Manager",selected:!1},{roleString:"portfolioManager",roleTitle:"Portfolio Manager",selected:!1},{roleString:"executive",roleTitle:"Executive",selected:!1}],$scope.credentials={roles:["portfolioManager"]},$scope.subuserFilter={firstName:"",lastName:"",company:"",email:"",username:"",roles:[]},$scope.hasRole=function(subuser){if($scope.subuserFilter.roles.length){var foundRole=!1;return _.forEach(subuser.roles,function(role){_.forEach($scope.subuserFilter.roles,function(fRole){role===fRole&&(foundRole=!0)})}),foundRole}return!0},$scope.getDisplayRoleName=function(role){return role?_.find($scope.roles,"roleString",role).roleTitle:void 0},$scope.hasNoRolesCheck=function(roles){return _.isEmpty(roles)},$scope.create=function(){$http.post("/subusers",$scope.credentials).success(function(response){$location.path("subusers")}).error(function(response){$scope.error=response.message})},$scope.remove=function(subuser){if(subuser){subuser.$remove();for(var i in $scope.subusers)$scope.subusers[i]===subuser&&$scope.subusers.splice(i,1)}else $scope.subuser.$remove(function(){$location.path("subusers")})},$scope.switchUserForm={};var originalSubuser={};$scope.editSubuser=function(subuser){originalSubuser[subuser._id]=_.cloneDeep(subuser),$scope.switchUserForm[subuser._id]="edit"},$scope.cancelEditSubuser=function(subuser){subuser.firstName=originalSubuser[subuser._id].firstName,subuser.lastName=originalSubuser[subuser._id].lastName,subuser.email=originalSubuser[subuser._id].email,subuser.title=originalSubuser[subuser._id].title,subuser.organization=originalSubuser[subuser._id].organization,subuser.roles=originalSubuser[subuser._id].roles,subuser.username=originalSubuser[subuser._id].username,subuser.password=originalSubuser[subuser._id].password,$scope.switchUserForm[subuser._id]="view"},$scope.update=function(){var subuser=$scope.subuser;subuser.$update(function(res){$scope.switchUserForm[subuser._id]="view"},function(err){$scope.error=err.data.message})},$scope.find=function(){$scope.subusers=Subusers.query()},$scope.findOne=function(){$scope.subuser=Subusers.get({subuserId:$stateParams.subuserId})}}]),angular.module("subusers").filter("filterSubuser",[function(){return function(input){return"filterSubuser filter: "+input}}]),angular.module("subusers").factory("Subusers",["$resource",function($resource){return $resource("subusers/:subuserId",{subuserId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$rootScope","$scope","$http","$location","Authentication",function($rootScope,$scope,$http,$location,Authentication){$rootScope.staticMenu=!0,$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.credentials={},$scope.credentials.seedData=!0,$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/mytao")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/mytao")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$rootScope","$scope","$stateParams","$http","$location","Authentication",function($rootScope,$scope,$stateParams,$http,$location,Authentication){$rootScope.staticMenu=!!Authentication,$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$rootScope","$scope","$http","$location","Users","Authentication",function($rootScope,$scope,$http,$location,Users,Authentication){
$rootScope.staticMenu=!1,$scope.user=Authentication.user,$scope.roles=[{roleString:"superAdmin",roleTitle:"Super Administrator",selected:!1},{roleString:"admin",roleTitle:"Administrator",selected:!1},{roleString:"pmo",roleTitle:"PMO",selected:!1},{roleString:"projectManager",roleTitle:"Project Manager",selected:!1},{roleString:"portfolioManager",roleTitle:"Portfolio Manager",selected:!1},{roleString:"executive",roleTitle:"Executive",selected:!1}],$scope.user||$location.path("/signin"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid)$scope.submitted=!0;else{$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",["$q",function($q){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);